Search.setIndex({"docnames": ["_autosummary/seldonian", "_autosummary/seldonian.RL", "_autosummary/seldonian.RL.Agents", "_autosummary/seldonian.RL.Agents.Agent", "_autosummary/seldonian.RL.Agents.Agent.Agent", "_autosummary/seldonian.RL.Agents.Bases", "_autosummary/seldonian.RL.Agents.Bases.Fourier", "_autosummary/seldonian.RL.Agents.Bases.Fourier.Fourier", "_autosummary/seldonian.RL.Agents.Discrete_Random_Agent", "_autosummary/seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent", "_autosummary/seldonian.RL.Agents.Function_Approximators", "_autosummary/seldonian.RL.Agents.Function_Approximators.Function_Approximator", "_autosummary/seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.Q_Table", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.Table", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description", "_autosummary/seldonian.RL.Agents.Parameterized_non_learning_softmax_agent", "_autosummary/seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent", "_autosummary/seldonian.RL.Agents.Policies", "_autosummary/seldonian.RL.Agents.Policies.Policy", "_autosummary/seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy", "_autosummary/seldonian.RL.Agents.Policies.Policy.Policy", "_autosummary/seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea", "_autosummary/seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea", "_autosummary/seldonian.RL.Agents.Policies.Softmax", "_autosummary/seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax", "_autosummary/seldonian.RL.Agents.Policies.Softmax.MixedSoftmax", "_autosummary/seldonian.RL.Agents.Policies.Softmax.Softmax", "_autosummary/seldonian.RL.Agents.keyboard_gridworld", "_autosummary/seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld", "_autosummary/seldonian.RL.Agents.mountain_car_rough_solution", "_autosummary/seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution", "_autosummary/seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent", "_autosummary/seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent", "_autosummary/seldonian.RL.Env_Description", "_autosummary/seldonian.RL.Env_Description.Env_Description", "_autosummary/seldonian.RL.Env_Description.Env_Description.Env_Description", "_autosummary/seldonian.RL.Env_Description.Env_Description.check_space_type", "_autosummary/seldonian.RL.Env_Description.Spaces", "_autosummary/seldonian.RL.Env_Description.Spaces.Continuous_Space", "_autosummary/seldonian.RL.Env_Description.Spaces.Discrete_Space", "_autosummary/seldonian.RL.RL_model", "_autosummary/seldonian.RL.RL_model.RL_model", "_autosummary/seldonian.RL.RL_runner", "_autosummary/seldonian.RL.RL_runner.create_agent_fromdict", "_autosummary/seldonian.RL.RL_runner.run_episode", "_autosummary/seldonian.RL.RL_runner.run_episode_from_dict", "_autosummary/seldonian.RL.RL_runner.run_episodes_par", "_autosummary/seldonian.RL.RL_runner.run_trial", "_autosummary/seldonian.RL.RL_runner.run_trial_given_agent_and_env", "_autosummary/seldonian.RL.environments", "_autosummary/seldonian.RL.environments.Environment", "_autosummary/seldonian.RL.environments.Environment.Environment", "_autosummary/seldonian.RL.environments.gridworld", "_autosummary/seldonian.RL.environments.gridworld.Gridworld", "_autosummary/seldonian.RL.environments.mountaincar", "_autosummary/seldonian.RL.environments.mountaincar.Mountaincar", "_autosummary/seldonian.RL.environments.n_step_mountaincar", "_autosummary/seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar", "_autosummary/seldonian.RL.generate_gridworld_episodes", "_autosummary/seldonian.RL.generate_gridworld_episodes.main", "_autosummary/seldonian.RL.generate_mountaincar_episodes", "_autosummary/seldonian.RL.generate_mountaincar_episodes.main", "_autosummary/seldonian.RL.hyperparams_and_settings", "_autosummary/seldonian.RL.hyperparams_and_settings.define_hyperparameter_and_setting_dict", "_autosummary/seldonian.candidate_selection", "_autosummary/seldonian.candidate_selection.candidate_selection", "_autosummary/seldonian.candidate_selection.candidate_selection.CandidateSelection", "_autosummary/seldonian.dataset", "_autosummary/seldonian.dataset.DataSet", "_autosummary/seldonian.dataset.DataSetLoader", "_autosummary/seldonian.dataset.Episode", "_autosummary/seldonian.dataset.MetaData", "_autosummary/seldonian.dataset.RLDataSet", "_autosummary/seldonian.dataset.RLMetaData", "_autosummary/seldonian.dataset.SupervisedDataSet", "_autosummary/seldonian.dataset.SupervisedMetaData", "_autosummary/seldonian.dataset.load_RL_metadata", "_autosummary/seldonian.dataset.load_supervised_metadata", "_autosummary/seldonian.hyperparam_search", "_autosummary/seldonian.hyperparam_search.HyperparamSearch", "_autosummary/seldonian.models", "_autosummary/seldonian.models.models", "_autosummary/seldonian.models.models.BaseLogisticRegressionModel", "_autosummary/seldonian.models.models.BinaryLogisticRegressionModel", "_autosummary/seldonian.models.models.BoundedLinearRegressionModel", "_autosummary/seldonian.models.models.ClassificationModel", "_autosummary/seldonian.models.models.DummyClassifierModel", "_autosummary/seldonian.models.models.LinearRegressionModel", "_autosummary/seldonian.models.models.LinearRegressionModelListFeatures", "_autosummary/seldonian.models.models.MultiClassLogisticRegressionModel", "_autosummary/seldonian.models.models.RandomClassifierModel", "_autosummary/seldonian.models.models.RegressionModel", "_autosummary/seldonian.models.models.SeldonianModel", "_autosummary/seldonian.models.models.SupervisedModel", "_autosummary/seldonian.models.objectives", "_autosummary/seldonian.models.objectives.Error_Rate", "_autosummary/seldonian.models.objectives.False_Negative_Rate", "_autosummary/seldonian.models.objectives.False_Positive_Rate", "_autosummary/seldonian.models.objectives.IS_estimate", "_autosummary/seldonian.models.objectives.Mean_Error", "_autosummary/seldonian.models.objectives.Mean_Squared_Error", "_autosummary/seldonian.models.objectives.Negative_Rate", "_autosummary/seldonian.models.objectives.PDIS_estimate", "_autosummary/seldonian.models.objectives.Positive_Rate", "_autosummary/seldonian.models.objectives.True_Negative_Rate", "_autosummary/seldonian.models.objectives.True_Positive_Rate", "_autosummary/seldonian.models.objectives.US_estimate", "_autosummary/seldonian.models.objectives.WIS_estimate", "_autosummary/seldonian.models.objectives.binary_logistic_loss", "_autosummary/seldonian.models.objectives.confusion_matrix", "_autosummary/seldonian.models.objectives.gradient_Bounded_Squared_Error", "_autosummary/seldonian.models.objectives.gradient_Mean_Squared_Error", "_autosummary/seldonian.models.objectives.gradient_binary_logistic_loss", "_autosummary/seldonian.models.objectives.multiclass_logistic_loss", "_autosummary/seldonian.models.sklearn_lr", "_autosummary/seldonian.models.sklearn_lr.SkLearnLinearRegressor", "_autosummary/seldonian.models.sklearn_model", "_autosummary/seldonian.models.sklearn_model.SupervisedSkLearnBaseModel", "_autosummary/seldonian.models.sklearn_model.sklearn_predict_vjp", "_autosummary/seldonian.models.trees", "_autosummary/seldonian.models.trees.skrandomforest_model", "_autosummary/seldonian.models.trees.skrandomforest_model.SeldonianRandomForest", "_autosummary/seldonian.models.trees.skrandomforest_model.probs2theta", "_autosummary/seldonian.models.trees.skrandomforest_model.sigmoid", "_autosummary/seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp", "_autosummary/seldonian.models.trees.sktree_model", "_autosummary/seldonian.models.trees.sktree_model.SeldonianDecisionTree", "_autosummary/seldonian.models.trees.sktree_model.probs2theta", "_autosummary/seldonian.models.trees.sktree_model.sigmoid", "_autosummary/seldonian.models.trees.sktree_model.sklearn_predict_vjp", "_autosummary/seldonian.optimizers", "_autosummary/seldonian.optimizers.gradient_descent", "_autosummary/seldonian.optimizers.gradient_descent.gradient_descent_adam", "_autosummary/seldonian.optimizers.gradient_descent.setup_gradients", "_autosummary/seldonian.parse_tree", "_autosummary/seldonian.parse_tree.nodes", "_autosummary/seldonian.parse_tree.nodes.BaseNode", "_autosummary/seldonian.parse_tree.nodes.CVaRSQeBaseNode", "_autosummary/seldonian.parse_tree.nodes.ConfusionMatrixBaseNode", "_autosummary/seldonian.parse_tree.nodes.ConstantNode", "_autosummary/seldonian.parse_tree.nodes.InternalNode", "_autosummary/seldonian.parse_tree.nodes.MEDCustomBaseNode", "_autosummary/seldonian.parse_tree.nodes.MultiClassBaseNode", "_autosummary/seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode", "_autosummary/seldonian.parse_tree.nodes.Node", "_autosummary/seldonian.parse_tree.nodes.RLAltRewardBaseNode", "_autosummary/seldonian.parse_tree.operators", "_autosummary/seldonian.parse_tree.parse_tree", "_autosummary/seldonian.parse_tree.parse_tree.ParseTree", "_autosummary/seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints", "_autosummary/seldonian.parse_tree.zhat_funcs", "_autosummary/seldonian.parse_tree.zhat_funcs.batcher", "_autosummary/seldonian.parse_tree.zhat_funcs.evaluate_statistic", "_autosummary/seldonian.parse_tree.zhat_funcs.sample_from_statistic", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Accuracy", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Error", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Error_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_IS_estimate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Negative_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Positive_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Squared_Error", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_WIS_estimate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_confusion_matrix", "_autosummary/seldonian.safety_test", "_autosummary/seldonian.safety_test.safety_test", "_autosummary/seldonian.safety_test.safety_test.SafetyTest", "_autosummary/seldonian.seldonian_algorithm", "_autosummary/seldonian.seldonian_algorithm.SeldonianAlgorithm", "_autosummary/seldonian.spec", "_autosummary/seldonian.spec.RLSpec", "_autosummary/seldonian.spec.Spec", "_autosummary/seldonian.spec.SupervisedSpec", "_autosummary/seldonian.spec.createRLSpec", "_autosummary/seldonian.spec.createSimpleSupervisedSpec", "_autosummary/seldonian.spec.createSupervisedSpec", "_autosummary/seldonian.spec.validate_parse_trees", "_autosummary/seldonian.utils", "_autosummary/seldonian.utils.RL_utils", "_autosummary/seldonian.utils.RL_utils.argmax_multi", "_autosummary/seldonian.utils.RL_utils.clamp", "_autosummary/seldonian.utils.RL_utils.error", "_autosummary/seldonian.utils.io_utils", "_autosummary/seldonian.utils.io_utils.cmaes_logger", "_autosummary/seldonian.utils.io_utils.dir_path", "_autosummary/seldonian.utils.io_utils.load_json", "_autosummary/seldonian.utils.io_utils.load_pickle", "_autosummary/seldonian.utils.io_utils.save_json", "_autosummary/seldonian.utils.io_utils.save_pickle", "_autosummary/seldonian.utils.plot_utils", "_autosummary/seldonian.utils.plot_utils.plot_gradient_descent", "_autosummary/seldonian.utils.stats_utils", "_autosummary/seldonian.utils.stats_utils.custom_cumprod", "_autosummary/seldonian.utils.stats_utils.softmax", "_autosummary/seldonian.utils.stats_utils.stddev", "_autosummary/seldonian.utils.stats_utils.tinv", "_autosummary/seldonian.utils.stats_utils.weighted_sum_gamma", "_autosummary/seldonian.utils.tutorial_utils", "_autosummary/seldonian.utils.tutorial_utils.generate_clipped_data", "_autosummary/seldonian.utils.tutorial_utils.generate_data", "_autosummary/seldonian.utils.tutorial_utils.make_synthetic_regression_dataset", "_autosummary/seldonian.warnings", "_autosummary/seldonian.warnings.custom_warnings", "_autosummary/seldonian.warnings.custom_warnings.custom_formatwarning", "api", "getting_started", "index", "overview"], "filenames": ["_autosummary/seldonian.rst", "_autosummary/seldonian.RL.rst", "_autosummary/seldonian.RL.Agents.rst", "_autosummary/seldonian.RL.Agents.Agent.rst", "_autosummary/seldonian.RL.Agents.Agent.Agent.rst", "_autosummary/seldonian.RL.Agents.Bases.rst", "_autosummary/seldonian.RL.Agents.Bases.Fourier.rst", "_autosummary/seldonian.RL.Agents.Bases.Fourier.Fourier.rst", "_autosummary/seldonian.RL.Agents.Discrete_Random_Agent.rst", "_autosummary/seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Function_Approximator.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.Q_Table.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.Table.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description.rst", "_autosummary/seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.rst", "_autosummary/seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.rst", "_autosummary/seldonian.RL.Agents.Policies.rst", "_autosummary/seldonian.RL.Agents.Policies.Policy.rst", "_autosummary/seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.rst", "_autosummary/seldonian.RL.Agents.Policies.Policy.Policy.rst", "_autosummary/seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.rst", "_autosummary/seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.rst", "_autosummary/seldonian.RL.Agents.Policies.Softmax.rst", "_autosummary/seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.rst", "_autosummary/seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.rst", "_autosummary/seldonian.RL.Agents.Policies.Softmax.Softmax.rst", "_autosummary/seldonian.RL.Agents.keyboard_gridworld.rst", "_autosummary/seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.rst", "_autosummary/seldonian.RL.Agents.mountain_car_rough_solution.rst", "_autosummary/seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.rst", "_autosummary/seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.rst", "_autosummary/seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.rst", "_autosummary/seldonian.RL.Env_Description.rst", "_autosummary/seldonian.RL.Env_Description.Env_Description.rst", "_autosummary/seldonian.RL.Env_Description.Env_Description.Env_Description.rst", "_autosummary/seldonian.RL.Env_Description.Env_Description.check_space_type.rst", "_autosummary/seldonian.RL.Env_Description.Spaces.rst", "_autosummary/seldonian.RL.Env_Description.Spaces.Continuous_Space.rst", "_autosummary/seldonian.RL.Env_Description.Spaces.Discrete_Space.rst", "_autosummary/seldonian.RL.RL_model.rst", "_autosummary/seldonian.RL.RL_model.RL_model.rst", "_autosummary/seldonian.RL.RL_runner.rst", "_autosummary/seldonian.RL.RL_runner.create_agent_fromdict.rst", "_autosummary/seldonian.RL.RL_runner.run_episode.rst", "_autosummary/seldonian.RL.RL_runner.run_episode_from_dict.rst", "_autosummary/seldonian.RL.RL_runner.run_episodes_par.rst", "_autosummary/seldonian.RL.RL_runner.run_trial.rst", "_autosummary/seldonian.RL.RL_runner.run_trial_given_agent_and_env.rst", "_autosummary/seldonian.RL.environments.rst", "_autosummary/seldonian.RL.environments.Environment.rst", "_autosummary/seldonian.RL.environments.Environment.Environment.rst", "_autosummary/seldonian.RL.environments.gridworld.rst", "_autosummary/seldonian.RL.environments.gridworld.Gridworld.rst", "_autosummary/seldonian.RL.environments.mountaincar.rst", "_autosummary/seldonian.RL.environments.mountaincar.Mountaincar.rst", "_autosummary/seldonian.RL.environments.n_step_mountaincar.rst", "_autosummary/seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.rst", "_autosummary/seldonian.RL.generate_gridworld_episodes.rst", "_autosummary/seldonian.RL.generate_gridworld_episodes.main.rst", "_autosummary/seldonian.RL.generate_mountaincar_episodes.rst", "_autosummary/seldonian.RL.generate_mountaincar_episodes.main.rst", "_autosummary/seldonian.RL.hyperparams_and_settings.rst", "_autosummary/seldonian.RL.hyperparams_and_settings.define_hyperparameter_and_setting_dict.rst", "_autosummary/seldonian.candidate_selection.rst", "_autosummary/seldonian.candidate_selection.candidate_selection.rst", "_autosummary/seldonian.candidate_selection.candidate_selection.CandidateSelection.rst", "_autosummary/seldonian.dataset.rst", "_autosummary/seldonian.dataset.DataSet.rst", "_autosummary/seldonian.dataset.DataSetLoader.rst", "_autosummary/seldonian.dataset.Episode.rst", "_autosummary/seldonian.dataset.MetaData.rst", "_autosummary/seldonian.dataset.RLDataSet.rst", "_autosummary/seldonian.dataset.RLMetaData.rst", "_autosummary/seldonian.dataset.SupervisedDataSet.rst", "_autosummary/seldonian.dataset.SupervisedMetaData.rst", "_autosummary/seldonian.dataset.load_RL_metadata.rst", "_autosummary/seldonian.dataset.load_supervised_metadata.rst", "_autosummary/seldonian.hyperparam_search.rst", "_autosummary/seldonian.hyperparam_search.HyperparamSearch.rst", "_autosummary/seldonian.models.rst", "_autosummary/seldonian.models.models.rst", "_autosummary/seldonian.models.models.BaseLogisticRegressionModel.rst", "_autosummary/seldonian.models.models.BinaryLogisticRegressionModel.rst", "_autosummary/seldonian.models.models.BoundedLinearRegressionModel.rst", "_autosummary/seldonian.models.models.ClassificationModel.rst", "_autosummary/seldonian.models.models.DummyClassifierModel.rst", "_autosummary/seldonian.models.models.LinearRegressionModel.rst", "_autosummary/seldonian.models.models.LinearRegressionModelListFeatures.rst", "_autosummary/seldonian.models.models.MultiClassLogisticRegressionModel.rst", "_autosummary/seldonian.models.models.RandomClassifierModel.rst", "_autosummary/seldonian.models.models.RegressionModel.rst", "_autosummary/seldonian.models.models.SeldonianModel.rst", "_autosummary/seldonian.models.models.SupervisedModel.rst", "_autosummary/seldonian.models.objectives.rst", "_autosummary/seldonian.models.objectives.Error_Rate.rst", "_autosummary/seldonian.models.objectives.False_Negative_Rate.rst", "_autosummary/seldonian.models.objectives.False_Positive_Rate.rst", "_autosummary/seldonian.models.objectives.IS_estimate.rst", "_autosummary/seldonian.models.objectives.Mean_Error.rst", "_autosummary/seldonian.models.objectives.Mean_Squared_Error.rst", "_autosummary/seldonian.models.objectives.Negative_Rate.rst", "_autosummary/seldonian.models.objectives.PDIS_estimate.rst", "_autosummary/seldonian.models.objectives.Positive_Rate.rst", "_autosummary/seldonian.models.objectives.True_Negative_Rate.rst", "_autosummary/seldonian.models.objectives.True_Positive_Rate.rst", "_autosummary/seldonian.models.objectives.US_estimate.rst", "_autosummary/seldonian.models.objectives.WIS_estimate.rst", "_autosummary/seldonian.models.objectives.binary_logistic_loss.rst", "_autosummary/seldonian.models.objectives.confusion_matrix.rst", "_autosummary/seldonian.models.objectives.gradient_Bounded_Squared_Error.rst", "_autosummary/seldonian.models.objectives.gradient_Mean_Squared_Error.rst", "_autosummary/seldonian.models.objectives.gradient_binary_logistic_loss.rst", "_autosummary/seldonian.models.objectives.multiclass_logistic_loss.rst", "_autosummary/seldonian.models.sklearn_lr.rst", "_autosummary/seldonian.models.sklearn_lr.SkLearnLinearRegressor.rst", "_autosummary/seldonian.models.sklearn_model.rst", "_autosummary/seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.rst", "_autosummary/seldonian.models.sklearn_model.sklearn_predict_vjp.rst", "_autosummary/seldonian.models.trees.rst", "_autosummary/seldonian.models.trees.skrandomforest_model.rst", "_autosummary/seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.rst", "_autosummary/seldonian.models.trees.skrandomforest_model.probs2theta.rst", "_autosummary/seldonian.models.trees.skrandomforest_model.sigmoid.rst", "_autosummary/seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp.rst", "_autosummary/seldonian.models.trees.sktree_model.rst", "_autosummary/seldonian.models.trees.sktree_model.SeldonianDecisionTree.rst", "_autosummary/seldonian.models.trees.sktree_model.probs2theta.rst", "_autosummary/seldonian.models.trees.sktree_model.sigmoid.rst", "_autosummary/seldonian.models.trees.sktree_model.sklearn_predict_vjp.rst", "_autosummary/seldonian.optimizers.rst", "_autosummary/seldonian.optimizers.gradient_descent.rst", "_autosummary/seldonian.optimizers.gradient_descent.gradient_descent_adam.rst", "_autosummary/seldonian.optimizers.gradient_descent.setup_gradients.rst", "_autosummary/seldonian.parse_tree.rst", "_autosummary/seldonian.parse_tree.nodes.rst", "_autosummary/seldonian.parse_tree.nodes.BaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.CVaRSQeBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.ConstantNode.rst", "_autosummary/seldonian.parse_tree.nodes.InternalNode.rst", "_autosummary/seldonian.parse_tree.nodes.MEDCustomBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.MultiClassBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.Node.rst", "_autosummary/seldonian.parse_tree.nodes.RLAltRewardBaseNode.rst", "_autosummary/seldonian.parse_tree.operators.rst", "_autosummary/seldonian.parse_tree.parse_tree.rst", "_autosummary/seldonian.parse_tree.parse_tree.ParseTree.rst", "_autosummary/seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.batcher.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.evaluate_statistic.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.sample_from_statistic.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Accuracy.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Error.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Error_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_IS_estimate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Negative_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Positive_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Squared_Error.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_WIS_estimate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_confusion_matrix.rst", "_autosummary/seldonian.safety_test.rst", "_autosummary/seldonian.safety_test.safety_test.rst", "_autosummary/seldonian.safety_test.safety_test.SafetyTest.rst", "_autosummary/seldonian.seldonian_algorithm.rst", "_autosummary/seldonian.seldonian_algorithm.SeldonianAlgorithm.rst", "_autosummary/seldonian.spec.rst", "_autosummary/seldonian.spec.RLSpec.rst", "_autosummary/seldonian.spec.Spec.rst", "_autosummary/seldonian.spec.SupervisedSpec.rst", "_autosummary/seldonian.spec.createRLSpec.rst", "_autosummary/seldonian.spec.createSimpleSupervisedSpec.rst", "_autosummary/seldonian.spec.createSupervisedSpec.rst", "_autosummary/seldonian.spec.validate_parse_trees.rst", "_autosummary/seldonian.utils.rst", "_autosummary/seldonian.utils.RL_utils.rst", "_autosummary/seldonian.utils.RL_utils.argmax_multi.rst", "_autosummary/seldonian.utils.RL_utils.clamp.rst", "_autosummary/seldonian.utils.RL_utils.error.rst", "_autosummary/seldonian.utils.io_utils.rst", "_autosummary/seldonian.utils.io_utils.cmaes_logger.rst", "_autosummary/seldonian.utils.io_utils.dir_path.rst", "_autosummary/seldonian.utils.io_utils.load_json.rst", "_autosummary/seldonian.utils.io_utils.load_pickle.rst", "_autosummary/seldonian.utils.io_utils.save_json.rst", "_autosummary/seldonian.utils.io_utils.save_pickle.rst", "_autosummary/seldonian.utils.plot_utils.rst", "_autosummary/seldonian.utils.plot_utils.plot_gradient_descent.rst", "_autosummary/seldonian.utils.stats_utils.rst", "_autosummary/seldonian.utils.stats_utils.custom_cumprod.rst", "_autosummary/seldonian.utils.stats_utils.softmax.rst", "_autosummary/seldonian.utils.stats_utils.stddev.rst", "_autosummary/seldonian.utils.stats_utils.tinv.rst", "_autosummary/seldonian.utils.stats_utils.weighted_sum_gamma.rst", "_autosummary/seldonian.utils.tutorial_utils.rst", "_autosummary/seldonian.utils.tutorial_utils.generate_clipped_data.rst", "_autosummary/seldonian.utils.tutorial_utils.generate_data.rst", "_autosummary/seldonian.utils.tutorial_utils.make_synthetic_regression_dataset.rst", "_autosummary/seldonian.warnings.rst", "_autosummary/seldonian.warnings.custom_warnings.rst", "_autosummary/seldonian.warnings.custom_warnings.custom_formatwarning.rst", "api.rst", "getting_started.rst", "index.rst", "overview.rst"], "titles": ["seldonian", "seldonian.RL", "seldonian.RL.Agents", "seldonian.RL.Agents.Agent", "seldonian.RL.Agents.Agent.Agent", "seldonian.RL.Agents.Bases", "seldonian.RL.Agents.Bases.Fourier", "seldonian.RL.Agents.Bases.Fourier.Fourier", "seldonian.RL.Agents.Discrete_Random_Agent", "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent", "seldonian.RL.Agents.Function_Approximators", "seldonian.RL.Agents.Function_Approximators.Function_Approximator", "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator", "seldonian.RL.Agents.Function_Approximators.Linear_FA", "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA", "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA", "seldonian.RL.Agents.Function_Approximators.Table", "seldonian.RL.Agents.Function_Approximators.Table.Q_Table", "seldonian.RL.Agents.Function_Approximators.Table.Table", "seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description", "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent", "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent", "seldonian.RL.Agents.Policies", "seldonian.RL.Agents.Policies.Policy", "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy", "seldonian.RL.Agents.Policies.Policy.Policy", "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea", "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea", "seldonian.RL.Agents.Policies.Softmax", "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax", "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax", "seldonian.RL.Agents.Policies.Softmax.Softmax", "seldonian.RL.Agents.keyboard_gridworld", "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld", "seldonian.RL.Agents.mountain_car_rough_solution", "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution", "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent", "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent", "seldonian.RL.Env_Description", "seldonian.RL.Env_Description.Env_Description", "seldonian.RL.Env_Description.Env_Description.Env_Description", "seldonian.RL.Env_Description.Env_Description.check_space_type", "seldonian.RL.Env_Description.Spaces", "seldonian.RL.Env_Description.Spaces.Continuous_Space", "seldonian.RL.Env_Description.Spaces.Discrete_Space", "seldonian.RL.RL_model", "seldonian.RL.RL_model.RL_model", "seldonian.RL.RL_runner", "seldonian.RL.RL_runner.create_agent_fromdict", "seldonian.RL.RL_runner.run_episode", "seldonian.RL.RL_runner.run_episode_from_dict", "seldonian.RL.RL_runner.run_episodes_par", "seldonian.RL.RL_runner.run_trial", "seldonian.RL.RL_runner.run_trial_given_agent_and_env", "seldonian.RL.environments", "seldonian.RL.environments.Environment", "seldonian.RL.environments.Environment.Environment", "seldonian.RL.environments.gridworld", "seldonian.RL.environments.gridworld.Gridworld", "seldonian.RL.environments.mountaincar", "seldonian.RL.environments.mountaincar.Mountaincar", "seldonian.RL.environments.n_step_mountaincar", "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar", "seldonian.RL.generate_gridworld_episodes", "seldonian.RL.generate_gridworld_episodes.main", "seldonian.RL.generate_mountaincar_episodes", "seldonian.RL.generate_mountaincar_episodes.main", "seldonian.RL.hyperparams_and_settings", "seldonian.RL.hyperparams_and_settings.define_hyperparameter_and_setting_dict", "seldonian.candidate_selection", "seldonian.candidate_selection.candidate_selection", "seldonian.candidate_selection.candidate_selection.CandidateSelection", "seldonian.dataset", "seldonian.dataset.DataSet", "seldonian.dataset.DataSetLoader", "seldonian.dataset.Episode", "seldonian.dataset.MetaData", "seldonian.dataset.RLDataSet", "seldonian.dataset.RLMetaData", "seldonian.dataset.SupervisedDataSet", "seldonian.dataset.SupervisedMetaData", "seldonian.dataset.load_RL_metadata", "seldonian.dataset.load_supervised_metadata", "seldonian.hyperparam_search", "seldonian.hyperparam_search.HyperparamSearch", "seldonian.models", "seldonian.models.models", "seldonian.models.models.BaseLogisticRegressionModel", "seldonian.models.models.BinaryLogisticRegressionModel", "seldonian.models.models.BoundedLinearRegressionModel", "seldonian.models.models.ClassificationModel", "seldonian.models.models.DummyClassifierModel", "seldonian.models.models.LinearRegressionModel", "seldonian.models.models.LinearRegressionModelListFeatures", "seldonian.models.models.MultiClassLogisticRegressionModel", "seldonian.models.models.RandomClassifierModel", "seldonian.models.models.RegressionModel", "seldonian.models.models.SeldonianModel", "seldonian.models.models.SupervisedModel", "seldonian.models.objectives", "seldonian.models.objectives.Error_Rate", "seldonian.models.objectives.False_Negative_Rate", "seldonian.models.objectives.False_Positive_Rate", "seldonian.models.objectives.IS_estimate", "seldonian.models.objectives.Mean_Error", "seldonian.models.objectives.Mean_Squared_Error", "seldonian.models.objectives.Negative_Rate", "seldonian.models.objectives.PDIS_estimate", "seldonian.models.objectives.Positive_Rate", "seldonian.models.objectives.True_Negative_Rate", "seldonian.models.objectives.True_Positive_Rate", "seldonian.models.objectives.US_estimate", "seldonian.models.objectives.WIS_estimate", "seldonian.models.objectives.binary_logistic_loss", "seldonian.models.objectives.confusion_matrix", "seldonian.models.objectives.gradient_Bounded_Squared_Error", "seldonian.models.objectives.gradient_Mean_Squared_Error", "seldonian.models.objectives.gradient_binary_logistic_loss", "seldonian.models.objectives.multiclass_logistic_loss", "seldonian.models.sklearn_lr", "seldonian.models.sklearn_lr.SkLearnLinearRegressor", "seldonian.models.sklearn_model", "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel", "seldonian.models.sklearn_model.sklearn_predict_vjp", "seldonian.models.trees", "seldonian.models.trees.skrandomforest_model", "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest", "seldonian.models.trees.skrandomforest_model.probs2theta", "seldonian.models.trees.skrandomforest_model.sigmoid", "seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp", "seldonian.models.trees.sktree_model", "seldonian.models.trees.sktree_model.SeldonianDecisionTree", "seldonian.models.trees.sktree_model.probs2theta", "seldonian.models.trees.sktree_model.sigmoid", "seldonian.models.trees.sktree_model.sklearn_predict_vjp", "seldonian.optimizers", "seldonian.optimizers.gradient_descent", "seldonian.optimizers.gradient_descent.gradient_descent_adam", "seldonian.optimizers.gradient_descent.setup_gradients", "seldonian.parse_tree", "seldonian.parse_tree.nodes", "seldonian.parse_tree.nodes.BaseNode", "seldonian.parse_tree.nodes.CVaRSQeBaseNode", "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode", "seldonian.parse_tree.nodes.ConstantNode", "seldonian.parse_tree.nodes.InternalNode", "seldonian.parse_tree.nodes.MEDCustomBaseNode", "seldonian.parse_tree.nodes.MultiClassBaseNode", "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode", "seldonian.parse_tree.nodes.Node", "seldonian.parse_tree.nodes.RLAltRewardBaseNode", "seldonian.parse_tree.operators", "seldonian.parse_tree.parse_tree", "seldonian.parse_tree.parse_tree.ParseTree", "seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints", "seldonian.parse_tree.zhat_funcs", "seldonian.parse_tree.zhat_funcs.batcher", "seldonian.parse_tree.zhat_funcs.evaluate_statistic", "seldonian.parse_tree.zhat_funcs.sample_from_statistic", "seldonian.parse_tree.zhat_funcs.vector_Accuracy", "seldonian.parse_tree.zhat_funcs.vector_Error", "seldonian.parse_tree.zhat_funcs.vector_Error_Rate", "seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate", "seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate", "seldonian.parse_tree.zhat_funcs.vector_IS_estimate", "seldonian.parse_tree.zhat_funcs.vector_Negative_Rate", "seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate", "seldonian.parse_tree.zhat_funcs.vector_Positive_Rate", "seldonian.parse_tree.zhat_funcs.vector_Squared_Error", "seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate", "seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate", "seldonian.parse_tree.zhat_funcs.vector_WIS_estimate", "seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate", "seldonian.parse_tree.zhat_funcs.vector_confusion_matrix", "seldonian.safety_test", "seldonian.safety_test.safety_test", "seldonian.safety_test.safety_test.SafetyTest", "seldonian.seldonian_algorithm", "seldonian.seldonian_algorithm.SeldonianAlgorithm", "seldonian.spec", "seldonian.spec.RLSpec", "seldonian.spec.Spec", "seldonian.spec.SupervisedSpec", "seldonian.spec.createRLSpec", "seldonian.spec.createSimpleSupervisedSpec", "seldonian.spec.createSupervisedSpec", "seldonian.spec.validate_parse_trees", "seldonian.utils", "seldonian.utils.RL_utils", "seldonian.utils.RL_utils.argmax_multi", "seldonian.utils.RL_utils.clamp", "seldonian.utils.RL_utils.error", "seldonian.utils.io_utils", "seldonian.utils.io_utils.cmaes_logger", "seldonian.utils.io_utils.dir_path", "seldonian.utils.io_utils.load_json", "seldonian.utils.io_utils.load_pickle", "seldonian.utils.io_utils.save_json", "seldonian.utils.io_utils.save_pickle", "seldonian.utils.plot_utils", "seldonian.utils.plot_utils.plot_gradient_descent", "seldonian.utils.stats_utils", "seldonian.utils.stats_utils.custom_cumprod", "seldonian.utils.stats_utils.softmax", "seldonian.utils.stats_utils.stddev", "seldonian.utils.stats_utils.tinv", "seldonian.utils.stats_utils.weighted_sum_gamma", "seldonian.utils.tutorial_utils", "seldonian.utils.tutorial_utils.generate_clipped_data", "seldonian.utils.tutorial_utils.generate_data", "seldonian.utils.tutorial_utils.make_synthetic_regression_dataset", "seldonian.warnings", "seldonian.warnings.custom_warnings", "seldonian.warnings.custom_warnings.custom_formatwarning", "API", "Getting Started", "Seldonian Engine documentation", "Overview"], "terms": {"engin": [0, 215, 217], "packag": [0, 217], "modul": [0, 1, 2, 5, 10, 22, 38, 54, 69, 70, 83, 85, 86, 124, 135, 139, 151, 152, 174, 175, 177, 179, 187, 211, 213, 217], "class": [3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 106, 108, 109, 110, 114, 118, 119, 120, 121, 122, 123, 125, 126, 130, 131, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 162, 163, 165, 167, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 217], "base": [4, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 131, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 176, 178, 180, 181, 182, 216, 217], "object": [4, 7, 9, 12, 14, 15, 19, 21, 24, 25, 29, 30, 31, 37, 40, 43, 44, 56, 58, 71, 73, 74, 75, 76, 77, 79, 84, 97, 126, 131, 137, 138, 141, 142, 143, 146, 147, 148, 149, 150, 153, 155, 172, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 193, 195, 196, 197, 198, 200, 216], "__init__": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 131, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 176, 178, 180, 181, 182, 216], "__repr__": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 131, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 176, 178, 180, 181, 182, 216], "return": [4, 7, 9, 12, 14, 15, 17, 18, 19, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 48, 49, 50, 51, 52, 53, 56, 58, 60, 62, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 129, 131, 134, 137, 141, 142, 143, 146, 147, 148, 150, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 180, 181, 182, 189, 200, 202, 204, 205, 206, 217], "repr": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 131, 153, 176, 178, 180, 181, 182], "self": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 131, 148, 153, 176, 178, 180, 181, 182], "method": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 71, 73, 74, 75, 76, 77, 78, 79, 80, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 131, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 176, 178, 180, 181, 182, 217], "choose_act": [4, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 216], "observ": [4, 7, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 60, 62, 75, 88, 91, 94, 95, 141, 142, 143, 146, 147, 148, 150, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 173, 217], "choos": [4, 9, 33, 35, 217], "an": [4, 7, 9, 14, 15, 19, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 48, 52, 56, 58, 60, 62, 71, 123, 126, 129, 131, 134, 141, 142, 143, 147, 148, 149, 150, 151, 153, 176, 178, 194, 195, 196, 197, 198, 206, 217], "action": [4, 9, 15, 17, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 74, 75, 111, 172, 217], "given": [4, 7, 9, 17, 19, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 46, 56, 58, 60, 62, 71, 120, 138, 141, 142, 143, 146, 147, 148, 150, 153, 154, 176, 178, 217], "To": [4, 9, 33, 35, 37, 215], "overridden": [4, 9, 24, 25, 27, 33, 35, 37], "paramet": [4, 7, 9, 12, 14, 15, 17, 18, 19, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 41, 43, 44, 46, 48, 49, 50, 51, 52, 53, 56, 58, 60, 62, 71, 73, 74, 75, 77, 79, 82, 84, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 129, 131, 134, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 178, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 200, 202, 204, 205, 206, 208, 209, 210, 217], "The": [4, 9, 14, 15, 17, 18, 21, 29, 30, 31, 33, 35, 37, 43, 58, 71, 73, 74, 79, 82, 84, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 126, 129, 131, 134, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 178, 180, 181, 182, 183, 184, 185, 198, 200, 202, 206, 208, 209, 210, 216, 217], "current": [4, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 56, 58, 60, 62, 84, 90, 126, 131, 217], "type": [4, 9, 19, 21, 24, 29, 30, 31, 33, 35, 37, 41, 48, 49, 50, 58, 71, 84, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 126, 137, 141, 142, 143, 146, 147, 148, 150, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 178, 202, 204, 205, 206, 217], "depend": [4, 9, 21, 24, 29, 30, 31, 33, 35, 37, 101, 102, 106, 108, 109, 110, 122, 141, 142, 143, 146, 147, 148, 150, 162, 163, 165, 167, 169, 170, 178, 217], "environ": [4, 7, 9, 14, 15, 17, 18, 19, 21, 24, 29, 30, 31, 33, 35, 37, 40, 46, 48, 49, 50, 51, 52, 53, 183, 216, 217], "get_param": [4, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 216], "retriev": [4, 9, 33, 35, 37, 126, 131], "": [4, 9, 21, 33, 35, 37, 40, 126, 131, 146, 153, 178, 204, 205, 217], "polici": [4, 9, 21, 33, 35, 37, 46, 51, 52, 75, 148, 150, 183, 216, 217], "get_prob_this_act": [4, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 216], "get": [4, 7, 9, 17, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 71, 84, 111, 114, 126, 153, 172, 173, 176, 178, 216, 217], "probabl": [4, 9, 17, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 46, 75, 84, 88, 91, 94, 95, 114, 122, 126, 131, 142, 153, 159, 161, 173, 205, 217], "provid": [4, 9, 33, 35, 37, 40, 153, 157, 178, 180, 181, 182, 183, 217], "i": [4, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 43, 51, 53, 58, 71, 84, 87, 88, 89, 94, 103, 111, 112, 114, 117, 120, 122, 126, 131, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 159, 161, 164, 166, 171, 172, 173, 176, 178, 180, 181, 182, 193, 194, 200, 215, 216, 217], "set_new_param": [4, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 216], "theta": [4, 9, 27, 33, 35, 37, 71, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 128, 129, 131, 133, 134, 137, 141, 142, 143, 146, 147, 148, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 217], "updat": [4, 9, 21, 25, 33, 35, 37, 58, 120, 122, 126, 131, 183, 185, 216], "model": [4, 9, 12, 14, 15, 17, 18, 33, 35, 46, 71, 84, 137, 141, 142, 143, 146, 147, 148, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 178, 180, 181, 182, 183, 216], "next_observ": [4, 9, 21, 33, 35, 37], "reward": [4, 9, 21, 33, 35, 37, 58, 74, 75, 111, 150, 164, 166, 171, 172, 206, 217], "termin": [4, 9, 21, 33, 35, 37, 56, 58, 60, 62, 216], "accord": [4, 9, 21, 33, 35, 84], "learn": [4, 9, 21, 33, 35, 71, 73, 74, 78, 79, 80, 86, 90, 97, 98, 120, 122, 137, 141, 142, 143, 146, 147, 148, 150, 153, 154, 176, 182, 216, 217], "rule": [4, 9, 21, 33, 35], "overriden": [4, 9, 33, 35], "after": [4, 9, 21, 33, 35, 37], "taken": [4, 9, 21, 33, 35, 37, 40, 46], "take": [4, 9, 21, 24, 25, 27, 33, 35, 37, 153, 217], "bool": [4, 9, 21, 33, 35, 37, 58, 71, 149, 153, 176, 180, 181, 182, 183, 200], "whether": [4, 9, 21, 24, 29, 30, 31, 33, 35, 37, 51, 52, 58, 71, 84, 106, 108, 126, 131, 149, 153, 162, 163, 165, 167, 169, 170, 176, 178, 180, 181, 182, 183, 184, 185, 194, 200, 210, 217], "hyperparam_and_setting_dict": [7, 21, 24, 29, 30, 31], "env_desc": 7, "basi": [7, 14, 15, 24, 29, 30, 31], "us": [7, 14, 15, 21, 29, 33, 43, 44, 46, 51, 52, 56, 60, 62, 71, 84, 87, 88, 89, 92, 93, 94, 120, 122, 126, 131, 137, 138, 141, 142, 143, 146, 147, 148, 150, 151, 153, 172, 178, 180, 181, 182, 183, 184, 185, 193, 205, 206, 210, 215, 217], "linear": [7, 14, 15, 24, 29, 30, 31, 89, 92, 93, 120], "valu": [7, 15, 17, 29, 30, 31, 37, 44, 71, 84, 126, 137, 141, 142, 143, 144, 146, 147, 148, 150, 153, 160, 168, 176, 178, 193, 208, 210, 217], "function": [7, 12, 14, 15, 16, 21, 24, 29, 30, 31, 39, 47, 51, 58, 63, 65, 67, 71, 72, 89, 99, 120, 121, 123, 125, 126, 129, 130, 131, 134, 136, 137, 138, 141, 143, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 172, 176, 179, 180, 181, 182, 183, 184, 185, 188, 192, 193, 199, 200, 201, 205, 207, 212, 217], "approxim": [7, 12, 14, 15, 21, 24, 29, 30, 31], "see": [7, 30, 142, 146, 180, 181, 182, 216, 217], "http": [7, 30, 142, 146, 202, 205], "irl": 7, "c": [7, 30, 114, 142, 143, 173], "brown": 7, "edu": [7, 30, 142], "fb": 7, "php": 7, "refer": [7, 150, 217], "hyperparameter_and_setting_dict": [7, 24, 29, 30, 31, 37, 48, 50, 51, 52], "specifi": [7, 24, 29, 30, 31, 37, 48, 51, 52, 53, 151, 153, 180, 181, 182, 217], "number": [7, 17, 18, 24, 29, 30, 31, 37, 40, 43, 44, 48, 51, 52, 53, 58, 71, 73, 79, 84, 87, 88, 94, 114, 117, 126, 131, 137, 141, 142, 143, 146, 147, 148, 150, 153, 156, 173, 176, 178, 208, 209, 210, 217], "episod": [7, 24, 29, 30, 31, 37, 48, 49, 50, 51, 52, 53, 64, 66, 73, 74, 77, 79, 103, 107, 111, 112, 148, 150, 164, 166, 171, 172, 178, 216, 217], "per": [7, 24, 29, 30, 31, 37, 48, 107, 166, 200], "trial": [7, 24, 29, 30, 31, 37, 48, 51, 52, 64, 66], "env_descript": [7, 9, 14, 15, 19, 21, 24, 29, 30, 31, 33, 37, 58, 216], "access": [7, 9, 14, 15, 19, 21, 24, 29, 30, 31, 37, 40], "attribut": [7, 9, 14, 15, 19, 21, 24, 29, 30, 31, 37, 40, 58, 74, 77, 143, 147, 150, 153, 178, 217], "calculate_num_featur": [7, 216], "order": [7, 126, 131, 217], "max_coupled_var": 7, "num_obs_dim": 7, "determin": [7, 37, 84, 137, 153, 183, 184, 185], "featur": [7, 14, 15, 74, 79, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 129, 131, 134, 141, 142, 143, 146, 147, 148, 150, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 173, 178, 217], "construct_basis_matrix": [7, 216], "creat": [7, 19, 24, 29, 30, 31, 48, 58, 71, 74, 84, 120, 122, 141, 142, 143, 146, 147, 148, 150, 153, 154, 178, 183, 184, 185, 217], "matrix": [7, 114, 126, 143, 173, 217], "get_featur": [7, 216], "ob": [7, 17, 18, 21, 24, 25, 27, 29, 30, 31, 37, 40, 56, 58, 60, 62, 74], "get_normalized_observ": [7, 216], "normal": [7, 153, 208, 209, 210], "act": 9, "discret": [9, 24, 29, 30, 31, 40, 41, 44], "space": [9, 24, 29, 30, 31, 40, 41, 58, 216], "pick": 9, "uniform": [9, 37], "random": [9, 37, 126, 208, 209, 210], "capabl": [9, 18], "new_param": [12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 37, 46], "set": [12, 14, 15, 17, 18, 21, 24, 27, 29, 30, 31, 37, 51, 52, 71, 84, 101, 102, 106, 108, 109, 110, 131, 139, 143, 144, 153, 178, 217], "new": [12, 14, 15, 17, 18, 29, 30, 31, 56, 60, 62, 126, 148, 150, 153, 216, 217], "weight": [12, 14, 15, 17, 18, 21, 24, 27, 29, 30, 31, 37, 46, 71, 84, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 129, 131, 134, 137, 141, 142, 143, 146, 147, 148, 150, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 178, 180, 181, 182, 183, 206, 217], "encod": [14, 15, 217], "A": [15, 17, 19, 29, 46, 53, 56, 58, 60, 62, 111, 123, 126, 129, 131, 134, 143, 147, 148, 150, 151, 153, 156, 164, 166, 171, 180, 181, 182, 193, 194, 195, 196, 197, 198, 216], "state": [15, 17, 18, 21, 40, 58], "min_stat": [17, 18], "num_stat": [17, 18, 58], "num_act": 17, "q": [17, 19, 29], "contain": [17, 21, 25, 58, 71, 74, 84, 86, 126, 137, 141, 142, 143, 146, 147, 148, 150, 151, 153, 157, 158, 176, 178, 180, 181, 182, 184, 185, 217], "transit": [17, 56, 58, 60, 62, 216], "int": [17, 18, 29, 44, 58, 71, 73, 79, 84, 114, 137, 141, 142, 143, 146, 147, 148, 149, 150, 153, 156, 173, 176, 205, 208, 209, 210], "smallest": [17, 18], "total": [17, 18, 44, 84, 153, 156], "from_environment_state_to_0_indexed_st": [17, 18, 216], "env_stat": [17, 18], "convert": [17, 18, 24, 29, 30, 31, 120, 122, 123, 129], "0": [17, 18, 24, 29, 30, 31, 43, 58, 71, 89, 95, 100, 101, 102, 106, 108, 109, 110, 112, 126, 137, 141, 142, 143, 146, 147, 148, 150, 153, 159, 161, 162, 163, 165, 167, 169, 170, 173, 176, 180, 181, 182, 183, 184, 185, 206, 208, 209, 210, 217], "index": [17, 18, 24, 29, 30, 31, 71, 114, 143, 147, 149, 150, 173, 206, 217], "you": [17, 18, 74, 153, 156, 176, 198, 200, 215, 216, 217], "want": [17, 18, 41, 74, 84, 147, 150, 153, 156, 176, 198, 200, 215, 217], "get_action_values_given_st": [17, 24, 29, 30, 31, 216], "state_number_not_zero_index": 17, "possibl": [17, 21, 24, 29, 30, 31, 40, 56, 58, 60, 62, 142, 217], "environment": 17, "specif": [17, 24, 29, 30, 31, 48, 84, 150, 178, 179, 180, 181, 182, 217], "arrai": [17, 21, 24, 25, 27, 29, 30, 31, 37, 43, 46, 71, 84, 87, 88, 94, 114, 120, 122, 123, 126, 129, 131, 151, 153, 173, 176, 178, 202, 206, 217], "get_action_values_given_zero_indexed_st": [17, 216], "zero_indexed_state_numb": 17, "hold": [18, 73, 75, 76, 77, 78, 79, 80], "reindex": 18, "descript": [19, 24, 29, 30, 31, 56, 58, 60, 62, 217], "q_tabl": [19, 21, 216], "parametr": 21, "softmax": [21, 216, 217], "pi": 21, "frac": 21, "e": [21, 71, 73, 74, 77, 79, 126, 137, 141, 142, 143, 146, 147, 148, 150, 153, 154, 157, 158, 176, 180, 181, 182, 193, 217], "p": [21, 205, 217], "sum_": 21, "addit": [21, 217], "info": [21, 84, 137, 178], "about": [21, 137, 153, 217], "data": [21, 71, 74, 84, 88, 94, 113, 118, 141, 142, 143, 146, 147, 148, 150, 153, 176, 178, 180, 181, 182, 183, 184, 185, 197, 198, 204, 208, 209, 210, 217], "gener": [21, 24, 31, 148, 150, 208, 209, 210, 217], "variabl": [21, 43, 58, 126, 131, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153], "fa": 21, "select": [21, 24, 25, 27, 29, 30, 31, 69, 70, 71, 83, 84, 135, 137, 141, 142, 143, 146, 147, 148, 150, 153, 176, 178, 180, 181, 182, 183, 184, 216], "get_action_valu": [21, 216], "all": [21, 24, 29, 30, 31, 46, 56, 73, 79, 90, 96, 97, 98, 103, 107, 112, 113, 118, 120, 122, 126, 143, 147, 149, 150, 153, 176, 217], "from": [21, 24, 25, 27, 29, 30, 31, 37, 46, 48, 74, 75, 82, 84, 89, 92, 93, 123, 126, 129, 131, 134, 139, 146, 148, 152, 153, 164, 166, 171, 178, 195, 196, 210, 217], "thi": [21, 56, 58, 60, 62, 101, 102, 106, 108, 109, 110, 112, 114, 117, 126, 131, 137, 141, 142, 143, 146, 147, 148, 149, 150, 153, 159, 161, 171, 172, 173, 178, 208, 210, 216, 217], "float": [21, 29, 30, 31, 58, 84, 91, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 178, 180, 181, 182, 183, 184, 185, 202, 204, 205, 206, 208, 209, 210, 217], "Not": [21, 33, 53, 151], "implement": [21, 25, 37, 56, 58, 60, 62, 84, 88, 89, 91, 92, 93, 94, 95, 120, 122, 137, 202, 205, 217], "where": [24, 29, 53, 71, 112, 120, 126, 131, 137, 141, 142, 143, 146, 147, 148, 150, 153, 176, 178, 183, 184, 185, 197, 200, 206, 217], "ar": [24, 29, 37, 41, 43, 53, 71, 84, 131, 142, 143, 150, 151, 153, 176, 178, 186, 200, 206, 216, 217], "input": [24, 25, 27, 71, 91, 95, 141, 142, 143, 146, 147, 148, 150, 156, 194, 195, 202, 206, 217], "defin": [24, 25, 27, 43, 142, 151, 217], "how": [24, 25, 27, 30, 153, 217], "construct_basis_and_linear_fa": [24, 29, 30, 31, 216], "dictionari": [24, 29, 30, 31, 48, 53, 82, 137, 178, 180, 181, 182, 200, 217], "from_0_indexed_action_to_environment_act": [24, 29, 30, 31, 216], "action_0_index": [24, 29, 30, 31], "env": [24, 29, 30, 31, 49, 50, 53], "from_environment_action_to_0_indexed_act": [24, 29, 30, 31, 216], "env_act": [24, 29, 30, 31], "doe": [24, 25, 27, 71, 146, 153, 156, 216], "necessarili": [24, 25, 27], "need": [24, 25, 27, 131, 146, 149, 153, 154, 179, 217], "often": [24, 25, 27, 53, 217], "call": [24, 25, 27, 40, 122, 126, 131, 141, 142, 143, 146, 147, 148, 150, 156, 206, 217], "get_probs_from_observations_and_act": [24, 25, 27, 29, 30, 31, 46, 216], "behavior_action_prob": [24, 25, 27, 29, 30, 31], "each": [24, 25, 27, 43, 75, 77, 88, 91, 94, 95, 111, 126, 131, 141, 142, 143, 146, 147, 148, 150, 151, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 178, 180, 181, 182, 193, 200, 217], "make_state_action_fa": [24, 29, 30, 31, 216], "contin": [24, 29, 30, 31, 41], "some": [25, 84, 153, 178, 217], "which": [25, 37, 41, 120, 122, 126, 131, 141, 142, 143, 145, 146, 147, 148, 150, 151, 153, 172, 178, 183, 185, 217], "must": [25, 27, 37, 117, 120, 122, 123, 129, 141, 217], "ani": [25, 71, 153, 154, 217], "bb_crmin": [27, 37], "bb_crmax": [27, 37], "bb_cfmin": [27, 37], "bb_cfmax": [27, 37], "cr_shrink_factor": [27, 37], "cf_shrink_factor": [27, 37], "theta2crcf": [27, 216], "cr_center": 27, "cf_center": 27, "keep": [27, 120, 153], "mind": [27, 120], "thei": [27, 147, 151, 200, 217], "cap": 27, "so": [27, 146, 150, 153, 217], "when": [27, 71, 141, 143, 147, 148, 150, 153, 200, 217], "fix": [27, 71, 142, 176, 178, 217], "width": 27, "box": [27, 111, 144, 145, 149, 172, 217], "ad": [27, 217], "doesn": 27, "t": [27, 116, 117, 126, 131, 141, 142, 143, 146, 147, 148, 150, 205], "exce": 27, "origin": [27, 89], "bound": [27, 37, 43, 71, 89, 111, 115, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 172, 176, 178, 180, 181, 182, 217], "both": [29, 153, 217], "faster": 29, "than": [29, 43, 53, 142, 153, 176, 217], "just": [29, 122, 178], "becaus": [29, 53, 153, 200], "cach": [29, 153], "lookup": 29, "tabl": 29, "_arg": [29, 216], "helper": [29, 58, 153], "acceler": 29, "calcul": [29, 58, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 137, 141, 142, 143, 146, 147, 148, 150, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 176, 206, 217], "_denom": [29, 216], "choose_action_from_action_valu": [29, 30, 31, 216], "action_valu": [29, 30, 31], "list": [29, 30, 31, 46, 51, 52, 53, 71, 73, 74, 75, 77, 79, 84, 103, 107, 111, 112, 126, 141, 142, 143, 146, 147, 148, 150, 153, 154, 164, 166, 171, 176, 180, 181, 182, 183, 184, 185, 186, 217], "param": [29, 30, 31, 108], "get_action_probs_from_action_valu": [29, 30, 31, 216], "get_e_to_the_something_term": [29, 30, 31, 216], "exponenti": [29, 30, 31, 137, 153], "obsertavt": [29, 31], "obserav": [29, 30, 31], "action_prob": [29, 46, 75], "under": [29, 30, 31], "behavior": [29, 30, 31, 46, 71, 75, 111, 137, 139, 148, 151, 152, 153, 176, 180, 181, 182, 216], "pair": [29, 30, 31, 89, 92, 93, 146, 217], "numpi": [29, 30, 31, 71, 84, 89, 91, 92, 93, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 122, 123, 126, 129, 131, 134, 141, 142, 143, 146, 147, 148, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 178, 202, 204, 206], "ndarrai": [29, 30, 31, 43, 71, 84, 89, 91, 92, 93, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 122, 123, 126, 129, 131, 134, 141, 142, 143, 146, 147, 148, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 178, 202, 204, 206], "alpha": [30, 142], "5": [30, 43, 95, 180, 181, 182, 217], "mix": 30, "peopl": [30, 142], "umass": [30, 142], "pthoma": [30, 142], "paper": [30, 142], "thomas2015b": 30, "pdf": [30, 142], "equat": 30, "mu": 30, "last": [30, 178, 217], "paragraph": 30, "befor": [30, 51, 52, 120, 122, 123, 129, 217], "section": 30, "2": [30, 43, 58, 146, 147, 150, 153, 197, 217], "1": [30, 43, 58, 88, 100, 101, 102, 106, 108, 109, 110, 120, 126, 137, 141, 142, 143, 147, 148, 150, 159, 161, 162, 163, 165, 167, 169, 170, 173, 208, 209, 210, 213, 217], "stationar": 30, "hyperparamet": [30, 83, 84, 180, 181, 182, 217], "100": [30, 84, 137, 142], "far": [30, 217], "can": [30, 126, 150, 153, 183, 185, 217], "pi_b": [30, 77], "discrete_action_polici": [31, 216], "debug": [33, 56, 60, 62, 84, 137, 178], "gridworld": [33, 216], "intend": 33, "public": 33, "cr": [37, 111], "cf": [37, 111], "sampl": [37, 84, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 126, 131, 142, 157, 158, 164, 166, 171, 204, 217], "distribut": [37, 208, 209, 210], "whose": [37, 111, 153, 172], "crmin": 37, "crmax": 37, "cfmin": 37, "cfmax": 37, "sigmoid": [37, 216], "noop": 37, "observation_spac": 40, "action_spac": 40, "describ": [40, 58, 74], "conveni": [40, 153, 154, 183, 184, 185, 217], "continu": [40, 43], "made": 40, "get_min_act": [40, 216], "first": [40, 147, 216, 217], "get_min_st": [40, 216], "get_num_act": [40, 216], "get_num_observation_dim": [40, 216], "dimens": [40, 43, 208, 209, 210], "get_num_st": [40, 216], "also": [40, 117, 144, 145, 149, 153, 206, 217], "here": [40, 53, 122, 126, 217], "desired_typ": 41, "valid": [41, 43, 117, 153, 217], "ensur": [41, 186, 217], "equival": [41, 141, 142, 143, 146, 147, 148, 150, 159], "discrete_spac": [41, 216], "continous_spac": 41, "we": [41, 84, 106, 108, 126, 141, 142, 143, 146, 147, 148, 150, 153, 215, 217], "match": 41, "np": [43, 202], "shape": [43, 87, 88, 94, 114, 120, 122, 126, 131, 173, 217], "num_dim": 43, "min": [43, 44, 146, 217], "max": [43, 44, 217], "For": [43, 147, 217], "exampl": [43, 147, 217], "3d": 43, "x": [43, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 129, 131, 134, 143, 146, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 173, 202, 203, 208, 209, 210], "y": [43, 87, 88, 89, 92, 93, 94, 100, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 146, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 173, 208, 209, 210], "4": [43, 142, 151, 217], "z": [43, 142], "12": 43, "6": [43, 180, 182, 183, 184, 185, 217], "8": [43, 52, 217], "would": [43, 71, 137, 147, 150, 180, 181, 182, 217], "check_bounds_valid": [43, 216], "check": [43, 58, 153, 194], "format": [43, 74, 217], "maximum": [43, 44, 58, 142, 153], "larger": [43, 142], "minimum": [43, 44, 142, 153, 217], "get_num_dim": [43, 216], "get_num_valu": [44, 216], "env_kwarg": [46, 183, 217], "seldonianmodel": [46, 71, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 141, 142, 143, 146, 147, 148, 150, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 181, 182, 216], "parameter": [46, 148, 150, 217], "dict": [46, 51, 52, 137, 141, 142, 143, 146, 147, 148, 150, 151, 153, 157, 158, 180, 181, 182, 183, 200], "kwarg": [46, 71, 73, 74, 77, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 126, 131, 137, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 183, 213], "pertain": [46, 183], "gamma": [46, 58, 183, 206, 217], "discount": [46, 58, 112, 183, 206, 217], "factor": [46, 58, 141, 153, 183, 206, 217], "those": [46, 151, 153], "agent": [48, 49, 50, 51, 52, 53, 216], "run": [49, 50, 51, 52, 53, 64, 66, 71, 72, 84, 85, 120, 126, 131, 137, 175, 176, 177, 178, 179, 180, 181, 182, 200, 216], "singl": [49, 50, 52, 126, 147, 153, 217], "model_param": [50, 51, 52], "none": [50, 52, 71, 74, 76, 137, 149, 176, 178, 180, 181, 182, 183], "create_agent_func": 51, "create_env_func": 51, "num_episodes_this_proc": 51, "bunch": 51, "parallel": [51, 52, 53], "process": [51, 52, 84, 178, 217], "n_worker": [51, 52], "cpu": [51, 52], "fals": [52, 58, 71, 84, 100, 101, 102, 137, 147, 148, 150, 153, 157, 162, 163, 178, 180, 181, 182, 183, 184, 185, 197, 198, 200, 210, 217], "verbos": [52, 137, 180, 181, 182, 183, 184, 185, 197, 198], "consist": [52, 217], "arbitrari": [52, 58, 150], "num_episod": 53, "wrapper": [53, 71, 83, 126, 131, 138, 156, 176, 178, 195, 196, 197, 198], "run_trial": [53, 216], "explic": 53, "rather": 53, "via": [53, 148, 153, 217], "pickleabl": 53, "get_env_descript": [56, 58, 60, 62, 216], "overrid": [56, 58, 60, 62, 89, 141, 142, 143, 146, 147, 148, 150], "child": [56, 58, 60, 62, 149, 151, 153, 217], "get_observ": [56, 58, 60, 62, 216], "reset": [56, 58, 60, 62, 153, 216], "initi": [56, 58, 60, 62, 71, 84, 137, 180, 181, 182, 183], "start_visu": [56, 58, 60, 62, 216], "turn": [56, 58, 60, 62], "visual": [56, 58, 60, 62, 144, 145, 149, 153, 215, 216, 217], "debugg": [56, 58, 60, 62], "stop_visu": [56, 58, 60, 62, 216], "off": [56, 58, 60, 62, 148, 150], "print": [56, 58, 60, 62, 84, 137, 178], "out": [56, 58, 60, 62, 84, 126, 137, 178], "size": [58, 71, 84, 153, 156], "3": [58, 142, 147, 208, 210, 217], "squar": [58, 105, 115, 116, 142, 168, 217], "up": [58, 146, 153, 156, 217], "right": [58, 126, 131, 149, 153, 217], "down": 58, "left": [58, 126, 131, 149, 153, 217], "grid": 58, "cell": 58, "side": [58, 153], "distinct": 58, "terminal_st": 58, "occupi": 58, "time": [58, 156, 176, 178, 193], "timestep": [58, 75, 217], "max_tim": 58, "allow": [58, 150, 153, 193], "expect": [58, 111, 112, 141, 142, 143, 146, 147, 148, 150], "create_env_descript": [58, 216], "is_in_goal_st": [58, 216], "goal": [58, 217], "true": [58, 109, 110, 114, 141, 142, 143, 146, 147, 148, 150, 169, 170, 173, 180, 181, 182, 183, 184, 185, 200, 217], "go": [58, 217], "back": [58, 120, 122, 123, 129, 180, 181, 182], "between": [58, 100, 101, 102, 106, 108, 109, 110, 146, 159, 161, 162, 163, 165, 167, 169, 170, 173, 190, 217], "reach": 58, "next": 58, "update_posit": [58, 216], "posit": [58, 88, 91, 95, 100, 102, 108, 110, 126, 131, 142, 147, 153, 157, 163, 167, 170, 217], "inform": [58, 217], "save": [64, 66, 183, 184, 185, 197, 198, 200, 217], "disk": [64, 66, 71, 74], "candid": [69, 70, 71, 84, 135, 137, 141, 142, 143, 146, 147, 148, 150, 153, 176, 178, 180, 181, 182, 183, 184, 216], "candidate_dataset": [71, 84], "n_safeti": [71, 84], "parse_tre": [71, 176, 180, 181, 182, 186, 216, 217], "primary_object": [71, 137, 138, 176, 178, 180, 181, 182], "optimization_techniqu": [71, 180, 181, 182, 217], "barrier_funct": [71, 180, 181, 182, 217], "optim": [71, 84, 126, 131, 178, 180, 181, 182, 216, 217], "powel": [71, 217], "initial_solut": [71, 84], "regim": [71, 73, 74, 76, 79, 153, 154, 176, 217], "supervised_learn": [71, 73, 74, 79, 153, 154, 176, 217], "write_logfil": [71, 84, 178], "dataset": [71, 84, 141, 142, 143, 146, 147, 148, 150, 154, 160, 168, 176, 178, 180, 181, 182, 183, 184, 185, 210, 216], "length": [71, 88, 142, 151, 153, 178], "safeti": [71, 84, 137, 141, 142, 143, 146, 147, 148, 150, 174, 175, 176, 178, 180, 181, 182, 183, 184, 216], "predict": [71, 88, 89, 91, 92, 93, 94, 95, 114, 120, 122, 126, 131, 142, 143, 147, 159, 161, 173, 216, 217], "confid": [71, 141, 142, 143, 145, 146, 147, 148, 149, 150, 153, 183, 184, 185, 217], "dure": [71, 84, 126, 131, 141, 148, 151, 178, 180, 181, 182, 217], "parsetre": [71, 176, 180, 181, 186, 216, 217], "pars": [71, 139, 141, 144, 145, 146, 149, 151, 152, 153, 154, 176, 180, 181, 182, 186, 215, 217], "tree": [71, 139, 141, 144, 145, 146, 149, 151, 152, 153, 154, 176, 180, 181, 182, 186, 215, 216, 217], "constraint": [71, 137, 138, 139, 147, 151, 152, 153, 154, 164, 166, 171, 172, 176, 178, 180, 181, 182, 183, 184, 185, 186, 200, 216], "sole": [71, 137, 180, 181, 182], "absenc": [71, 137, 180, 181, 182], "loss": [71, 113, 117, 118, 137, 180, 181, 182, 217], "str": [71, 73, 74, 77, 79, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 157, 158, 176, 178, 180, 181, 182, 183, 184, 185, 194, 195, 196, 197, 198, 200], "g": [71, 73, 74, 77, 79, 137, 141, 142, 143, 146, 147, 148, 150, 153, 154, 157, 158, 176, 180, 181, 182, 217], "gradient_desc": [71, 180, 181, 182, 216, 217], "string": [71, 144, 145, 149, 150, 151, 153, 154, 178, 180, 181, 182, 183, 184, 185, 216], "name": [71, 73, 74, 77, 79, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 157, 158, 180, 181, 182, 184, 217], "categori": [71, 73, 74, 79, 153, 154, 176, 213], "machin": [71, 73, 74, 79, 86, 90, 97, 141, 142, 143, 146, 147, 148, 150, 153, 154, 176, 216, 217], "algorithm": [71, 72, 73, 74, 79, 83, 84, 85, 146, 153, 154, 176, 177, 178, 179, 180, 181, 182, 217], "reinforcement_learn": [71, 73, 74, 79, 153, 154, 176, 217], "write": [71, 84, 147, 178, 217], "output": [71, 122, 217], "calculate_batch": [71, 216], "batch_index": 71, "batch_siz": [71, 137, 156], "batch": [71, 156], "gradient": [71, 115, 116, 117, 122, 137, 138, 180, 181, 182, 183, 200, 217], "descent": [71, 137, 200, 217], "anyth": 71, "instead": 71, "batch_dataset": 71, "evaluate_primary_object": [71, 176, 178, 216], "primari": [71, 111, 112, 137, 138, 150, 172, 176, 178, 180, 181, 182, 183, 200, 217], "evalu": [71, 126, 131, 141, 142, 143, 146, 147, 148, 150, 153, 157, 158, 176, 178, 193], "get_constraint_upper_bound": [71, 216], "upper": [71, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 176, 178, 217], "get_importance_weight": [71, 176, 178, 216], "import": [71, 103, 107, 112, 137, 164, 166, 171, 176, 178, 215, 217], "objective_with_barri": [71, 216], "minimization_techniqu": 71, "barrier": [71, 217], "add": [71, 126, 153], "larg": 71, "penalti": 71, "violat": [71, 153, 217], "nsf": [71, 84, 178, 217], "build": [72, 139, 152, 153, 179], "load": [72, 74, 82, 195, 196, 217], "num_datapoint": [73, 79], "meta": [73, 77, 79], "datafram": [73, 77, 79, 141, 142, 143, 146, 147, 148, 150, 153, 164, 166, 171], "metadata": [73, 74, 77, 78, 79, 80, 82, 137, 184, 185, 216, 217], "row": [73, 79, 114, 143, 146, 173, 200, 217], "rl": [73, 75, 77, 79, 153, 180, 206, 216, 217], "meta_inform": [73, 77, 79], "column": [73, 79, 114, 141, 142, 143, 146, 147, 148, 150, 153, 154, 173, 184, 217], "load_rl_dataset_from_csv": [74, 216, 217], "filenam": [74, 82, 193, 195, 196, 197, 198, 213, 217], "metadata_filenam": [74, 81, 217], "rldataset": [74, 216, 217], "file": [74, 82, 84, 178, 183, 184, 185, 195, 196, 197, 198, 217], "csv": [74, 217], "episode_index": 74, "probability_of_act": 74, "load_rl_dataset_from_episode_fil": [74, 216, 217], "pickl": [74, 178, 196, 198, 217], "load_supervised_dataset": [74, 216, 217], "file_typ": 74, "superviseddataset": [74, 216, 217], "label": [74, 79, 87, 88, 89, 91, 92, 93, 94, 95, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 122, 126, 131, 141, 142, 143, 146, 147, 148, 150, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 173, 178, 200, 217], "sensit": [74, 178, 184, 217], "default": [74, 137, 138, 148, 149, 153, 154, 180, 181, 182, 183, 185, 217], "extens": 74, "alt_reward": 75, "sub_regim": [76, 80, 153, 154, 182, 184, 217], "all_col_nam": [76, 78, 80], "sensitive_col_nam": [76, 78, 80, 184], "sensitive_attr": [77, 79], "o": 77, "r": [77, 116, 117], "supervis": [78, 80, 98, 122, 153, 182, 217], "feature_col_nam": 80, "label_col_nam": 80, "required_col_nam": 81, "json": [82, 195, 197, 217], "spec": [84, 178, 216], "all_frac_data_in_candidate_select": 84, "find": [84, 137, 217], "best": [84, 217], "safe": 84, "solut": [84, 137, 153, 176, 178, 200, 217], "note": [84, 217], "onli": [84, 90, 117, 131, 142, 200, 217], "split": [84, 153, 178, 217], "percentag": 84, "complet": [84, 178, 216, 217], "fraction": [84, 178, 180, 181, 182, 183, 184], "being": [84, 141, 143, 147, 148, 150], "consid": [84, 142], "bootstrap_sample_dataset": [84, 216], "n_bootstrap": 84, "bootstrap": 84, "point": [84, 88, 94, 113, 118, 137, 146, 195, 196, 208, 209, 210, 217], "desir": 84, "candidate_select": [84, 178, 216], "should": [84, 153, 217], "create_dataset": [84, 216], "frac_data_in_safeti": [84, 178, 180, 181, 182, 183, 184, 185], "shuffl": 84, "partit": [84, 217], "test": [84, 137, 141, 142, 143, 146, 147, 148, 150, 174, 175, 176, 178, 180, 181, 182, 183, 184, 200, 216], "remain": [84, 178, 180, 181, 182, 183, 184], "est_prob_pass": [84, 216], "rho_prim": 84, "safety_dataset": [84, 176], "n_candid": [84, 142], "write_cs_logfil": [84, 178, 217], "bootstrap_it": 84, "estim": [84, 103, 107, 111, 112, 141, 142, 143, 147, 148, 150, 164, 166, 171, 217], "probabiilti": 84, "find_best_hyperparam": [84, 216], "indic": [84, 143, 178, 189, 217], "includ": [84, 87, 88, 94, 114, 148, 153, 173, 217], "rtyle": 84, "tupl": [84, 153, 178, 217], "get_initial_solut": [84, 216], "soluion": 84, "get_safety_s": [84, 216], "n_total": 84, "amount": 84, "run_cor": [84, 216], "core": [84, 216], "log": [84, 117, 153, 178, 193, 217], "passed_safeti": [84, 178, 217], "found": [84, 137, 176, 178, 217], "pass": [84, 120, 122, 123, 126, 129, 131, 134, 141, 142, 143, 146, 147, 148, 150, 153, 176, 178, 183, 217], "run_safety_test": [84, 178, 216], "candidate_solut": [84, 178], "other": [84, 147, 178, 217], "mean": [84, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 116, 118, 146, 157, 162, 163, 165, 167, 168, 169, 170, 171, 178, 208, 209, 210, 217], "safety_test": [84, 178, 216, 217], "main": [86, 152, 216], "classificationmodel": [87, 91, 95, 126, 131, 216, 217], "binari": [87, 88, 90, 101, 102, 106, 108, 109, 110, 113, 117, 162, 163, 165, 167, 169, 170], "multi": [87, 94, 101, 102, 106, 108, 109, 110, 118, 162, 163, 165, 167, 169, 170], "logist": [87, 88, 94, 113, 117, 118], "regress": [87, 88, 89, 92, 93, 94, 96, 117, 146, 153, 154, 182, 184, 217], "fit": [87, 88, 89, 92, 93, 94, 126, 131, 216, 217], "train": [87, 88, 89, 92, 93, 94, 217], "let": [87, 88, 94, 114, 173, 217], "datapoint": [87, 88, 94, 114, 120, 126, 131, 156, 173, 176], "j": [87, 88, 94, 112, 114, 120, 126, 131, 143, 173], "bia": [87, 88, 94, 114, 173], "term": [87, 88, 94, 114, 120, 126, 131, 137, 173], "provi": [87, 88, 94, 114, 173, 217], "k": [87, 88, 94, 114, 143, 173], "baselogisticregressionmodel": [88, 94, 216], "have": [88, 91, 94, 95, 153, 217], "linearregressionmodel": [89, 216, 217], "sever": [89, 142, 146, 217], "parent": [89, 90, 96, 97, 98, 142, 146], "assum": 89, "intercept": [89, 120, 126, 131], "nxm": [89, 92, 93], "nx1": [89, 92, 93], "squash": 89, "supervisedmodel": [90, 96, 122, 216], "classif": [90, 113, 118, 147, 153, 162, 163, 165, 167, 169, 170, 182, 184, 217], "support": [90, 151, 217], "classifi": [91, 95, 126, 131], "alwai": [91, 95, 137, 141, 142, 143, 146, 147, 148, 150, 153, 217], "regardless": [91, 95, 217], "regressionmodel": [92, 93, 216, 217], "ha": [95, 101, 102, 106, 108, 109, 110, 126, 131, 147, 151, 153, 217], "prob": [95, 126, 127, 131, 132], "error": [100, 104, 105, 115, 116, 142, 146, 159, 160, 161, 168, 216, 217], "rate": [100, 101, 102, 106, 108, 109, 110, 137, 147, 153, 157, 159, 161, 162, 163, 165, 167, 169, 170, 217], "whole": [100, 101, 102, 104, 105, 106, 108, 109, 110, 153, 157], "instanc": [100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 129, 134, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173], "probabilist": [101, 102, 159], "neg": [101, 106, 109, 153, 162, 165, 169], "over": [101, 102, 103, 104, 105, 107, 112, 113, 118, 120, 126, 131, 153, 157, 176, 217], "slightli": [101, 102, 106, 108, 109, 110], "differ": [101, 102, 106, 108, 109, 110, 146, 217], "v": [101, 102, 109, 110, 204], "averag": [102, 113, 200], "vanilla": [103, 126, 131, 217], "y_hat": [104, 160], "re": [106, 108, 126, 131], "decis": [107, 126, 131, 166], "pdi": [107, 166], "fall": [111, 172, 180, 181, 182], "within": [111, 172], "vector": [111, 116, 122, 123, 126, 129, 131, 134, 137, 141, 142, 143, 146, 147, 148, 150, 153, 160, 164, 166, 168, 171, 204], "sum": [112, 153, 206], "n": [112, 126, 156, 200, 217], "rho_i": 112, "rhosum": 112, "g_i": [112, 200, 217], "rho_j": 112, "l_i": [114, 173], "l_k": [114, 173], "wa": [114, 146, 147, 153, 173, 178, 217], "element": [114, 173], "confus": [114, 143, 173], "correspond": [114, 154, 173, 205, 217], "analyt": 115, "bse": 115, "d": [115, 116, 117, 120, 123, 126, 129, 131, 134], "dtheta": [115, 116, 117, 123, 129, 134], "w": [116, 117], "mse": 116, "same": [117, 120, 122, 126, 131, 146, 178], "supervisedsklearnbasemodel": [120, 123, 216], "regressor": 120, "scikit": [120, 122, 217], "backward_pass": [120, 122, 216], "jacobian": [120, 123, 126, 129, 131, 134], "forward_pass": [120, 122, 126, 131, 216], "_i": [120, 126, 131, 217], "dtheta_": [120, 126], "henc": 120, "create_model": [120, 122, 216], "make": [120, 153, 200, 217], "get_model_param": [120, 122, 216], "arg": [120, 122, 213], "flatten": [120, 122, 126], "1d": [120, 122, 126, 131, 153], "do": [120, 122, 123, 129, 131, 134, 216], "forward": [120, 122, 123, 126, 129, 131, 134], "through": [120, 122, 123, 129, 131, 134, 146, 153, 176], "sklearn": [120, 122, 123, 126, 129, 131, 134], "pred_numpi": [120, 122], "rtype": [120, 122, 131], "update_model_param": [120, 122, 216], "reshap": [120, 122], "external_grad": 122, "backward": [122, 123, 129, 134], "respect": 122, "obtain": [123, 129, 134, 138], "pred": [123, 129, 131, 134], "result": [123, 126, 129, 131, 134, 217], "inherit": [123, 143, 147, 150, 217], "fn": [123, 129, 134], "repres": [123, 129, 134, 141, 144, 145, 153, 217], "oper": [123, 129, 134, 141, 145, 216, 217], "rf_kwarg": 126, "forest": 126, "leaf": [126, 131, 141, 144, 145, 176], "node": [126, 131, 153, 154, 176, 180, 181, 182, 216, 217], "built": [126, 131, 153, 180, 181, 182, 183, 217], "randomforestclassifi": 126, "n_tree": 126, "has_intercept": [126, 131], "params_upd": [126, 131], "intern": [126, 131, 145, 217], "flag": [126, 131, 137, 148, 183, 184, 185, 198, 210, 217], "around": [126, 131], "assign": [126, 153], "id": [126, 131], "sublist": 126, "flattend": 126, "probabilit": 126, "postiv": 126, "get_jacobian": [126, 131, 216], "sum_k": 126, "forward_k": 126, "comput": [126, 131, 137, 138, 146, 147, 148, 150, 153, 180, 181, 182], "separ": [126, 217], "horizont": 126, "stack": 126, "them": 126, "front": 126, "isn": [126, 131], "get_leaf_node_prob": [126, 131, 216], "autograd": [126, 131, 137, 138, 180, 181, 182, 183, 202], "primit": [126, 131], "workaround": [126, 131], "sinc": [126, 131], "our": [126, 131, 217], "involv": [126, 131], "extern": [126, 131], "librari": [126, 131, 137, 138, 216, 217], "set_leaf_node_valu": [126, 131, 216], "categor": [126, 217], "seldonianrandomforest": [129, 216], "dt_kwarg": 131, "decisiontreeclassifi": 131, "probs_pos_class": 131, "leaf_nodes_hit": 131, "were": [131, 153], "hit": 131, "These": [131, 145, 150, 217], "dtheta_j": 131, "actual": [131, 142, 156, 217], "seldoniandecisiontre": [134, 216], "n_constraint": 137, "upper_bounds_funct": [137, 138], "theta_init": 137, "lambda_init": [137, 180, 181, 182], "batch_calcul": 137, "n_batch": 137, "n_epoch": 137, "alpha_theta": [137, 180, 181, 182], "05": [137, 141, 142, 143, 146, 147, 148, 150, 217], "alpha_lamb": [137, 180, 181, 182], "beta_veloc": [137, 180, 181, 182], "9": [137, 180, 181, 182, 206, 217], "beta_rmsprop": [137, 180, 181, 182], "gradient_librari": [137, 138, 180, 181, 182], "clip_theta": 137, "simultan": 137, "ascent": 137, "adam": [137, 180, 181, 182, 217], "lagrangian": [137, 200, 217], "l": [137, 178, 200, 217], "lambda": [137, 217], "f": [137, 146, 178, 193, 200, 217], "lagrang": [137, 200], "multipli": [137, 153, 200], "done": 137, "saddl": 137, "Being": 137, "part": [137, 217], "No": [137, 217], "decai": 137, "veloc": 137, "rmsprop": 137, "num_it": [137, 180, 181, 182], "iter": [137, 146, 193, 217], "automat": [137, 138], "boolean": [137, 148, 150, 151, 183, 184, 185, 198, 210, 217], "control": [137, 183, 184, 185, 210, 217], "lower": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153], "inf": [141, 142, 143, 145, 146, 147, 148, 150], "conditional_column": [141, 142, 143, 146, 147, 148, 150], "measur": [141, 143, 147, 148, 150, 153, 176, 217], "condit": [141, 142, 143, 146, 147, 148, 150, 153, 154], "node_typ": [141, 144], "equal": [141, 153, 154, 176, 217], "base_nod": 141, "delta_low": [141, 142, 143, 146, 147, 148, 150], "share": [141, 142, 146], "put": [141, 142, 146], "delta_upp": [141, 142, 143, 146, 147, 148, 150], "infl_factor_low": 141, "inflat": [141, 153], "infl_factor_upp": 141, "measure_function_nam": [141, 148], "statist": [141, 147, 157, 158, 217], "fpr": [141, 157, 158, 217], "measure_funct": [141, 217], "calculate_bound": [141, 142, 143, 146, 147, 148, 150, 216], "bound_method": [141, 142, 143, 146, 147, 148, 150], "calculate_data_forbound": [141, 142, 143, 146, 147, 148, 150, 216], "prepar": [141, 142, 143, 147, 148, 150], "calculate_valu": [141, 142, 143, 146, 147, 148, 150, 216], "etc": [141, 143, 145, 146, 147, 148, 150], "compute_hc_lowerbound": [141, 142, 143, 146, 147, 148, 150, 216], "datas": [141, 142, 143, 146, 147, 148, 150], "delta": [141, 142, 143, 146, 147, 148, 150, 153, 154, 183, 184, 185, 217], "high": [141, 142, 143, 146, 147, 148, 150], "level": [141, 142, 143, 146, 147, 148, 150, 153, 217], "compute_hc_upper_and_lowerbound": [141, 142, 143, 146, 147, 148, 150, 216], "compute_hc_upperbound": [141, 142, 143, 146, 147, 148, 150, 216], "independ": [141, 142, 143, 146, 147, 148, 150, 217], "mask_data": [141, 142, 143, 146, 147, 148, 150, 216], "mask": [141, 142, 143, 146, 147, 148, 150], "joint": [141, 142, 143, 146, 147, 148, 150], "AND": [141, 142, 143, 146, 147, 148, 150], "predict_hc_lowerbound": [141, 142, 143, 146, 147, 148, 150, 216], "predict_hc_upper_and_lowerbound": [141, 142, 143, 146, 147, 148, 150, 216], "predict_hc_upperbound": [141, 142, 143, 146, 147, 148, 150, 216], "zhat": [141, 142, 143, 146, 147, 148, 150, 216], "data_dict": [141, 142, 143, 146, 147, 148, 150, 157, 158], "unbias": [141, 142, 143, 147, 148, 150], "basenod": [142, 143, 146, 147, 148, 150, 216], "custom": [142, 146, 202, 217], "cvar_alpha": 142, "definit": [142, 217], "least": [142, 217], "var_alpha": 142, "largest": 142, "thoma": [142, 146], "miller": 142, "2019": [142, 146], "thomas2019": 142, "theorem": 142, "threshold": [142, 183, 184, 185], "cvar": 142, "sort": 142, "b": [142, 151, 153], "cm_true_index": 143, "cm_pred_index": 143, "c_00": 143, "c_01": 143, "c_0k": 143, "______": 143, "_____": 143, "c_10": 143, "c_11": 143, "c_1k": 143, "c_k0": 143, "c_k1": 143, "c_kk": 143, "constant": [144, 153, 206, 217], "constant_nod": 144, "represent": [144, 145, 149, 151], "what": [144, 145, 149, 216], "displai": [144, 145, 149, 153, 200], "insid": [144, 145, 149], "graph": [144, 145, 149, 153, 215], "non": 145, "perform": [145, 148, 217], "wise": 146, "male": [146, 217], "femal": [146, 217], "present": [146, 153, 164, 166, 171], "et": 146, "al": 146, "www": [146, 205], "scienc": 146, "org": 146, "stoken": 146, "author": 146, "token": 146, "st": 146, "119": 146, "full": [146, 200, 217], "figur": [146, 200, 217], "precalculate_data": [146, 216], "preconfigur": 146, "recalcul": 146, "panda": 146, "y_i": 146, "y_hat_i": 146, "m": [146, 153, 217], "y_j": 146, "y_hat_j": 146, "There": [146, 150, 153, 217], "mai": [146, 194, 217], "n_male": 146, "n_femal": 146, "class_index": 147, "against": 147, "one": [147, 148, 150, 151, 153, 180, 181, 182, 183, 217], "fpr_": 147, "propos": 148, "on_polici": [148, 150], "referenc": 148, "j_pi_new_is_": [148, 150], "If": [148, 150, 151, 153, 180, 181, 182, 183, 215, 216, 217], "will_lower_bound": 149, "will_upper_bound": 149, "alt_reward_numb": 150, "newpolicyperformancebasenod": [150, 216], "altern": 150, "besid": 150, "second": [150, 217], "global": 151, "construct": [151, 217], "op_mapp": [151, 216], "map": 151, "ast": [151, 153], "appear": [151, 153, 217], "not_supported_op_mapp": [151, 216], "bounds_required_dict": [151, 216], "requir": [151, 153, 181, 215, 217], "two": [151, 153, 217], "children": [151, 153], "like": [151, 153, 217], "need_a_low": 151, "need_a_upp": 151, "need_b_low": 151, "need_b_upp": 151, "sub": [153, 154, 217], "ml": [153, 217], "user": [153, 217], "appropri": 153, "root": [153, 176], "create_from_ast": [153, 216], "constraint_str": [153, 154, 183, 184, 185], "express": [153, 217], "n_node": 153, "n_base_nod": 153, "pr": [153, 217], "more": [153, 217], "onc": [153, 217], "contribut": 153, "base_node_dict": 153, "track": 153, "uniqu": 153, "been": [153, 217], "alreadi": [153, 217], "help": [153, 205], "handl": 153, "case": [153, 189, 217], "duplic": [153, 186], "n_unique_bounds_tot": 153, "assign_bounds_need": [153, 216], "node_fonts": 153, "fontsiz": 153, "graphviz": [153, 215], "available_measure_funct": 153, "mean_error": [153, 216], "_ab": [153, 216], "absolut": [153, 217], "interv": 153, "_add": [153, 216], "_assign_bounds_help": [153, 216], "lower_need": 153, "upper_need": 153, "travers": 153, "_assign_deltas_help": [153, 216], "weight_method": 153, "_assign_infl_factors_help": [153, 216], "integ": [153, 217], "appli": 153, "manual": [153, 217], "_ast2pt_nod": [153, 216], "ast_nod": 153, "_ast_tree_help": [153, 216], "recurs": 153, "_div": [153, 216], "divid": 153, "_evaluator_help": [153, 216], "_exp": [153, 216], "_log": [153, 216], "_max": [153, 216], "_min": [153, 216], "_mult": [153, 216], "_pow": [153, 216], "pow": 153, "_preprocess_constraint_str": [153, 216], "inequ": [153, 217], "move": 153, "everyth": 153, "final": 153, "form": [153, 217], "sure": 153, "mathemat": [153, 217], "written": [153, 217], "python": [153, 205, 215, 217], "syntax": 153, "_propagate_valu": [153, 216], "propag": [153, 176, 216], "_propagator_help": [153, 216], "_protect_nan": [153, 216], "bound_typ": 153, "nan": 153, "infin": 153, "postit": 153, "_sub": [153, 216], "subract": 153, "_validate_delta_vector": [153, 216], "delta_vector": 153, "suppli": 153, "correct": [153, 159, 161, 204], "_validate_infl_factor": [153, 216], "dtype": 153, "df": 153, "decid": 153, "eventu": 153, "necessari": [153, 217], "end": [153, 217], "care": 153, "assign_delta": [153, 216], "among": 153, "assign_infl_factor": [153, 216], "across": [153, 154], "build_tre": [153, 216], "delta_weight_method": [153, 154], "infl_factor_method": 153, "infl_factor": 153, "assing": 153, "structur": 153, "evaluate_constraint": [153, 216], "itself": 153, "postord": 153, "logic": 153, "make_viz": [153, 216], "titl": 153, "diagram": 153, "top": [153, 217], "make_viz_help": [153, 216], "edg": 153, "digraph": 153, "propagate_bound": [153, 216], "reset_base_node_dict": [153, 216], "reset_data": 153, "store": 153, "remov": 153, "howev": [153, 217], "entir": 153, "less": [153, 176, 217], "frequent": 153, "defult": 154, "classifict": 154, "func": 156, "num_batch": 156, "statistic_nam": [157, 158], "accuraci": 159, "weighted_return": [164, 166, 171, 172], "unweight": 164, "pre": [164, 166, 171], "wi": 171, "auxiliari": 172, "unlik": 172, "bounding_box_estim": 172, "batch_size_safeti": [176, 178, 180, 181, 182], "loop": 176, "introspect": 178, "candidate_safety_split": [178, 216], "f_c": 178, "f_": 178, "l_c": 178, "l_": 178, "s_c": 178, "s_": 178, "detail": [178, 217], "branch": 178, "either": [178, 217], "get_cs_result": [178, 216], "chosen": [178, 217], "get_st_upper_bound": [178, 216], "upper_bounds_dict": 178, "kei": [178, 217], "initial_solution_fn": [180, 181, 182, 183], "base_node_bound_method_dict": [180, 181, 182], "use_builtin_primary_gradient_fn": [180, 181, 182, 183], "custom_primary_gradient_fn": [180, 181, 182], "optimization_hyperparam": [180, 181, 182, 217], "005": [180, 181, 182], "95": [180, 181, 182], "hyper_search": [180, 181, 182], "200": [180, 181, 182], "use_batch": [180, 182], "regularization_hyperparam": [180, 181, 182], "rl_model": [180, 183, 216, 217], "exist": [180, 181, 182, 183], "builtin": [180, 181, 182], "regular": [180, 181, 182], "save_dir": [183, 184, 185], "rlspec": [183, 216, 217], "mani": [183, 185], "later": [183, 185], "chang": [183, 185, 200], "directori": [183, 184, 185, 194, 217], "pkl": [183, 184, 185, 217], "glag": [183, 184, 185], "supervisedspec": [184, 185, 216, 217], "without": 184, "metadata_pth": 185, "path": [185, 194, 200], "array_in": 189, "argmax": 189, "multipl": [189, 217], "tie": 189, "val_in": 190, "min_val": 190, "max_val": 190, "limit": 190, "output_str": 191, "callback": 193, "cma": [193, 217], "evolu": 193, "strategi": [193, 217], "u": 193, "xmean": 193, "indent": 197, "abl": 198, "primary_objective_nam": [200, 217], "plot_running_avg": 200, "savenam": 200, "png": 200, "show": [200, 217], "evolut": [200, 217], "One": [200, 217], "subplot": [200, 217], "repeat": [200, 217], "plot": [200, 217], "ii": 200, "lambda_i": [200, 217], "iii": 200, "iv": 200, "lagranian": 200, "sum_i": 200, "plt": 200, "relev": 200, "cumprod": 202, "work": [202, 217], "sourc": [202, 216], "github": [202, 216], "com": [202, 205], "hip": 202, "issu": 202, "257": 202, "cumul": 202, "product": 202, "standard": [204, 208, 209, 210], "deviat": [204, 208, 209, 210], "bessel": 204, "nu": 205, "invers": [205, 217], "student": 205, "cdf": 205, "degre": 205, "freedom": 205, "matlab": 205, "mathwork": 205, "stat": 205, "html": 205, "arr": 206, "num_point": [208, 209, 210], "loc_x": [208, 209, 210], "loc_i": [208, 209, 210], "sigma_x": [208, 209, 210], "sigma_i": [208, 209, 210], "clip_min": [208, 210], "clip_max": [208, 210], "2d": [208, 209, 210], "clip": [208, 210], "option": [210, 217], "msg": 213, "lineno": 213, "seldonian": [215, 217], "pip": 215, "Then": 215, "system": 215, "wide": 215, "recommend": 215, "welcom": 216, "toolkit": [216, 217], "code": [216, 217], "host": 216, "overview": 216, "interfac": 216, "sa": 216, "start": [216, 217], "instal": 216, "tutori": [216, 217], "api": [216, 217], "fourier": 216, "discrete_random_ag": 216, "function_approxim": 216, "linear_fa": 216, "linear_state_action_value_fa": 216, "construct_q_table_from_env_descript": 216, "parameterized_non_learning_softmax_ag": 216, "simglucosepolicyfixedarea": 216, "sigmoidpolicyfixedarea": 216, "discretesoftmax": [216, 217], "mixedsoftmax": 216, "keyboard_gridworld": 216, "mountain_car_rough_solut": 216, "simglucose_custom_fixedarea_random_ag": 216, "simglucosefixedareaag": 216, "check_space_typ": 216, "continuous_spac": 216, "rl_runner": 216, "create_agent_fromdict": 216, "run_episod": 216, "run_episode_from_dict": 216, "run_episodes_par": 216, "run_trial_given_agent_and_env": 216, "mountaincar": 216, "n_step_mountaincar": 216, "generate_gridworld_episod": 216, "generate_mountaincar_episod": 216, "hyperparams_and_set": 216, "define_hyperparameter_and_setting_dict": 216, "candidateselect": [216, 217], "load_rl_metadata": 216, "load_supervised_metadata": 216, "datasetload": [216, 217], "rlmetadata": 216, "supervisedmetadata": 216, "hyperparam_search": 216, "hyperparamsearch": 216, "binarylogisticregressionmodel": 216, "boundedlinearregressionmodel": 216, "dummyclassifiermodel": 216, "linearregressionmodellistfeatur": 216, "multiclasslogisticregressionmodel": 216, "randomclassifiermodel": 216, "error_r": 216, "false_negative_r": 216, "false_positive_r": 216, "is_estim": 216, "mean_squared_error": [216, 217], "negative_r": 216, "pdis_estim": 216, "positive_r": 216, "true_negative_r": 216, "true_positive_r": 216, "us_estim": 216, "wis_estim": 216, "binary_logistic_loss": 216, "confusion_matrix": 216, "gradient_bounded_squared_error": 216, "gradient_mean_squared_error": 216, "gradient_binary_logistic_loss": 216, "multiclass_logistic_loss": 216, "sklearn_lr": 216, "sklearnlinearregressor": 216, "sklearn_model": 216, "sklearn_predict_vjp": 216, "skrandomforest_model": 216, "probs2theta": 216, "sktree_model": 216, "gradient_descent_adam": 216, "setup_gradi": 216, "cvarsqebasenod": 216, "confusionmatrixbasenod": 216, "constantnod": 216, "internalnod": 216, "medcustombasenod": 216, "multiclassbasenod": 216, "rlaltrewardbasenod": 216, "make_parse_trees_from_constraint": 216, "zhat_func": 216, "batcher": 216, "evaluate_statist": 216, "sample_from_statist": 216, "vector_accuraci": 216, "vector_error": 216, "vector_error_r": 216, "vector_false_negative_r": 216, "vector_false_positive_r": 216, "vector_is_estim": 216, "vector_negative_r": 216, "vector_pdis_estim": 216, "vector_positive_r": 216, "vector_squared_error": 216, "vector_true_negative_r": 216, "vector_true_positive_r": 216, "vector_wis_estim": 216, "vector_auxiliary_return_us_estim": 216, "vector_confusion_matrix": 216, "safetytest": [216, 217], "seldonian_algorithm": [216, 217], "seldonianalgorithm": [216, 217], "createrlspec": [216, 217], "createsimplesupervisedspec": 216, "createsupervisedspec": [216, 217], "validate_parse_tre": 216, "util": [216, 217], "rl_util": 216, "argmax_multi": 216, "clamp": 216, "io_util": [216, 217], "cmaes_logg": 216, "dir_path": 216, "load_json": 216, "load_pickl": [216, 217], "save_json": 216, "save_pickl": 216, "plot_util": [216, 217], "plot_gradient_desc": [216, 217], "stats_util": 216, "custom_cumprod": 216, "stddev": 216, "tinv": 216, "weighted_sum_gamma": 216, "tutorial_util": 216, "generate_clipped_data": 216, "generate_data": 216, "make_synthetic_regression_dataset": 216, "warn": 216, "custom_warn": 216, "custom_formatwarn": 216, "document": 217, "homepag": 217, "In": 217, "page": 217, "few": 217, "hand": 217, "illustr": 217, "simul": 217, "realist": 217, "most": 217, "piec": 217, "cover": 217, "reinforc": 217, "could": 217, "unifi": 217, "pattern": 217, "concept": 217, "conceptu": 217, "enforc": 217, "develop": 217, "design": 217, "applic": 217, "command": 217, "line": 217, "graphic": 217, "short": 217, "underli": 217, "discuss": 217, "below": 217, "well": 217, "loader": 217, "comma": 217, "header": 217, "numer": 217, "might": 217, "look": 217, "622": 217, "491": 217, "56": 217, "439": 217, "93": 217, "707": 217, "64": 217, "663": 217, "65": 217, "557": 217, "09": 217, "711": 217, "37": 217, "731": 217, "31": 217, "509": 217, "33333": 217, "538": 217, "490": 217, "58": 217, "406": 217, "59": 217, "529": 217, "532": 217, "28": 217, "447": 217, "23": 217, "527": 217, "379": 217, "14": 217, "488": 217, "98333": 217, "455": 217, "18": 217, "440": 217, "570": 217, "86": 217, "417": 217, "54": 217, "453": 217, "53": 217, "425": 217, "87": 217, "475": 217, "63": 217, "476": 217, "11": 217, "407": 217, "15": 217, "97333": 217, "756": 217, "91": 217, "679": 217, "62": 217, "531": 217, "583": 217, "534": 217, "42": 217, "521": 217, "592": 217, "41": 217, "783": 217, "76": 217, "588": 217, "26": 217, "53333": 217, "hot": 217, "10": 217, "25": 217, "intention": 217, "exclud": 217, "your": 217, "problem": 217, "label_column": 217, "try": 217, "sensitive_column": 217, "biggest": 217, "logisticregressionmodel": 217, "essenti": 217, "wrap": 217, "linearregress": 217, "unless": 217, "own": 217, "know": 217, "though": 217, "explicitli": 217, "thing": 217, "extend": 217, "py": 217, "_": 217, "directli": 217, "five": 217, "follow": 217, "math": 217, "four": 217, "nativ": 217, "ab": 217, "exp": 217, "239": 217, "trigger": 217, "special": 217, "open": 217, "quantiti": 217, "It": 217, "someth": 217, "wai": 217, "wrote": 217, "instruct": 217, "recal": 217, "leq": 217, "satisfi": 217, "cumbersom": 217, "symbol": 217, "interpret": 217, "ident": 217, "themselv": 217, "tri": 217, "basic": 217, "plain": 217, "english": 217, "88": 217, "tpr": 217, "greater": 217, "j_pi_new": 217, "commonli": 217, "fair": 217, "filter": 217, "atr1": 217, "atr2": 217, "placehold": 217, "parenthes": 217, "surround": 217, "statement": 217, "sai": 217, "r1": 217, "r2": 217, "stand": 217, "race": 217, "subject": 217, "demograph": 217, "pariti": 217, "toler": 217, "ratio": 217, "dispar": 217, "impact": 217, "anoth": 217, "permit": 217, "belong": 217, "bundl": 217, "shown": 217, "block": 217, "At": 217, "broad": 217, "scope": 217, "throught": 217, "now": 217, "happen": 217, "even": 217, "small": 217, "techniqu": 217, "black": 217, "cost": 217, "forc": 217, "toward": 217, "feasibl": 217, "cg": 217, "nelder": 217, "mead": 217, "bfg": 217, "scipi": 217, "minim": 217, "solver": 217, "covari": 217, "adapt": 217, "kkt": 217, "situat": 217, "contraint": 217, "conflict": 217, "oscil": 217, "boundari": 217, "dampen": 217, "momentum": 217, "mitig": 217, "accept": 217, "hat": 217, "mathcal": 217, "ran": 217, "convent": 217, "candidate_selection_log": 217, "increas": 217, "overwritten": 217, "log_fil": 217, "candidate_selection_log0": 217, "cs_dict": 217, "produc": 217, "1500": 217, "red": 217, "area": 217, "middl": 217, "region": 217, "dot": 217, "its": 217, "deem": 217, "assembl": 217, "interact": 217}, "objects": {"": [[0, 0, 0, "-", "seldonian"]], "seldonian": [[1, 0, 0, "-", "RL"], [69, 0, 0, "-", "candidate_selection"], [72, 0, 0, "-", "dataset"], [83, 0, 0, "-", "hyperparam_search"], [85, 0, 0, "-", "models"], [135, 0, 0, "-", "optimizers"], [139, 0, 0, "-", "parse_tree"], [174, 0, 0, "-", "safety_test"], [177, 0, 0, "-", "seldonian_algorithm"], [179, 0, 0, "-", "spec"], [187, 0, 0, "-", "utils"], [211, 0, 0, "-", "warnings"]], "seldonian.RL": [[2, 0, 0, "-", "Agents"], [38, 0, 0, "-", "Env_Description"], [45, 0, 0, "-", "RL_model"], [47, 0, 0, "-", "RL_runner"], [54, 0, 0, "-", "environments"], [63, 0, 0, "-", "generate_gridworld_episodes"], [65, 0, 0, "-", "generate_mountaincar_episodes"], [67, 0, 0, "-", "hyperparams_and_settings"]], "seldonian.RL.Agents": [[3, 0, 0, "-", "Agent"], [5, 0, 0, "-", "Bases"], [8, 0, 0, "-", "Discrete_Random_Agent"], [10, 0, 0, "-", "Function_Approximators"], [20, 0, 0, "-", "Parameterized_non_learning_softmax_agent"], [22, 0, 0, "-", "Policies"], [32, 0, 0, "-", "keyboard_gridworld"], [34, 0, 0, "-", "mountain_car_rough_solution"], [36, 0, 0, "-", "simglucose_custom_fixedarea_random_agent"]], "seldonian.RL.Agents.Agent": [[4, 1, 1, "", "Agent"]], "seldonian.RL.Agents.Agent.Agent": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "__repr__"], [4, 2, 1, "", "choose_action"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "get_prob_this_action"], [4, 2, 1, "", "set_new_params"], [4, 2, 1, "", "update"]], "seldonian.RL.Agents.Bases": [[6, 0, 0, "-", "Fourier"]], "seldonian.RL.Agents.Bases.Fourier": [[7, 1, 1, "", "Fourier"]], "seldonian.RL.Agents.Bases.Fourier.Fourier": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "__repr__"], [7, 2, 1, "", "calculate_num_features"], [7, 2, 1, "", "construct_basis_matrix"], [7, 2, 1, "", "get_features"], [7, 2, 1, "", "get_normalized_observation"]], "seldonian.RL.Agents.Discrete_Random_Agent": [[9, 1, 1, "", "Discrete_Random_Agent"]], "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "__repr__"], [9, 2, 1, "", "choose_action"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "get_prob_this_action"], [9, 2, 1, "", "set_new_params"], [9, 2, 1, "", "update"]], "seldonian.RL.Agents.Function_Approximators": [[11, 0, 0, "-", "Function_Approximator"], [13, 0, 0, "-", "Linear_FA"], [16, 0, 0, "-", "Table"]], "seldonian.RL.Agents.Function_Approximators.Function_Approximator": [[12, 1, 1, "", "Function_Approximator"]], "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "__repr__"], [12, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA": [[14, 1, 1, "", "Linear_FA"], [15, 1, 1, "", "Linear_state_action_value_FA"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "__repr__"], [14, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "__repr__"], [15, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Function_Approximators.Table": [[17, 1, 1, "", "Q_Table"], [18, 1, 1, "", "Table"], [19, 3, 1, "", "construct_Q_Table_From_Env_Description"]], "seldonian.RL.Agents.Function_Approximators.Table.Q_Table": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "__repr__"], [17, 2, 1, "", "from_environment_state_to_0_indexed_state"], [17, 2, 1, "", "get_action_values_given_state"], [17, 2, 1, "", "get_action_values_given_zero_indexed_state"], [17, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Function_Approximators.Table.Table": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "from_environment_state_to_0_indexed_state"], [18, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent": [[21, 1, 1, "", "Parameterized_non_learning_softmax_agent"]], "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "__repr__"], [21, 2, 1, "", "choose_action"], [21, 2, 1, "", "get_action_values"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "get_prob_this_action"], [21, 2, 1, "", "set_new_params"], [21, 2, 1, "", "update"]], "seldonian.RL.Agents.Policies": [[23, 0, 0, "-", "Policy"], [26, 0, 0, "-", "SimglucosePolicyFixedArea"], [28, 0, 0, "-", "Softmax"]], "seldonian.RL.Agents.Policies.Policy": [[24, 1, 1, "", "Discrete_Action_Policy"], [25, 1, 1, "", "Policy"]], "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "__repr__"], [24, 2, 1, "", "choose_action"], [24, 2, 1, "", "construct_basis_and_linear_FA"], [24, 2, 1, "", "from_0_indexed_action_to_environment_action"], [24, 2, 1, "", "from_environment_action_to_0_indexed_action"], [24, 2, 1, "", "get_action_values_given_state"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "get_prob_this_action"], [24, 2, 1, "", "get_probs_from_observations_and_actions"], [24, 2, 1, "", "make_state_action_FA"], [24, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Policies.Policy.Policy": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "__repr__"], [25, 2, 1, "", "choose_action"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "get_prob_this_action"], [25, 2, 1, "", "get_probs_from_observations_and_actions"], [25, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea": [[27, 1, 1, "", "SigmoidPolicyFixedArea"]], "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "choose_action"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "get_prob_this_action"], [27, 2, 1, "", "get_probs_from_observations_and_actions"], [27, 2, 1, "", "set_new_params"], [27, 2, 1, "", "theta2crcf"]], "seldonian.RL.Agents.Policies.Softmax": [[29, 1, 1, "", "DiscreteSoftmax"], [30, 1, 1, "", "MixedSoftmax"], [31, 1, 1, "", "Softmax"]], "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "__repr__"], [29, 2, 1, "", "_arg"], [29, 2, 1, "", "_denom"], [29, 2, 1, "", "choose_action"], [29, 2, 1, "", "choose_action_from_action_values"], [29, 2, 1, "", "construct_basis_and_linear_FA"], [29, 2, 1, "", "from_0_indexed_action_to_environment_action"], [29, 2, 1, "", "from_environment_action_to_0_indexed_action"], [29, 2, 1, "", "get_action_probs_from_action_values"], [29, 2, 1, "", "get_action_values_given_state"], [29, 2, 1, "", "get_e_to_the_something_terms"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "get_prob_this_action"], [29, 2, 1, "", "get_probs_from_observations_and_actions"], [29, 2, 1, "", "make_state_action_FA"], [29, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "__repr__"], [30, 2, 1, "", "choose_action"], [30, 2, 1, "", "choose_action_from_action_values"], [30, 2, 1, "", "construct_basis_and_linear_FA"], [30, 2, 1, "", "from_0_indexed_action_to_environment_action"], [30, 2, 1, "", "from_environment_action_to_0_indexed_action"], [30, 2, 1, "", "get_action_probs_from_action_values"], [30, 2, 1, "", "get_action_values_given_state"], [30, 2, 1, "", "get_e_to_the_something_terms"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "get_prob_this_action"], [30, 2, 1, "", "get_probs_from_observations_and_actions"], [30, 2, 1, "", "make_state_action_FA"], [30, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Policies.Softmax.Softmax": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "__repr__"], [31, 2, 1, "", "choose_action"], [31, 2, 1, "", "choose_action_from_action_values"], [31, 2, 1, "", "construct_basis_and_linear_FA"], [31, 2, 1, "", "from_0_indexed_action_to_environment_action"], [31, 2, 1, "", "from_environment_action_to_0_indexed_action"], [31, 2, 1, "", "get_action_probs_from_action_values"], [31, 2, 1, "", "get_action_values_given_state"], [31, 2, 1, "", "get_e_to_the_something_terms"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "get_prob_this_action"], [31, 2, 1, "", "get_probs_from_observations_and_actions"], [31, 2, 1, "", "make_state_action_FA"], [31, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.keyboard_gridworld": [[33, 1, 1, "", "Keyboard_gridworld"]], "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "__repr__"], [33, 2, 1, "", "choose_action"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "get_prob_this_action"], [33, 2, 1, "", "set_new_params"], [33, 2, 1, "", "update"]], "seldonian.RL.Agents.mountain_car_rough_solution": [[35, 1, 1, "", "Mountain_car_rough_solution"]], "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "__repr__"], [35, 2, 1, "", "choose_action"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "get_prob_this_action"], [35, 2, 1, "", "set_new_params"], [35, 2, 1, "", "update"]], "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent": [[37, 1, 1, "", "SimglucoseFixedAreaAgent"]], "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "__repr__"], [37, 2, 1, "", "choose_action"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "get_prob_this_action"], [37, 2, 1, "", "set_new_params"], [37, 2, 1, "", "update"]], "seldonian.RL.Env_Description": [[39, 0, 0, "-", "Env_Description"], [42, 0, 0, "-", "Spaces"]], "seldonian.RL.Env_Description.Env_Description": [[40, 1, 1, "", "Env_Description"], [41, 3, 1, "", "check_space_type"]], "seldonian.RL.Env_Description.Env_Description.Env_Description": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "__repr__"], [40, 2, 1, "", "get_min_action"], [40, 2, 1, "", "get_min_state"], [40, 2, 1, "", "get_num_actions"], [40, 2, 1, "", "get_num_observation_dims"], [40, 2, 1, "", "get_num_states"]], "seldonian.RL.Env_Description.Spaces": [[43, 1, 1, "", "Continuous_Space"], [44, 1, 1, "", "Discrete_Space"]], "seldonian.RL.Env_Description.Spaces.Continuous_Space": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "__repr__"], [43, 2, 1, "", "check_bounds_valid"], [43, 2, 1, "", "get_num_dims"]], "seldonian.RL.Env_Description.Spaces.Discrete_Space": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "__repr__"], [44, 2, 1, "", "get_num_values"]], "seldonian.RL.RL_model": [[46, 1, 1, "", "RL_model"]], "seldonian.RL.RL_model.RL_model": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "__repr__"], [46, 2, 1, "", "get_probs_from_observations_and_actions"]], "seldonian.RL.RL_runner": [[48, 3, 1, "", "create_agent_fromdict"], [49, 3, 1, "", "run_episode"], [50, 3, 1, "", "run_episode_from_dict"], [51, 3, 1, "", "run_episodes_par"], [52, 3, 1, "", "run_trial"], [53, 3, 1, "", "run_trial_given_agent_and_env"]], "seldonian.RL.environments": [[55, 0, 0, "-", "Environment"], [57, 0, 0, "-", "gridworld"], [59, 0, 0, "-", "mountaincar"], [61, 0, 0, "-", "n_step_mountaincar"]], "seldonian.RL.environments.Environment": [[56, 1, 1, "", "Environment"]], "seldonian.RL.environments.Environment.Environment": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "__repr__"], [56, 2, 1, "", "get_env_description"], [56, 2, 1, "", "get_observation"], [56, 2, 1, "", "reset"], [56, 2, 1, "", "start_visualizing"], [56, 2, 1, "", "stop_visualizing"], [56, 2, 1, "", "terminated"], [56, 2, 1, "", "transition"], [56, 2, 1, "", "visualize"]], "seldonian.RL.environments.gridworld": [[58, 1, 1, "", "Gridworld"]], "seldonian.RL.environments.gridworld.Gridworld": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "__repr__"], [58, 2, 1, "", "create_env_description"], [58, 2, 1, "", "get_env_description"], [58, 2, 1, "", "get_observation"], [58, 2, 1, "", "is_in_goal_state"], [58, 2, 1, "", "reset"], [58, 2, 1, "", "start_visualizing"], [58, 2, 1, "", "stop_visualizing"], [58, 2, 1, "", "terminated"], [58, 2, 1, "", "transition"], [58, 2, 1, "", "update_position"], [58, 2, 1, "", "visualize"]], "seldonian.RL.environments.mountaincar": [[60, 1, 1, "", "Mountaincar"]], "seldonian.RL.environments.mountaincar.Mountaincar": [[60, 2, 1, "", "__init__"], [60, 2, 1, "", "__repr__"], [60, 2, 1, "", "get_env_description"], [60, 2, 1, "", "get_observation"], [60, 2, 1, "", "reset"], [60, 2, 1, "", "start_visualizing"], [60, 2, 1, "", "stop_visualizing"], [60, 2, 1, "", "terminated"], [60, 2, 1, "", "transition"], [60, 2, 1, "", "visualize"]], "seldonian.RL.environments.n_step_mountaincar": [[62, 1, 1, "", "N_step_mountaincar"]], "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "__repr__"], [62, 2, 1, "", "get_env_description"], [62, 2, 1, "", "get_observation"], [62, 2, 1, "", "reset"], [62, 2, 1, "", "start_visualizing"], [62, 2, 1, "", "stop_visualizing"], [62, 2, 1, "", "terminated"], [62, 2, 1, "", "transition"], [62, 2, 1, "", "visualize"]], "seldonian.RL.generate_gridworld_episodes": [[64, 3, 1, "", "main"]], "seldonian.RL.generate_mountaincar_episodes": [[66, 3, 1, "", "main"]], "seldonian.RL.hyperparams_and_settings": [[68, 3, 1, "", "define_hyperparameter_and_setting_dict"]], "seldonian.candidate_selection": [[70, 0, 0, "-", "candidate_selection"]], "seldonian.candidate_selection.candidate_selection": [[71, 1, 1, "", "CandidateSelection"]], "seldonian.candidate_selection.candidate_selection.CandidateSelection": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "__repr__"], [71, 2, 1, "", "calculate_batches"], [71, 2, 1, "", "evaluate_primary_objective"], [71, 2, 1, "", "get_constraint_upper_bounds"], [71, 2, 1, "", "get_importance_weights"], [71, 2, 1, "", "objective_with_barrier"], [71, 2, 1, "", "run"]], "seldonian.dataset": [[73, 1, 1, "", "DataSet"], [74, 1, 1, "", "DataSetLoader"], [75, 1, 1, "", "Episode"], [76, 1, 1, "", "MetaData"], [77, 1, 1, "", "RLDataSet"], [78, 1, 1, "", "RLMetaData"], [79, 1, 1, "", "SupervisedDataSet"], [80, 1, 1, "", "SupervisedMetaData"], [81, 3, 1, "", "load_RL_metadata"], [82, 3, 1, "", "load_supervised_metadata"]], "seldonian.dataset.DataSet": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "__repr__"]], "seldonian.dataset.DataSetLoader": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "__repr__"], [74, 2, 1, "", "load_RL_dataset_from_csv"], [74, 2, 1, "", "load_RL_dataset_from_episode_file"], [74, 2, 1, "", "load_supervised_dataset"]], "seldonian.dataset.Episode": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "__repr__"]], "seldonian.dataset.MetaData": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "__repr__"]], "seldonian.dataset.RLDataSet": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "__repr__"]], "seldonian.dataset.RLMetaData": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "__repr__"]], "seldonian.dataset.SupervisedDataSet": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "__repr__"]], "seldonian.dataset.SupervisedMetaData": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "__repr__"]], "seldonian.hyperparam_search": [[84, 1, 1, "", "HyperparamSearch"]], "seldonian.hyperparam_search.HyperparamSearch": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "__repr__"], [84, 2, 1, "", "bootstrap_sample_dataset"], [84, 2, 1, "", "candidate_selection"], [84, 2, 1, "", "create_dataset"], [84, 2, 1, "", "est_prob_pass"], [84, 2, 1, "", "find_best_hyperparams"], [84, 2, 1, "", "get_initial_solution"], [84, 2, 1, "", "get_safety_size"], [84, 2, 1, "", "run_core"], [84, 2, 1, "", "run_safety_test"], [84, 2, 1, "", "safety_test"]], "seldonian.models": [[86, 0, 0, "-", "models"], [99, 0, 0, "-", "objectives"], [119, 0, 0, "-", "sklearn_lr"], [121, 0, 0, "-", "sklearn_model"], [124, 0, 0, "-", "trees"]], "seldonian.models.models": [[87, 1, 1, "", "BaseLogisticRegressionModel"], [88, 1, 1, "", "BinaryLogisticRegressionModel"], [89, 1, 1, "", "BoundedLinearRegressionModel"], [90, 1, 1, "", "ClassificationModel"], [91, 1, 1, "", "DummyClassifierModel"], [92, 1, 1, "", "LinearRegressionModel"], [93, 1, 1, "", "LinearRegressionModelListFeatures"], [94, 1, 1, "", "MultiClassLogisticRegressionModel"], [95, 1, 1, "", "RandomClassifierModel"], [96, 1, 1, "", "RegressionModel"], [97, 1, 1, "", "SeldonianModel"], [98, 1, 1, "", "SupervisedModel"]], "seldonian.models.models.BaseLogisticRegressionModel": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "__repr__"], [87, 2, 1, "", "fit"]], "seldonian.models.models.BinaryLogisticRegressionModel": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "__repr__"], [88, 2, 1, "", "fit"], [88, 2, 1, "", "predict"]], "seldonian.models.models.BoundedLinearRegressionModel": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "__repr__"], [89, 2, 1, "", "fit"], [89, 2, 1, "", "predict"]], "seldonian.models.models.ClassificationModel": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "__repr__"]], "seldonian.models.models.DummyClassifierModel": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "__repr__"], [91, 2, 1, "", "predict"]], "seldonian.models.models.LinearRegressionModel": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "__repr__"], [92, 2, 1, "", "fit"], [92, 2, 1, "", "predict"]], "seldonian.models.models.LinearRegressionModelListFeatures": [[93, 2, 1, "", "__init__"], [93, 2, 1, "", "__repr__"], [93, 2, 1, "", "fit"], [93, 2, 1, "", "predict"]], "seldonian.models.models.MultiClassLogisticRegressionModel": [[94, 2, 1, "", "__init__"], [94, 2, 1, "", "__repr__"], [94, 2, 1, "", "fit"], [94, 2, 1, "", "predict"]], "seldonian.models.models.RandomClassifierModel": [[95, 2, 1, "", "__init__"], [95, 2, 1, "", "__repr__"], [95, 2, 1, "", "predict"]], "seldonian.models.models.RegressionModel": [[96, 2, 1, "", "__init__"], [96, 2, 1, "", "__repr__"]], "seldonian.models.models.SeldonianModel": [[97, 2, 1, "", "__init__"], [97, 2, 1, "", "__repr__"]], "seldonian.models.models.SupervisedModel": [[98, 2, 1, "", "__init__"], [98, 2, 1, "", "__repr__"]], "seldonian.models.objectives": [[100, 3, 1, "", "Error_Rate"], [101, 3, 1, "", "False_Negative_Rate"], [102, 3, 1, "", "False_Positive_Rate"], [103, 3, 1, "", "IS_estimate"], [104, 3, 1, "", "Mean_Error"], [105, 3, 1, "", "Mean_Squared_Error"], [106, 3, 1, "", "Negative_Rate"], [107, 3, 1, "", "PDIS_estimate"], [108, 3, 1, "", "Positive_Rate"], [109, 3, 1, "", "True_Negative_Rate"], [110, 3, 1, "", "True_Positive_Rate"], [111, 3, 1, "", "US_estimate"], [112, 3, 1, "", "WIS_estimate"], [113, 3, 1, "", "binary_logistic_loss"], [114, 3, 1, "", "confusion_matrix"], [115, 3, 1, "", "gradient_Bounded_Squared_Error"], [116, 3, 1, "", "gradient_Mean_Squared_Error"], [117, 3, 1, "", "gradient_binary_logistic_loss"], [118, 3, 1, "", "multiclass_logistic_loss"]], "seldonian.models.sklearn_lr": [[120, 1, 1, "", "SkLearnLinearRegressor"]], "seldonian.models.sklearn_lr.SkLearnLinearRegressor": [[120, 2, 1, "", "__init__"], [120, 2, 1, "", "__repr__"], [120, 2, 1, "", "backward_pass"], [120, 2, 1, "", "create_model"], [120, 2, 1, "", "forward_pass"], [120, 2, 1, "", "get_model_params"], [120, 2, 1, "", "predict"], [120, 2, 1, "", "update_model_params"]], "seldonian.models.sklearn_model": [[122, 1, 1, "", "SupervisedSkLearnBaseModel"], [123, 3, 1, "", "sklearn_predict_vjp"]], "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel": [[122, 2, 1, "", "__init__"], [122, 2, 1, "", "__repr__"], [122, 2, 1, "", "backward_pass"], [122, 2, 1, "", "create_model"], [122, 2, 1, "", "forward_pass"], [122, 2, 1, "", "get_model_params"], [122, 2, 1, "", "predict"], [122, 2, 1, "", "update_model_params"]], "seldonian.models.trees": [[125, 0, 0, "-", "skrandomforest_model"], [130, 0, 0, "-", "sktree_model"]], "seldonian.models.trees.skrandomforest_model": [[126, 1, 1, "", "SeldonianRandomForest"], [127, 3, 1, "", "probs2theta"], [128, 3, 1, "", "sigmoid"], [129, 3, 1, "", "sklearn_predict_vjp"]], "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest": [[126, 2, 1, "", "__init__"], [126, 2, 1, "", "__repr__"], [126, 2, 1, "", "fit"], [126, 2, 1, "", "forward_pass"], [126, 2, 1, "", "get_jacobian"], [126, 2, 1, "", "get_leaf_node_probs"], [126, 2, 1, "", "predict"], [126, 2, 1, "", "set_leaf_node_values"]], "seldonian.models.trees.sktree_model": [[131, 1, 1, "", "SeldonianDecisionTree"], [132, 3, 1, "", "probs2theta"], [133, 3, 1, "", "sigmoid"], [134, 3, 1, "", "sklearn_predict_vjp"]], "seldonian.models.trees.sktree_model.SeldonianDecisionTree": [[131, 2, 1, "", "__init__"], [131, 2, 1, "", "__repr__"], [131, 2, 1, "", "fit"], [131, 2, 1, "", "forward_pass"], [131, 2, 1, "", "get_jacobian"], [131, 2, 1, "", "get_leaf_node_probs"], [131, 2, 1, "", "predict"], [131, 2, 1, "", "set_leaf_node_values"]], "seldonian.optimizers": [[136, 0, 0, "-", "gradient_descent"]], "seldonian.optimizers.gradient_descent": [[137, 3, 1, "", "gradient_descent_adam"], [138, 3, 1, "", "setup_gradients"]], "seldonian.parse_tree": [[140, 0, 0, "-", "nodes"], [151, 0, 0, "-", "operators"], [152, 0, 0, "-", "parse_tree"], [155, 0, 0, "-", "zhat_funcs"]], "seldonian.parse_tree.nodes": [[141, 1, 1, "", "BaseNode"], [142, 1, 1, "", "CVaRSQeBaseNode"], [143, 1, 1, "", "ConfusionMatrixBaseNode"], [144, 1, 1, "", "ConstantNode"], [145, 1, 1, "", "InternalNode"], [146, 1, 1, "", "MEDCustomBaseNode"], [147, 1, 1, "", "MultiClassBaseNode"], [148, 1, 1, "", "NewPolicyPerformanceBaseNode"], [149, 1, 1, "", "Node"], [150, 1, 1, "", "RLAltRewardBaseNode"]], "seldonian.parse_tree.nodes.BaseNode": [[141, 2, 1, "", "__init__"], [141, 2, 1, "", "__repr__"], [141, 2, 1, "", "calculate_bounds"], [141, 2, 1, "", "calculate_data_forbound"], [141, 2, 1, "", "calculate_value"], [141, 2, 1, "", "compute_HC_lowerbound"], [141, 2, 1, "", "compute_HC_upper_and_lowerbound"], [141, 2, 1, "", "compute_HC_upperbound"], [141, 2, 1, "", "mask_data"], [141, 2, 1, "", "predict_HC_lowerbound"], [141, 2, 1, "", "predict_HC_upper_and_lowerbound"], [141, 2, 1, "", "predict_HC_upperbound"], [141, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.CVaRSQeBaseNode": [[142, 2, 1, "", "__init__"], [142, 2, 1, "", "__repr__"], [142, 2, 1, "", "calculate_bounds"], [142, 2, 1, "", "calculate_data_forbound"], [142, 2, 1, "", "calculate_value"], [142, 2, 1, "", "compute_HC_lowerbound"], [142, 2, 1, "", "compute_HC_upper_and_lowerbound"], [142, 2, 1, "", "compute_HC_upperbound"], [142, 2, 1, "", "mask_data"], [142, 2, 1, "", "predict_HC_lowerbound"], [142, 2, 1, "", "predict_HC_upper_and_lowerbound"], [142, 2, 1, "", "predict_HC_upperbound"], [142, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode": [[143, 2, 1, "", "__init__"], [143, 2, 1, "", "__repr__"], [143, 2, 1, "", "calculate_bounds"], [143, 2, 1, "", "calculate_data_forbound"], [143, 2, 1, "", "calculate_value"], [143, 2, 1, "", "compute_HC_lowerbound"], [143, 2, 1, "", "compute_HC_upper_and_lowerbound"], [143, 2, 1, "", "compute_HC_upperbound"], [143, 2, 1, "", "mask_data"], [143, 2, 1, "", "predict_HC_lowerbound"], [143, 2, 1, "", "predict_HC_upper_and_lowerbound"], [143, 2, 1, "", "predict_HC_upperbound"], [143, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.ConstantNode": [[144, 2, 1, "", "__init__"], [144, 2, 1, "", "__repr__"]], "seldonian.parse_tree.nodes.InternalNode": [[145, 2, 1, "", "__init__"], [145, 2, 1, "", "__repr__"]], "seldonian.parse_tree.nodes.MEDCustomBaseNode": [[146, 2, 1, "", "__init__"], [146, 2, 1, "", "__repr__"], [146, 2, 1, "", "calculate_bounds"], [146, 2, 1, "", "calculate_data_forbound"], [146, 2, 1, "", "calculate_value"], [146, 2, 1, "", "compute_HC_lowerbound"], [146, 2, 1, "", "compute_HC_upper_and_lowerbound"], [146, 2, 1, "", "compute_HC_upperbound"], [146, 2, 1, "", "mask_data"], [146, 2, 1, "", "precalculate_data"], [146, 2, 1, "", "predict_HC_lowerbound"], [146, 2, 1, "", "predict_HC_upper_and_lowerbound"], [146, 2, 1, "", "predict_HC_upperbound"], [146, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.MultiClassBaseNode": [[147, 2, 1, "", "__init__"], [147, 2, 1, "", "__repr__"], [147, 2, 1, "", "calculate_bounds"], [147, 2, 1, "", "calculate_data_forbound"], [147, 2, 1, "", "calculate_value"], [147, 2, 1, "", "compute_HC_lowerbound"], [147, 2, 1, "", "compute_HC_upper_and_lowerbound"], [147, 2, 1, "", "compute_HC_upperbound"], [147, 2, 1, "", "mask_data"], [147, 2, 1, "", "predict_HC_lowerbound"], [147, 2, 1, "", "predict_HC_upper_and_lowerbound"], [147, 2, 1, "", "predict_HC_upperbound"], [147, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode": [[148, 2, 1, "", "__init__"], [148, 2, 1, "", "__repr__"], [148, 2, 1, "", "calculate_bounds"], [148, 2, 1, "", "calculate_data_forbound"], [148, 2, 1, "", "calculate_value"], [148, 2, 1, "", "compute_HC_lowerbound"], [148, 2, 1, "", "compute_HC_upper_and_lowerbound"], [148, 2, 1, "", "compute_HC_upperbound"], [148, 2, 1, "", "mask_data"], [148, 2, 1, "", "predict_HC_lowerbound"], [148, 2, 1, "", "predict_HC_upper_and_lowerbound"], [148, 2, 1, "", "predict_HC_upperbound"], [148, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.Node": [[149, 2, 1, "", "__init__"], [149, 2, 1, "", "__repr__"]], "seldonian.parse_tree.nodes.RLAltRewardBaseNode": [[150, 2, 1, "", "__init__"], [150, 2, 1, "", "__repr__"], [150, 2, 1, "", "calculate_bounds"], [150, 2, 1, "", "calculate_data_forbound"], [150, 2, 1, "", "calculate_value"], [150, 2, 1, "", "compute_HC_lowerbound"], [150, 2, 1, "", "compute_HC_upper_and_lowerbound"], [150, 2, 1, "", "compute_HC_upperbound"], [150, 2, 1, "", "mask_data"], [150, 2, 1, "", "predict_HC_lowerbound"], [150, 2, 1, "", "predict_HC_upper_and_lowerbound"], [150, 2, 1, "", "predict_HC_upperbound"], [150, 2, 1, "", "zhat"]], "seldonian.parse_tree.operators": [[151, 4, 1, "", "bounds_required_dict"], [151, 4, 1, "", "not_supported_op_mapper"], [151, 4, 1, "", "op_mapper"]], "seldonian.parse_tree.parse_tree": [[153, 1, 1, "", "ParseTree"], [154, 3, 1, "", "make_parse_trees_from_constraints"]], "seldonian.parse_tree.parse_tree.ParseTree": [[153, 2, 1, "", "__init__"], [153, 2, 1, "", "__repr__"], [153, 2, 1, "", "_abs"], [153, 2, 1, "", "_add"], [153, 2, 1, "", "_assign_bounds_helper"], [153, 2, 1, "", "_assign_deltas_helper"], [153, 2, 1, "", "_assign_infl_factors_helper"], [153, 2, 1, "", "_ast2pt_node"], [153, 2, 1, "", "_ast_tree_helper"], [153, 2, 1, "", "_div"], [153, 2, 1, "", "_evaluator_helper"], [153, 2, 1, "", "_exp"], [153, 2, 1, "", "_log"], [153, 2, 1, "", "_max"], [153, 2, 1, "", "_min"], [153, 2, 1, "", "_mult"], [153, 2, 1, "", "_pow"], [153, 2, 1, "", "_preprocess_constraint_str"], [153, 2, 1, "", "_propagate_value"], [153, 2, 1, "", "_propagator_helper"], [153, 2, 1, "", "_protect_nan"], [153, 2, 1, "", "_sub"], [153, 2, 1, "", "_validate_delta_vector"], [153, 2, 1, "", "_validate_infl_factors"], [153, 2, 1, "", "assign_bounds_needed"], [153, 2, 1, "", "assign_deltas"], [153, 2, 1, "", "assign_infl_factors"], [153, 2, 1, "", "build_tree"], [153, 2, 1, "", "create_from_ast"], [153, 2, 1, "", "evaluate_constraint"], [153, 2, 1, "", "make_viz"], [153, 2, 1, "", "make_viz_helper"], [153, 2, 1, "", "propagate"], [153, 2, 1, "", "propagate_bounds"], [153, 2, 1, "", "reset_base_node_dict"]], "seldonian.parse_tree.zhat_funcs": [[156, 3, 1, "", "batcher"], [157, 3, 1, "", "evaluate_statistic"], [158, 3, 1, "", "sample_from_statistic"], [159, 3, 1, "", "vector_Accuracy"], [160, 3, 1, "", "vector_Error"], [161, 3, 1, "", "vector_Error_Rate"], [162, 3, 1, "", "vector_False_Negative_Rate"], [163, 3, 1, "", "vector_False_Positive_Rate"], [164, 3, 1, "", "vector_IS_estimate"], [165, 3, 1, "", "vector_Negative_Rate"], [166, 3, 1, "", "vector_PDIS_estimate"], [167, 3, 1, "", "vector_Positive_Rate"], [168, 3, 1, "", "vector_Squared_Error"], [169, 3, 1, "", "vector_True_Negative_Rate"], [170, 3, 1, "", "vector_True_Positive_Rate"], [171, 3, 1, "", "vector_WIS_estimate"], [172, 3, 1, "", "vector_auxiliary_return_US_estimate"], [173, 3, 1, "", "vector_confusion_matrix"]], "seldonian.safety_test": [[175, 0, 0, "-", "safety_test"]], "seldonian.safety_test.safety_test": [[176, 1, 1, "", "SafetyTest"]], "seldonian.safety_test.safety_test.SafetyTest": [[176, 2, 1, "", "__init__"], [176, 2, 1, "", "__repr__"], [176, 2, 1, "", "evaluate_primary_objective"], [176, 2, 1, "", "get_importance_weights"], [176, 2, 1, "", "run"]], "seldonian.seldonian_algorithm": [[178, 1, 1, "", "SeldonianAlgorithm"]], "seldonian.seldonian_algorithm.SeldonianAlgorithm": [[178, 2, 1, "", "__init__"], [178, 2, 1, "", "__repr__"], [178, 2, 1, "", "candidate_safety_split"], [178, 2, 1, "", "candidate_selection"], [178, 2, 1, "", "evaluate_primary_objective"], [178, 2, 1, "", "get_cs_result"], [178, 2, 1, "", "get_importance_weights"], [178, 2, 1, "", "get_st_upper_bounds"], [178, 2, 1, "", "run"], [178, 2, 1, "", "run_safety_test"], [178, 2, 1, "", "safety_test"]], "seldonian.spec": [[180, 1, 1, "", "RLSpec"], [181, 1, 1, "", "Spec"], [182, 1, 1, "", "SupervisedSpec"], [183, 3, 1, "", "createRLSpec"], [184, 3, 1, "", "createSimpleSupervisedSpec"], [185, 3, 1, "", "createSupervisedSpec"], [186, 3, 1, "", "validate_parse_trees"]], "seldonian.spec.RLSpec": [[180, 2, 1, "", "__init__"], [180, 2, 1, "", "__repr__"]], "seldonian.spec.Spec": [[181, 2, 1, "", "__init__"], [181, 2, 1, "", "__repr__"]], "seldonian.spec.SupervisedSpec": [[182, 2, 1, "", "__init__"], [182, 2, 1, "", "__repr__"]], "seldonian.utils": [[188, 0, 0, "-", "RL_utils"], [192, 0, 0, "-", "io_utils"], [199, 0, 0, "-", "plot_utils"], [201, 0, 0, "-", "stats_utils"], [207, 0, 0, "-", "tutorial_utils"]], "seldonian.utils.RL_utils": [[189, 3, 1, "", "argmax_multi"], [190, 3, 1, "", "clamp"], [191, 3, 1, "", "error"]], "seldonian.utils.io_utils": [[193, 3, 1, "", "cmaes_logger"], [194, 3, 1, "", "dir_path"], [195, 3, 1, "", "load_json"], [196, 3, 1, "", "load_pickle"], [197, 3, 1, "", "save_json"], [198, 3, 1, "", "save_pickle"]], "seldonian.utils.plot_utils": [[200, 3, 1, "", "plot_gradient_descent"]], "seldonian.utils.stats_utils": [[202, 3, 1, "", "custom_cumprod"], [203, 3, 1, "", "softmax"], [204, 3, 1, "", "stddev"], [205, 3, 1, "", "tinv"], [206, 3, 1, "", "weighted_sum_gamma"]], "seldonian.utils.tutorial_utils": [[208, 3, 1, "", "generate_clipped_data"], [209, 3, 1, "", "generate_data"], [210, 3, 1, "", "make_synthetic_regression_dataset"]], "seldonian.warnings": [[212, 0, 0, "-", "custom_warnings"]], "seldonian.warnings.custom_warnings": [[213, 3, 1, "", "custom_formatwarning"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "data", "Python data"]}, "titleterms": {"seldonian": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216], "rl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "agent": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "base": [5, 6, 7], "fourier": [6, 7], "discrete_random_ag": [8, 9], "function_approxim": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "linear_fa": [13, 14, 15], "linear_state_action_value_fa": 15, "tabl": [16, 17, 18, 19, 216], "q_tabl": 17, "construct_q_table_from_env_descript": 19, "parameterized_non_learning_softmax_ag": [20, 21], "polici": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "discrete_action_polici": 24, "simglucosepolicyfixedarea": [26, 27], "sigmoidpolicyfixedarea": 27, "softmax": [28, 29, 30, 31, 203], "discretesoftmax": 29, "mixedsoftmax": 30, "keyboard_gridworld": [32, 33], "mountain_car_rough_solut": [34, 35], "simglucose_custom_fixedarea_random_ag": [36, 37], "simglucosefixedareaag": 37, "env_descript": [38, 39, 40, 41, 42, 43, 44], "check_space_typ": 41, "space": [42, 43, 44], "continuous_spac": 43, "discrete_spac": 44, "rl_model": [45, 46], "rl_runner": [47, 48, 49, 50, 51, 52, 53], "create_agent_fromdict": 48, "run_episod": 49, "run_episode_from_dict": 50, "run_episodes_par": 51, "run_trial": 52, "run_trial_given_agent_and_env": 53, "environ": [54, 55, 56, 57, 58, 59, 60, 61, 62], "gridworld": [57, 58], "mountaincar": [59, 60], "n_step_mountaincar": [61, 62], "generate_gridworld_episod": [63, 64], "main": [64, 66], "generate_mountaincar_episod": [65, 66], "hyperparams_and_set": [67, 68], "define_hyperparameter_and_setting_dict": 68, "candidate_select": [69, 70, 71], "candidateselect": 71, "dataset": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 217], "datasetload": 74, "episod": 75, "metadata": 76, "rldataset": 77, "rlmetadata": 78, "superviseddataset": 79, "supervisedmetadata": 80, "load_rl_metadata": 81, "load_supervised_metadata": 82, "hyperparam_search": [83, 84], "hyperparamsearch": 84, "model": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 217], "baselogisticregressionmodel": 87, "binarylogisticregressionmodel": 88, "boundedlinearregressionmodel": 89, "classificationmodel": 90, "dummyclassifiermodel": 91, "linearregressionmodel": 92, "linearregressionmodellistfeatur": 93, "multiclasslogisticregressionmodel": 94, "randomclassifiermodel": 95, "regressionmodel": 96, "seldonianmodel": 97, "supervisedmodel": 98, "object": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 217], "error_r": 100, "false_negative_r": 101, "false_positive_r": 102, "is_estim": 103, "mean_error": 104, "mean_squared_error": 105, "negative_r": 106, "pdis_estim": 107, "positive_r": 108, "true_negative_r": 109, "true_positive_r": 110, "us_estim": 111, "wis_estim": 112, "binary_logistic_loss": 113, "confusion_matrix": 114, "gradient_bounded_squared_error": 115, "gradient_mean_squared_error": 116, "gradient_binary_logistic_loss": 117, "multiclass_logistic_loss": 118, "sklearn_lr": [119, 120], "sklearnlinearregressor": 120, "sklearn_model": [121, 122, 123], "supervisedsklearnbasemodel": 122, "sklearn_predict_vjp": [123, 129, 134], "tree": [124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "skrandomforest_model": [125, 126, 127, 128, 129], "seldonianrandomforest": 126, "probs2theta": [127, 132], "sigmoid": [128, 133], "sktree_model": [130, 131, 132, 133, 134], "seldoniandecisiontre": 131, "optim": [135, 136, 137, 138], "gradient_desc": [136, 137, 138], "gradient_descent_adam": 137, "setup_gradi": 138, "parse_tre": [139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "node": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "basenod": 141, "cvarsqebasenod": 142, "confusionmatrixbasenod": 143, "constantnod": 144, "internalnod": 145, "medcustombasenod": 146, "multiclassbasenod": 147, "newpolicyperformancebasenod": 148, "rlaltrewardbasenod": 150, "oper": 151, "parsetre": 153, "make_parse_trees_from_constraint": 154, "zhat_func": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173], "batcher": 156, "evaluate_statist": 157, "sample_from_statist": 158, "vector_accuraci": 159, "vector_error": 160, "vector_error_r": 161, "vector_false_negative_r": 162, "vector_false_positive_r": 163, "vector_is_estim": 164, "vector_negative_r": 165, "vector_pdis_estim": 166, "vector_positive_r": 167, "vector_squared_error": 168, "vector_true_negative_r": 169, "vector_true_positive_r": 170, "vector_wis_estim": 171, "vector_auxiliary_return_us_estim": 172, "vector_confusion_matrix": 173, "safety_test": [174, 175, 176], "safetytest": 176, "seldonian_algorithm": [177, 178], "seldonianalgorithm": 178, "spec": [179, 180, 181, 182, 183, 184, 185, 186, 217], "rlspec": 180, "supervisedspec": 182, "createrlspec": 183, "createsimplesupervisedspec": 184, "createsupervisedspec": 185, "validate_parse_tre": 186, "util": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], "rl_util": [188, 189, 190, 191], "argmax_multi": 189, "clamp": 190, "error": 191, "io_util": [192, 193, 194, 195, 196, 197, 198], "cmaes_logg": 193, "dir_path": 194, "load_json": 195, "load_pickl": 196, "save_json": 197, "save_pickl": 198, "plot_util": [199, 200], "plot_gradient_desc": 200, "stats_util": [201, 202, 203, 204, 205, 206], "custom_cumprod": 202, "stddev": 204, "tinv": 205, "weighted_sum_gamma": 206, "tutorial_util": [207, 208, 209, 210], "generate_clipped_data": 208, "generate_data": 209, "make_synthetic_regression_dataset": 210, "warn": [211, 212, 213], "custom_warn": [212, 213], "custom_formatwarn": 213, "api": 214, "get": 215, "start": 215, "instal": 215, "A": 215, "first": 215, "tutori": 215, "engin": 216, "document": 216, "content": 216, "overview": 217, "interfac": 217, "behavior": 217, "constraint": 217, "string": 217, "what": 217, "doe": 217, "sa": 217, "run": 217, "do": 217, "candid": 217, "select": 217, "safeti": 217, "test": 217}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"seldonian": [[0, "module-seldonian"]], "seldonian.RL": [[1, "module-seldonian.RL"]], "seldonian.RL.Agents": [[2, "module-seldonian.RL.Agents"]], "seldonian.RL.Agents.Agent": [[3, "module-seldonian.RL.Agents.Agent"]], "seldonian.RL.Agents.Agent.Agent": [[4, "seldonian-rl-agents-agent-agent"]], "seldonian.RL.Agents.Bases": [[5, "module-seldonian.RL.Agents.Bases"]], "seldonian.RL.Agents.Bases.Fourier": [[6, "module-seldonian.RL.Agents.Bases.Fourier"]], "seldonian.RL.Agents.Bases.Fourier.Fourier": [[7, "seldonian-rl-agents-bases-fourier-fourier"]], "seldonian.RL.Agents.Discrete_Random_Agent": [[8, "module-seldonian.RL.Agents.Discrete_Random_Agent"]], "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent": [[9, "seldonian-rl-agents-discrete-random-agent-discrete-random-agent"]], "seldonian.RL.Agents.Function_Approximators": [[10, "module-seldonian.RL.Agents.Function_Approximators"]], "seldonian.RL.Agents.Function_Approximators.Function_Approximator": [[11, "module-seldonian.RL.Agents.Function_Approximators.Function_Approximator"]], "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator": [[12, "seldonian-rl-agents-function-approximators-function-approximator-function-approximator"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA": [[13, "module-seldonian.RL.Agents.Function_Approximators.Linear_FA"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA": [[14, "seldonian-rl-agents-function-approximators-linear-fa-linear-fa"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA": [[15, "seldonian-rl-agents-function-approximators-linear-fa-linear-state-action-value-fa"]], "seldonian.RL.Agents.Function_Approximators.Table": [[16, "module-seldonian.RL.Agents.Function_Approximators.Table"]], "seldonian.RL.Agents.Function_Approximators.Table.Q_Table": [[17, "seldonian-rl-agents-function-approximators-table-q-table"]], "seldonian.RL.Agents.Function_Approximators.Table.Table": [[18, "seldonian-rl-agents-function-approximators-table-table"]], "seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description": [[19, "seldonian-rl-agents-function-approximators-table-construct-q-table-from-env-description"]], "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent": [[20, "module-seldonian.RL.Agents.Parameterized_non_learning_softmax_agent"]], "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent": [[21, "seldonian-rl-agents-parameterized-non-learning-softmax-agent-parameterized-non-learning-softmax-agent"]], "seldonian.RL.Agents.Policies": [[22, "module-seldonian.RL.Agents.Policies"]], "seldonian.RL.Agents.Policies.Policy": [[23, "module-seldonian.RL.Agents.Policies.Policy"]], "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy": [[24, "seldonian-rl-agents-policies-policy-discrete-action-policy"]], "seldonian.RL.Agents.Policies.Policy.Policy": [[25, "seldonian-rl-agents-policies-policy-policy"]], "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea": [[26, "module-seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea"]], "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea": [[27, "seldonian-rl-agents-policies-simglucosepolicyfixedarea-sigmoidpolicyfixedarea"]], "seldonian.RL.Agents.Policies.Softmax": [[28, "module-seldonian.RL.Agents.Policies.Softmax"]], "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax": [[29, "seldonian-rl-agents-policies-softmax-discretesoftmax"]], "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax": [[30, "seldonian-rl-agents-policies-softmax-mixedsoftmax"]], "seldonian.RL.Agents.Policies.Softmax.Softmax": [[31, "seldonian-rl-agents-policies-softmax-softmax"]], "seldonian.RL.Agents.keyboard_gridworld": [[32, "module-seldonian.RL.Agents.keyboard_gridworld"]], "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld": [[33, "seldonian-rl-agents-keyboard-gridworld-keyboard-gridworld"]], "seldonian.RL.Agents.mountain_car_rough_solution": [[34, "module-seldonian.RL.Agents.mountain_car_rough_solution"]], "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution": [[35, "seldonian-rl-agents-mountain-car-rough-solution-mountain-car-rough-solution"]], "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent": [[36, "module-seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent"]], "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent": [[37, "seldonian-rl-agents-simglucose-custom-fixedarea-random-agent-simglucosefixedareaagent"]], "seldonian.RL.Env_Description": [[38, "module-seldonian.RL.Env_Description"]], "seldonian.RL.Env_Description.Env_Description": [[39, "module-seldonian.RL.Env_Description.Env_Description"]], "seldonian.RL.Env_Description.Env_Description.Env_Description": [[40, "seldonian-rl-env-description-env-description-env-description"]], "seldonian.RL.Env_Description.Env_Description.check_space_type": [[41, "seldonian-rl-env-description-env-description-check-space-type"]], "seldonian.RL.Env_Description.Spaces": [[42, "module-seldonian.RL.Env_Description.Spaces"]], "seldonian.RL.Env_Description.Spaces.Continuous_Space": [[43, "seldonian-rl-env-description-spaces-continuous-space"]], "seldonian.RL.Env_Description.Spaces.Discrete_Space": [[44, "seldonian-rl-env-description-spaces-discrete-space"]], "seldonian.RL.RL_model": [[45, "module-seldonian.RL.RL_model"]], "seldonian.RL.RL_model.RL_model": [[46, "seldonian-rl-rl-model-rl-model"]], "seldonian.RL.RL_runner": [[47, "module-seldonian.RL.RL_runner"]], "seldonian.RL.RL_runner.create_agent_fromdict": [[48, "seldonian-rl-rl-runner-create-agent-fromdict"]], "seldonian.RL.RL_runner.run_episode": [[49, "seldonian-rl-rl-runner-run-episode"]], "seldonian.RL.RL_runner.run_episode_from_dict": [[50, "seldonian-rl-rl-runner-run-episode-from-dict"]], "seldonian.RL.RL_runner.run_episodes_par": [[51, "seldonian-rl-rl-runner-run-episodes-par"]], "seldonian.RL.RL_runner.run_trial": [[52, "seldonian-rl-rl-runner-run-trial"]], "seldonian.RL.RL_runner.run_trial_given_agent_and_env": [[53, "seldonian-rl-rl-runner-run-trial-given-agent-and-env"]], "seldonian.RL.environments": [[54, "module-seldonian.RL.environments"]], "seldonian.RL.environments.Environment": [[55, "module-seldonian.RL.environments.Environment"]], "seldonian.RL.environments.Environment.Environment": [[56, "seldonian-rl-environments-environment-environment"]], "seldonian.RL.environments.gridworld": [[57, "module-seldonian.RL.environments.gridworld"]], "seldonian.RL.environments.gridworld.Gridworld": [[58, "seldonian-rl-environments-gridworld-gridworld"]], "seldonian.RL.environments.mountaincar": [[59, "module-seldonian.RL.environments.mountaincar"]], "seldonian.RL.environments.mountaincar.Mountaincar": [[60, "seldonian-rl-environments-mountaincar-mountaincar"]], "seldonian.RL.environments.n_step_mountaincar": [[61, "module-seldonian.RL.environments.n_step_mountaincar"]], "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar": [[62, "seldonian-rl-environments-n-step-mountaincar-n-step-mountaincar"]], "seldonian.RL.generate_gridworld_episodes": [[63, "module-seldonian.RL.generate_gridworld_episodes"]], "seldonian.RL.generate_gridworld_episodes.main": [[64, "seldonian-rl-generate-gridworld-episodes-main"]], "seldonian.RL.generate_mountaincar_episodes": [[65, "module-seldonian.RL.generate_mountaincar_episodes"]], "seldonian.RL.generate_mountaincar_episodes.main": [[66, "seldonian-rl-generate-mountaincar-episodes-main"]], "seldonian.RL.hyperparams_and_settings": [[67, "module-seldonian.RL.hyperparams_and_settings"]], "seldonian.RL.hyperparams_and_settings.define_hyperparameter_and_setting_dict": [[68, "seldonian-rl-hyperparams-and-settings-define-hyperparameter-and-setting-dict"]], "seldonian.candidate_selection": [[69, "module-seldonian.candidate_selection"]], "seldonian.candidate_selection.candidate_selection": [[70, "module-seldonian.candidate_selection.candidate_selection"]], "seldonian.candidate_selection.candidate_selection.CandidateSelection": [[71, "seldonian-candidate-selection-candidate-selection-candidateselection"]], "seldonian.dataset": [[72, "module-seldonian.dataset"]], "seldonian.dataset.DataSet": [[73, "seldonian-dataset-dataset"]], "seldonian.dataset.DataSetLoader": [[74, "seldonian-dataset-datasetloader"]], "seldonian.dataset.Episode": [[75, "seldonian-dataset-episode"]], "seldonian.dataset.MetaData": [[76, "seldonian-dataset-metadata"]], "seldonian.dataset.RLDataSet": [[77, "seldonian-dataset-rldataset"]], "seldonian.dataset.RLMetaData": [[78, "seldonian-dataset-rlmetadata"]], "seldonian.dataset.SupervisedDataSet": [[79, "seldonian-dataset-superviseddataset"]], "seldonian.dataset.SupervisedMetaData": [[80, "seldonian-dataset-supervisedmetadata"]], "seldonian.dataset.load_RL_metadata": [[81, "seldonian-dataset-load-rl-metadata"]], "seldonian.dataset.load_supervised_metadata": [[82, "seldonian-dataset-load-supervised-metadata"]], "seldonian.hyperparam_search": [[83, "module-seldonian.hyperparam_search"]], "seldonian.hyperparam_search.HyperparamSearch": [[84, "seldonian-hyperparam-search-hyperparamsearch"]], "seldonian.models": [[85, "module-seldonian.models"]], "seldonian.models.models": [[86, "module-seldonian.models.models"]], "seldonian.models.models.BaseLogisticRegressionModel": [[87, "seldonian-models-models-baselogisticregressionmodel"]], "seldonian.models.models.BinaryLogisticRegressionModel": [[88, "seldonian-models-models-binarylogisticregressionmodel"]], "seldonian.models.models.BoundedLinearRegressionModel": [[89, "seldonian-models-models-boundedlinearregressionmodel"]], "seldonian.models.models.ClassificationModel": [[90, "seldonian-models-models-classificationmodel"]], "seldonian.models.models.DummyClassifierModel": [[91, "seldonian-models-models-dummyclassifiermodel"]], "seldonian.models.models.LinearRegressionModel": [[92, "seldonian-models-models-linearregressionmodel"]], "seldonian.models.models.LinearRegressionModelListFeatures": [[93, "seldonian-models-models-linearregressionmodellistfeatures"]], "seldonian.models.models.MultiClassLogisticRegressionModel": [[94, "seldonian-models-models-multiclasslogisticregressionmodel"]], "seldonian.models.models.RandomClassifierModel": [[95, "seldonian-models-models-randomclassifiermodel"]], "seldonian.models.models.RegressionModel": [[96, "seldonian-models-models-regressionmodel"]], "seldonian.models.models.SeldonianModel": [[97, "seldonian-models-models-seldonianmodel"]], "seldonian.models.models.SupervisedModel": [[98, "seldonian-models-models-supervisedmodel"]], "seldonian.models.objectives": [[99, "module-seldonian.models.objectives"]], "seldonian.models.objectives.Error_Rate": [[100, "seldonian-models-objectives-error-rate"]], "seldonian.models.objectives.False_Negative_Rate": [[101, "seldonian-models-objectives-false-negative-rate"]], "seldonian.models.objectives.False_Positive_Rate": [[102, "seldonian-models-objectives-false-positive-rate"]], "seldonian.models.objectives.IS_estimate": [[103, "seldonian-models-objectives-is-estimate"]], "seldonian.models.objectives.Mean_Error": [[104, "seldonian-models-objectives-mean-error"]], "seldonian.models.objectives.Mean_Squared_Error": [[105, "seldonian-models-objectives-mean-squared-error"]], "seldonian.models.objectives.Negative_Rate": [[106, "seldonian-models-objectives-negative-rate"]], "seldonian.models.objectives.PDIS_estimate": [[107, "seldonian-models-objectives-pdis-estimate"]], "seldonian.models.objectives.Positive_Rate": [[108, "seldonian-models-objectives-positive-rate"]], "seldonian.models.objectives.True_Negative_Rate": [[109, "seldonian-models-objectives-true-negative-rate"]], "seldonian.models.objectives.True_Positive_Rate": [[110, "seldonian-models-objectives-true-positive-rate"]], "seldonian.models.objectives.US_estimate": [[111, "seldonian-models-objectives-us-estimate"]], "seldonian.models.objectives.WIS_estimate": [[112, "seldonian-models-objectives-wis-estimate"]], "seldonian.models.objectives.binary_logistic_loss": [[113, "seldonian-models-objectives-binary-logistic-loss"]], "seldonian.models.objectives.confusion_matrix": [[114, "seldonian-models-objectives-confusion-matrix"]], "seldonian.models.objectives.gradient_Bounded_Squared_Error": [[115, "seldonian-models-objectives-gradient-bounded-squared-error"]], "seldonian.models.objectives.gradient_Mean_Squared_Error": [[116, "seldonian-models-objectives-gradient-mean-squared-error"]], "seldonian.models.objectives.gradient_binary_logistic_loss": [[117, "seldonian-models-objectives-gradient-binary-logistic-loss"]], "seldonian.models.objectives.multiclass_logistic_loss": [[118, "seldonian-models-objectives-multiclass-logistic-loss"]], "seldonian.models.sklearn_lr": [[119, "module-seldonian.models.sklearn_lr"]], "seldonian.models.sklearn_lr.SkLearnLinearRegressor": [[120, "seldonian-models-sklearn-lr-sklearnlinearregressor"]], "seldonian.models.sklearn_model": [[121, "module-seldonian.models.sklearn_model"]], "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel": [[122, "seldonian-models-sklearn-model-supervisedsklearnbasemodel"]], "seldonian.models.sklearn_model.sklearn_predict_vjp": [[123, "seldonian-models-sklearn-model-sklearn-predict-vjp"]], "seldonian.models.trees": [[124, "module-seldonian.models.trees"]], "seldonian.models.trees.skrandomforest_model": [[125, "module-seldonian.models.trees.skrandomforest_model"]], "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest": [[126, "seldonian-models-trees-skrandomforest-model-seldonianrandomforest"]], "seldonian.models.trees.skrandomforest_model.probs2theta": [[127, "seldonian-models-trees-skrandomforest-model-probs2theta"]], "seldonian.models.trees.skrandomforest_model.sigmoid": [[128, "seldonian-models-trees-skrandomforest-model-sigmoid"]], "seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp": [[129, "seldonian-models-trees-skrandomforest-model-sklearn-predict-vjp"]], "seldonian.models.trees.sktree_model": [[130, "module-seldonian.models.trees.sktree_model"]], "seldonian.models.trees.sktree_model.SeldonianDecisionTree": [[131, "seldonian-models-trees-sktree-model-seldoniandecisiontree"]], "seldonian.models.trees.sktree_model.probs2theta": [[132, "seldonian-models-trees-sktree-model-probs2theta"]], "seldonian.models.trees.sktree_model.sigmoid": [[133, "seldonian-models-trees-sktree-model-sigmoid"]], "seldonian.models.trees.sktree_model.sklearn_predict_vjp": [[134, "seldonian-models-trees-sktree-model-sklearn-predict-vjp"]], "seldonian.optimizers": [[135, "module-seldonian.optimizers"]], "seldonian.optimizers.gradient_descent": [[136, "module-seldonian.optimizers.gradient_descent"]], "seldonian.optimizers.gradient_descent.gradient_descent_adam": [[137, "seldonian-optimizers-gradient-descent-gradient-descent-adam"]], "seldonian.optimizers.gradient_descent.setup_gradients": [[138, "seldonian-optimizers-gradient-descent-setup-gradients"]], "seldonian.parse_tree": [[139, "module-seldonian.parse_tree"]], "seldonian.parse_tree.nodes": [[140, "module-seldonian.parse_tree.nodes"]], "seldonian.parse_tree.nodes.BaseNode": [[141, "seldonian-parse-tree-nodes-basenode"]], "seldonian.parse_tree.nodes.CVaRSQeBaseNode": [[142, "seldonian-parse-tree-nodes-cvarsqebasenode"]], "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode": [[143, "seldonian-parse-tree-nodes-confusionmatrixbasenode"]], "seldonian.parse_tree.nodes.ConstantNode": [[144, "seldonian-parse-tree-nodes-constantnode"]], "seldonian.parse_tree.nodes.InternalNode": [[145, "seldonian-parse-tree-nodes-internalnode"]], "seldonian.parse_tree.nodes.MEDCustomBaseNode": [[146, "seldonian-parse-tree-nodes-medcustombasenode"]], "seldonian.parse_tree.nodes.MultiClassBaseNode": [[147, "seldonian-parse-tree-nodes-multiclassbasenode"]], "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode": [[148, "seldonian-parse-tree-nodes-newpolicyperformancebasenode"]], "seldonian.parse_tree.nodes.Node": [[149, "seldonian-parse-tree-nodes-node"]], "seldonian.parse_tree.nodes.RLAltRewardBaseNode": [[150, "seldonian-parse-tree-nodes-rlaltrewardbasenode"]], "seldonian.parse_tree.operators": [[151, "module-seldonian.parse_tree.operators"]], "seldonian.parse_tree.parse_tree": [[152, "module-seldonian.parse_tree.parse_tree"]], "seldonian.parse_tree.parse_tree.ParseTree": [[153, "seldonian-parse-tree-parse-tree-parsetree"]], "seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints": [[154, "seldonian-parse-tree-parse-tree-make-parse-trees-from-constraints"]], "seldonian.parse_tree.zhat_funcs": [[155, "module-seldonian.parse_tree.zhat_funcs"]], "seldonian.parse_tree.zhat_funcs.batcher": [[156, "seldonian-parse-tree-zhat-funcs-batcher"]], "seldonian.parse_tree.zhat_funcs.evaluate_statistic": [[157, "seldonian-parse-tree-zhat-funcs-evaluate-statistic"]], "seldonian.parse_tree.zhat_funcs.sample_from_statistic": [[158, "seldonian-parse-tree-zhat-funcs-sample-from-statistic"]], "seldonian.parse_tree.zhat_funcs.vector_Accuracy": [[159, "seldonian-parse-tree-zhat-funcs-vector-accuracy"]], "seldonian.parse_tree.zhat_funcs.vector_Error": [[160, "seldonian-parse-tree-zhat-funcs-vector-error"]], "seldonian.parse_tree.zhat_funcs.vector_Error_Rate": [[161, "seldonian-parse-tree-zhat-funcs-vector-error-rate"]], "seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate": [[162, "seldonian-parse-tree-zhat-funcs-vector-false-negative-rate"]], "seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate": [[163, "seldonian-parse-tree-zhat-funcs-vector-false-positive-rate"]], "seldonian.parse_tree.zhat_funcs.vector_IS_estimate": [[164, "seldonian-parse-tree-zhat-funcs-vector-is-estimate"]], "seldonian.parse_tree.zhat_funcs.vector_Negative_Rate": [[165, "seldonian-parse-tree-zhat-funcs-vector-negative-rate"]], "seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate": [[166, "seldonian-parse-tree-zhat-funcs-vector-pdis-estimate"]], "seldonian.parse_tree.zhat_funcs.vector_Positive_Rate": [[167, "seldonian-parse-tree-zhat-funcs-vector-positive-rate"]], "seldonian.parse_tree.zhat_funcs.vector_Squared_Error": [[168, "seldonian-parse-tree-zhat-funcs-vector-squared-error"]], "seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate": [[169, "seldonian-parse-tree-zhat-funcs-vector-true-negative-rate"]], "seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate": [[170, "seldonian-parse-tree-zhat-funcs-vector-true-positive-rate"]], "seldonian.parse_tree.zhat_funcs.vector_WIS_estimate": [[171, "seldonian-parse-tree-zhat-funcs-vector-wis-estimate"]], "seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate": [[172, "seldonian-parse-tree-zhat-funcs-vector-auxiliary-return-us-estimate"]], "seldonian.parse_tree.zhat_funcs.vector_confusion_matrix": [[173, "seldonian-parse-tree-zhat-funcs-vector-confusion-matrix"]], "seldonian.safety_test": [[174, "module-seldonian.safety_test"]], "seldonian.safety_test.safety_test": [[175, "module-seldonian.safety_test.safety_test"]], "seldonian.safety_test.safety_test.SafetyTest": [[176, "seldonian-safety-test-safety-test-safetytest"]], "seldonian.seldonian_algorithm": [[177, "module-seldonian.seldonian_algorithm"]], "seldonian.seldonian_algorithm.SeldonianAlgorithm": [[178, "seldonian-seldonian-algorithm-seldonianalgorithm"]], "seldonian.spec": [[179, "module-seldonian.spec"]], "seldonian.spec.RLSpec": [[180, "seldonian-spec-rlspec"]], "seldonian.spec.Spec": [[181, "seldonian-spec-spec"]], "seldonian.spec.SupervisedSpec": [[182, "seldonian-spec-supervisedspec"]], "seldonian.spec.createRLSpec": [[183, "seldonian-spec-createrlspec"]], "seldonian.spec.createSimpleSupervisedSpec": [[184, "seldonian-spec-createsimplesupervisedspec"]], "seldonian.spec.createSupervisedSpec": [[185, "seldonian-spec-createsupervisedspec"]], "seldonian.spec.validate_parse_trees": [[186, "seldonian-spec-validate-parse-trees"]], "seldonian.utils": [[187, "module-seldonian.utils"]], "seldonian.utils.RL_utils": [[188, "module-seldonian.utils.RL_utils"]], "seldonian.utils.RL_utils.argmax_multi": [[189, "seldonian-utils-rl-utils-argmax-multi"]], "seldonian.utils.RL_utils.clamp": [[190, "seldonian-utils-rl-utils-clamp"]], "seldonian.utils.RL_utils.error": [[191, "seldonian-utils-rl-utils-error"]], "seldonian.utils.io_utils": [[192, "module-seldonian.utils.io_utils"]], "seldonian.utils.io_utils.cmaes_logger": [[193, "seldonian-utils-io-utils-cmaes-logger"]], "seldonian.utils.io_utils.dir_path": [[194, "seldonian-utils-io-utils-dir-path"]], "seldonian.utils.io_utils.load_json": [[195, "seldonian-utils-io-utils-load-json"]], "seldonian.utils.io_utils.load_pickle": [[196, "seldonian-utils-io-utils-load-pickle"]], "seldonian.utils.io_utils.save_json": [[197, "seldonian-utils-io-utils-save-json"]], "seldonian.utils.io_utils.save_pickle": [[198, "seldonian-utils-io-utils-save-pickle"]], "seldonian.utils.plot_utils": [[199, "module-seldonian.utils.plot_utils"]], "seldonian.utils.plot_utils.plot_gradient_descent": [[200, "seldonian-utils-plot-utils-plot-gradient-descent"]], "seldonian.utils.stats_utils": [[201, "module-seldonian.utils.stats_utils"]], "seldonian.utils.stats_utils.custom_cumprod": [[202, "seldonian-utils-stats-utils-custom-cumprod"]], "seldonian.utils.stats_utils.softmax": [[203, "seldonian-utils-stats-utils-softmax"]], "seldonian.utils.stats_utils.stddev": [[204, "seldonian-utils-stats-utils-stddev"]], "seldonian.utils.stats_utils.tinv": [[205, "seldonian-utils-stats-utils-tinv"]], "seldonian.utils.stats_utils.weighted_sum_gamma": [[206, "seldonian-utils-stats-utils-weighted-sum-gamma"]], "seldonian.utils.tutorial_utils": [[207, "module-seldonian.utils.tutorial_utils"]], "seldonian.utils.tutorial_utils.generate_clipped_data": [[208, "seldonian-utils-tutorial-utils-generate-clipped-data"]], "seldonian.utils.tutorial_utils.generate_data": [[209, "seldonian-utils-tutorial-utils-generate-data"]], "seldonian.utils.tutorial_utils.make_synthetic_regression_dataset": [[210, "seldonian-utils-tutorial-utils-make-synthetic-regression-dataset"]], "seldonian.warnings": [[211, "module-seldonian.warnings"]], "seldonian.warnings.custom_warnings": [[212, "module-seldonian.warnings.custom_warnings"]], "seldonian.warnings.custom_warnings.custom_formatwarning": [[213, "seldonian-warnings-custom-warnings-custom-formatwarning"]], "API": [[214, "api"]], "Getting Started": [[215, "getting-started"]], "Installation": [[215, "installation"]], "A first tutorial": [[215, "a-first-tutorial"]], "Seldonian Engine documentation": [[216, "seldonian-engine-documentation"]], "Table of contents": [[216, "table-of-contents"]], "Overview": [[217, "overview"]], "Interface": [[217, "interface"]], "Spec object": [[217, "spec-object"]], "Dataset object": [[217, "dataset-object"]], "Model object": [[217, "model-object"]], "Behavioral constraints": [[217, "behavioral-constraints"]], "Constraint strings": [[217, "constraint-strings"]], "What does SA.run() do?": [[217, "what-does-sa-run-do"]], "Candidate Selection": [[217, "candidate-selection"]], "Safety Test": [[217, "safety-test"]]}, "indexentries": {"module": [[0, "module-seldonian"], [1, "module-seldonian.RL"], [2, "module-seldonian.RL.Agents"], [3, "module-seldonian.RL.Agents.Agent"], [5, "module-seldonian.RL.Agents.Bases"], [6, "module-seldonian.RL.Agents.Bases.Fourier"], [8, "module-seldonian.RL.Agents.Discrete_Random_Agent"], [10, "module-seldonian.RL.Agents.Function_Approximators"], [11, "module-seldonian.RL.Agents.Function_Approximators.Function_Approximator"], [13, "module-seldonian.RL.Agents.Function_Approximators.Linear_FA"], [16, "module-seldonian.RL.Agents.Function_Approximators.Table"], [20, "module-seldonian.RL.Agents.Parameterized_non_learning_softmax_agent"], [22, "module-seldonian.RL.Agents.Policies"], [23, "module-seldonian.RL.Agents.Policies.Policy"], [26, "module-seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea"], [28, "module-seldonian.RL.Agents.Policies.Softmax"], [32, "module-seldonian.RL.Agents.keyboard_gridworld"], [34, "module-seldonian.RL.Agents.mountain_car_rough_solution"], [36, "module-seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent"], [38, "module-seldonian.RL.Env_Description"], [39, "module-seldonian.RL.Env_Description.Env_Description"], [42, "module-seldonian.RL.Env_Description.Spaces"], [45, "module-seldonian.RL.RL_model"], [47, "module-seldonian.RL.RL_runner"], [54, "module-seldonian.RL.environments"], [55, "module-seldonian.RL.environments.Environment"], [57, "module-seldonian.RL.environments.gridworld"], [59, "module-seldonian.RL.environments.mountaincar"], [61, "module-seldonian.RL.environments.n_step_mountaincar"], [63, "module-seldonian.RL.generate_gridworld_episodes"], [65, "module-seldonian.RL.generate_mountaincar_episodes"], [67, "module-seldonian.RL.hyperparams_and_settings"], [69, "module-seldonian.candidate_selection"], [70, "module-seldonian.candidate_selection.candidate_selection"], [72, "module-seldonian.dataset"], [83, "module-seldonian.hyperparam_search"], [85, "module-seldonian.models"], [86, "module-seldonian.models.models"], [99, "module-seldonian.models.objectives"], [119, "module-seldonian.models.sklearn_lr"], [121, "module-seldonian.models.sklearn_model"], [124, "module-seldonian.models.trees"], [125, "module-seldonian.models.trees.skrandomforest_model"], [130, "module-seldonian.models.trees.sktree_model"], [135, "module-seldonian.optimizers"], [136, "module-seldonian.optimizers.gradient_descent"], [139, "module-seldonian.parse_tree"], [140, "module-seldonian.parse_tree.nodes"], [151, "module-seldonian.parse_tree.operators"], [152, "module-seldonian.parse_tree.parse_tree"], [155, "module-seldonian.parse_tree.zhat_funcs"], [174, "module-seldonian.safety_test"], [175, "module-seldonian.safety_test.safety_test"], [177, "module-seldonian.seldonian_algorithm"], [179, "module-seldonian.spec"], [187, "module-seldonian.utils"], [188, "module-seldonian.utils.RL_utils"], [192, "module-seldonian.utils.io_utils"], [199, "module-seldonian.utils.plot_utils"], [201, "module-seldonian.utils.stats_utils"], [207, "module-seldonian.utils.tutorial_utils"], [211, "module-seldonian.warnings"], [212, "module-seldonian.warnings.custom_warnings"]], "seldonian": [[0, "module-seldonian"]], "seldonian.rl": [[1, "module-seldonian.RL"]], "seldonian.rl.agents": [[2, "module-seldonian.RL.Agents"]], "seldonian.rl.agents.agent": [[3, "module-seldonian.RL.Agents.Agent"]], "agent (class in seldonian.rl.agents.agent)": [[4, "seldonian.RL.Agents.Agent.Agent"]], "__init__() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.__init__"]], "__repr__() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.__repr__"]], "choose_action() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.choose_action"]], "get_params() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.get_params"]], "get_prob_this_action() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.get_prob_this_action"]], "set_new_params() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.set_new_params"]], "update() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.update"]], "seldonian.rl.agents.bases": [[5, "module-seldonian.RL.Agents.Bases"]], "seldonian.rl.agents.bases.fourier": [[6, "module-seldonian.RL.Agents.Bases.Fourier"]], "fourier (class in seldonian.rl.agents.bases.fourier)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier"]], "__init__() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.__init__"]], "__repr__() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.__repr__"]], "calculate_num_features() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.calculate_num_features"]], "construct_basis_matrix() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.construct_basis_matrix"]], "get_features() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.get_features"]], "get_normalized_observation() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.get_normalized_observation"]], "seldonian.rl.agents.discrete_random_agent": [[8, "module-seldonian.RL.Agents.Discrete_Random_Agent"]], "discrete_random_agent (class in seldonian.rl.agents.discrete_random_agent)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent"]], "__init__() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.__init__"]], "__repr__() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.__repr__"]], "choose_action() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.choose_action"]], "get_params() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.get_params"]], "get_prob_this_action() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.get_prob_this_action"]], "set_new_params() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.set_new_params"]], "update() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.update"]], "seldonian.rl.agents.function_approximators": [[10, "module-seldonian.RL.Agents.Function_Approximators"]], "seldonian.rl.agents.function_approximators.function_approximator": [[11, "module-seldonian.RL.Agents.Function_Approximators.Function_Approximator"]], "function_approximator (class in seldonian.rl.agents.function_approximators.function_approximator)": [[12, "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator"]], "__init__() (function_approximator method)": [[12, "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator.__init__"]], "__repr__() (function_approximator method)": [[12, "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator.__repr__"]], "set_new_params() (function_approximator method)": [[12, "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator.set_new_params"]], "seldonian.rl.agents.function_approximators.linear_fa": [[13, "module-seldonian.RL.Agents.Function_Approximators.Linear_FA"]], "linear_fa (class in seldonian.rl.agents.function_approximators.linear_fa)": [[14, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA"]], "__init__() (linear_fa method)": [[14, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA.__init__"]], "__repr__() (linear_fa method)": [[14, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA.__repr__"]], "set_new_params() (linear_fa method)": [[14, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA.set_new_params"]], "linear_state_action_value_fa (class in seldonian.rl.agents.function_approximators.linear_fa)": [[15, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA"]], "__init__() (linear_state_action_value_fa method)": [[15, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA.__init__"]], "__repr__() (linear_state_action_value_fa method)": [[15, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA.__repr__"]], "set_new_params() (linear_state_action_value_fa method)": [[15, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA.set_new_params"]], "seldonian.rl.agents.function_approximators.table": [[16, "module-seldonian.RL.Agents.Function_Approximators.Table"]], "q_table (class in seldonian.rl.agents.function_approximators.table)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table"]], "__init__() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.__init__"]], "__repr__() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.__repr__"]], "from_environment_state_to_0_indexed_state() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.from_environment_state_to_0_indexed_state"]], "get_action_values_given_state() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.get_action_values_given_state"]], "get_action_values_given_zero_indexed_state() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.get_action_values_given_zero_indexed_state"]], "set_new_params() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.set_new_params"]], "table (class in seldonian.rl.agents.function_approximators.table)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table"]], "__init__() (table method)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table.__init__"]], "__repr__() (table method)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table.__repr__"]], "from_environment_state_to_0_indexed_state() (table method)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table.from_environment_state_to_0_indexed_state"]], "set_new_params() (table method)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table.set_new_params"]], "construct_q_table_from_env_description() (in module seldonian.rl.agents.function_approximators.table)": [[19, "seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description"]], "seldonian.rl.agents.parameterized_non_learning_softmax_agent": [[20, "module-seldonian.RL.Agents.Parameterized_non_learning_softmax_agent"]], "parameterized_non_learning_softmax_agent (class in seldonian.rl.agents.parameterized_non_learning_softmax_agent)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent"]], "__init__() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.__init__"]], "__repr__() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.__repr__"]], "choose_action() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.choose_action"]], "get_action_values() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.get_action_values"]], "get_params() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.get_params"]], "get_prob_this_action() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.get_prob_this_action"]], "set_new_params() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.set_new_params"]], "update() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.update"]], "seldonian.rl.agents.policies": [[22, "module-seldonian.RL.Agents.Policies"]], "seldonian.rl.agents.policies.policy": [[23, "module-seldonian.RL.Agents.Policies.Policy"]], "discrete_action_policy (class in seldonian.rl.agents.policies.policy)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy"]], "__init__() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.__init__"]], "__repr__() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.__repr__"]], "choose_action() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.choose_action"]], "construct_basis_and_linear_fa() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.construct_basis_and_linear_FA"]], "from_0_indexed_action_to_environment_action() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.from_0_indexed_action_to_environment_action"]], "from_environment_action_to_0_indexed_action() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.from_environment_action_to_0_indexed_action"]], "get_action_values_given_state() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.get_action_values_given_state"]], "get_params() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.get_params"]], "get_prob_this_action() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.get_prob_this_action"]], "get_probs_from_observations_and_actions() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.get_probs_from_observations_and_actions"]], "make_state_action_fa() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.make_state_action_FA"]], "set_new_params() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.set_new_params"]], "policy (class in seldonian.rl.agents.policies.policy)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy"]], "__init__() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.__init__"]], "__repr__() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.__repr__"]], "choose_action() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.choose_action"]], "get_params() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.get_params"]], "get_prob_this_action() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.get_prob_this_action"]], "get_probs_from_observations_and_actions() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.get_probs_from_observations_and_actions"]], "set_new_params() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.set_new_params"]], "seldonian.rl.agents.policies.simglucosepolicyfixedarea": [[26, "module-seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea"]], "sigmoidpolicyfixedarea (class in seldonian.rl.agents.policies.simglucosepolicyfixedarea)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea"]], "__init__() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.__init__"]], "__repr__() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.__repr__"]], "choose_action() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.choose_action"]], "get_params() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.get_params"]], "get_prob_this_action() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.get_prob_this_action"]], "get_probs_from_observations_and_actions() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.get_probs_from_observations_and_actions"]], "set_new_params() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.set_new_params"]], "theta2crcf() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.theta2crcf"]], "seldonian.rl.agents.policies.softmax": [[28, "module-seldonian.RL.Agents.Policies.Softmax"]], "discretesoftmax (class in seldonian.rl.agents.policies.softmax)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax"]], "__init__() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.__init__"]], "__repr__() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.__repr__"]], "_arg() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax._arg"]], "_denom() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax._denom"]], "choose_action() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.choose_action"]], "choose_action_from_action_values() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.choose_action_from_action_values"]], "construct_basis_and_linear_fa() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.construct_basis_and_linear_FA"]], "from_0_indexed_action_to_environment_action() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.from_0_indexed_action_to_environment_action"]], "from_environment_action_to_0_indexed_action() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.from_environment_action_to_0_indexed_action"]], "get_action_probs_from_action_values() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_action_probs_from_action_values"]], "get_action_values_given_state() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_action_values_given_state"]], "get_e_to_the_something_terms() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_e_to_the_something_terms"]], "get_params() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_params"]], "get_prob_this_action() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_prob_this_action"]], "get_probs_from_observations_and_actions() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_probs_from_observations_and_actions"]], "make_state_action_fa() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.make_state_action_FA"]], "set_new_params() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.set_new_params"]], "mixedsoftmax (class in seldonian.rl.agents.policies.softmax)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax"]], "__init__() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.__init__"]], "__repr__() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.__repr__"]], "choose_action() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.choose_action"]], "choose_action_from_action_values() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.choose_action_from_action_values"]], "construct_basis_and_linear_fa() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.construct_basis_and_linear_FA"]], "from_0_indexed_action_to_environment_action() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.from_0_indexed_action_to_environment_action"]], "from_environment_action_to_0_indexed_action() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.from_environment_action_to_0_indexed_action"]], "get_action_probs_from_action_values() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_action_probs_from_action_values"]], "get_action_values_given_state() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_action_values_given_state"]], "get_e_to_the_something_terms() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_e_to_the_something_terms"]], "get_params() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_params"]], "get_prob_this_action() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_prob_this_action"]], "get_probs_from_observations_and_actions() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_probs_from_observations_and_actions"]], "make_state_action_fa() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.make_state_action_FA"]], "set_new_params() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.set_new_params"]], "softmax (class in seldonian.rl.agents.policies.softmax)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax"]], "__init__() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.__init__"]], "__repr__() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.__repr__"]], "choose_action() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.choose_action"]], "choose_action_from_action_values() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.choose_action_from_action_values"]], "construct_basis_and_linear_fa() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.construct_basis_and_linear_FA"]], "from_0_indexed_action_to_environment_action() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.from_0_indexed_action_to_environment_action"]], "from_environment_action_to_0_indexed_action() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.from_environment_action_to_0_indexed_action"]], "get_action_probs_from_action_values() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_action_probs_from_action_values"]], "get_action_values_given_state() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_action_values_given_state"]], "get_e_to_the_something_terms() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_e_to_the_something_terms"]], "get_params() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_params"]], "get_prob_this_action() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_prob_this_action"]], "get_probs_from_observations_and_actions() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_probs_from_observations_and_actions"]], "make_state_action_fa() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.make_state_action_FA"]], "set_new_params() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.set_new_params"]], "seldonian.rl.agents.keyboard_gridworld": [[32, "module-seldonian.RL.Agents.keyboard_gridworld"]], "keyboard_gridworld (class in seldonian.rl.agents.keyboard_gridworld)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld"]], "__init__() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.__init__"]], "__repr__() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.__repr__"]], "choose_action() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.choose_action"]], "get_params() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.get_params"]], "get_prob_this_action() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.get_prob_this_action"]], "set_new_params() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.set_new_params"]], "update() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.update"]], "seldonian.rl.agents.mountain_car_rough_solution": [[34, "module-seldonian.RL.Agents.mountain_car_rough_solution"]], "mountain_car_rough_solution (class in seldonian.rl.agents.mountain_car_rough_solution)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution"]], "__init__() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.__init__"]], "__repr__() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.__repr__"]], "choose_action() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.choose_action"]], "get_params() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.get_params"]], "get_prob_this_action() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.get_prob_this_action"]], "set_new_params() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.set_new_params"]], "update() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.update"]], "seldonian.rl.agents.simglucose_custom_fixedarea_random_agent": [[36, "module-seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent"]], "simglucosefixedareaagent (class in seldonian.rl.agents.simglucose_custom_fixedarea_random_agent)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent"]], "__init__() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.__init__"]], "__repr__() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.__repr__"]], "choose_action() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.choose_action"]], "get_params() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.get_params"]], "get_prob_this_action() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.get_prob_this_action"]], "set_new_params() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.set_new_params"]], "update() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.update"]], "seldonian.rl.env_description": [[38, "module-seldonian.RL.Env_Description"]], "seldonian.rl.env_description.env_description": [[39, "module-seldonian.RL.Env_Description.Env_Description"]], "env_description (class in seldonian.rl.env_description.env_description)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description"]], "__init__() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.__init__"]], "__repr__() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.__repr__"]], "get_min_action() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_min_action"]], "get_min_state() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_min_state"]], "get_num_actions() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_num_actions"]], "get_num_observation_dims() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_num_observation_dims"]], "get_num_states() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_num_states"]], "check_space_type() (in module seldonian.rl.env_description.env_description)": [[41, "seldonian.RL.Env_Description.Env_Description.check_space_type"]], "seldonian.rl.env_description.spaces": [[42, "module-seldonian.RL.Env_Description.Spaces"]], "continuous_space (class in seldonian.rl.env_description.spaces)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space"]], "__init__() (continuous_space method)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space.__init__"]], "__repr__() (continuous_space method)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space.__repr__"]], "check_bounds_valid() (continuous_space method)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space.check_bounds_valid"]], "get_num_dims() (continuous_space method)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space.get_num_dims"]], "discrete_space (class in seldonian.rl.env_description.spaces)": [[44, "seldonian.RL.Env_Description.Spaces.Discrete_Space"]], "__init__() (discrete_space method)": [[44, "seldonian.RL.Env_Description.Spaces.Discrete_Space.__init__"]], "__repr__() (discrete_space method)": [[44, "seldonian.RL.Env_Description.Spaces.Discrete_Space.__repr__"]], "get_num_values() (discrete_space method)": [[44, "seldonian.RL.Env_Description.Spaces.Discrete_Space.get_num_values"]], "seldonian.rl.rl_model": [[45, "module-seldonian.RL.RL_model"]], "rl_model (class in seldonian.rl.rl_model)": [[46, "seldonian.RL.RL_model.RL_model"]], "__init__() (rl_model method)": [[46, "seldonian.RL.RL_model.RL_model.__init__"]], "__repr__() (rl_model method)": [[46, "seldonian.RL.RL_model.RL_model.__repr__"]], "get_probs_from_observations_and_actions() (rl_model method)": [[46, "seldonian.RL.RL_model.RL_model.get_probs_from_observations_and_actions"]], "seldonian.rl.rl_runner": [[47, "module-seldonian.RL.RL_runner"]], "create_agent_fromdict() (in module seldonian.rl.rl_runner)": [[48, "seldonian.RL.RL_runner.create_agent_fromdict"]], "run_episode() (in module seldonian.rl.rl_runner)": [[49, "seldonian.RL.RL_runner.run_episode"]], "run_episode_from_dict() (in module seldonian.rl.rl_runner)": [[50, "seldonian.RL.RL_runner.run_episode_from_dict"]], "run_episodes_par() (in module seldonian.rl.rl_runner)": [[51, "seldonian.RL.RL_runner.run_episodes_par"]], "run_trial() (in module seldonian.rl.rl_runner)": [[52, "seldonian.RL.RL_runner.run_trial"]], "run_trial_given_agent_and_env() (in module seldonian.rl.rl_runner)": [[53, "seldonian.RL.RL_runner.run_trial_given_agent_and_env"]], "seldonian.rl.environments": [[54, "module-seldonian.RL.environments"]], "seldonian.rl.environments.environment": [[55, "module-seldonian.RL.environments.Environment"]], "environment (class in seldonian.rl.environments.environment)": [[56, "seldonian.RL.environments.Environment.Environment"]], "__init__() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.__init__"]], "__repr__() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.__repr__"]], "get_env_description() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.get_env_description"]], "get_observation() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.get_observation"]], "reset() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.reset"]], "start_visualizing() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.start_visualizing"]], "stop_visualizing() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.stop_visualizing"]], "terminated() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.terminated"]], "transition() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.transition"]], "visualize() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.visualize"]], "seldonian.rl.environments.gridworld": [[57, "module-seldonian.RL.environments.gridworld"]], "gridworld (class in seldonian.rl.environments.gridworld)": [[58, "seldonian.RL.environments.gridworld.Gridworld"]], "__init__() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.__init__"]], "__repr__() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.__repr__"]], "create_env_description() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.create_env_description"]], "get_env_description() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.get_env_description"]], "get_observation() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.get_observation"]], "is_in_goal_state() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.is_in_goal_state"]], "reset() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.reset"]], "start_visualizing() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.start_visualizing"]], "stop_visualizing() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.stop_visualizing"]], "terminated() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.terminated"]], "transition() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.transition"]], "update_position() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.update_position"]], "visualize() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.visualize"]], "seldonian.rl.environments.mountaincar": [[59, "module-seldonian.RL.environments.mountaincar"]], "mountaincar (class in seldonian.rl.environments.mountaincar)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar"]], "__init__() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.__init__"]], "__repr__() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.__repr__"]], "get_env_description() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.get_env_description"]], "get_observation() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.get_observation"]], "reset() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.reset"]], "start_visualizing() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.start_visualizing"]], "stop_visualizing() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.stop_visualizing"]], "terminated() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.terminated"]], "transition() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.transition"]], "visualize() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.visualize"]], "seldonian.rl.environments.n_step_mountaincar": [[61, "module-seldonian.RL.environments.n_step_mountaincar"]], "n_step_mountaincar (class in seldonian.rl.environments.n_step_mountaincar)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar"]], "__init__() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.__init__"]], "__repr__() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.__repr__"]], "get_env_description() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.get_env_description"]], "get_observation() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.get_observation"]], "reset() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.reset"]], "start_visualizing() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.start_visualizing"]], "stop_visualizing() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.stop_visualizing"]], "terminated() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.terminated"]], "transition() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.transition"]], "visualize() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.visualize"]], "seldonian.rl.generate_gridworld_episodes": [[63, "module-seldonian.RL.generate_gridworld_episodes"]], "main() (in module seldonian.rl.generate_gridworld_episodes)": [[64, "seldonian.RL.generate_gridworld_episodes.main"]], "seldonian.rl.generate_mountaincar_episodes": [[65, "module-seldonian.RL.generate_mountaincar_episodes"]], "main() (in module seldonian.rl.generate_mountaincar_episodes)": [[66, "seldonian.RL.generate_mountaincar_episodes.main"]], "seldonian.rl.hyperparams_and_settings": [[67, "module-seldonian.RL.hyperparams_and_settings"]], "define_hyperparameter_and_setting_dict() (in module seldonian.rl.hyperparams_and_settings)": [[68, "seldonian.RL.hyperparams_and_settings.define_hyperparameter_and_setting_dict"]], "seldonian.candidate_selection": [[69, "module-seldonian.candidate_selection"]], "seldonian.candidate_selection.candidate_selection": [[70, "module-seldonian.candidate_selection.candidate_selection"]], "candidateselection (class in seldonian.candidate_selection.candidate_selection)": [[71, "seldonian.candidate_selection.candidate_selection.CandidateSelection"]], "__init__() (candidateselection method)": [[71, "seldonian.candidate_selection.candidate_selection.CandidateSelection.__init__"]], "__repr__() (candidateselection method)": [[71, "seldonian.candidate_selection.candidate_selection.CandidateSelection.__repr__"]], "calculate_batches() (candidateselection method)": [[71, "seldonian.candidate_selection.candidate_selection.CandidateSelection.calculate_batches"]], "evaluate_primary_objective() (candidateselection method)": [[71, "seldonian.candidate_selection.candidate_selection.CandidateSelection.evaluate_primary_objective"]], "get_constraint_upper_bounds() (candidateselection method)": [[71, "seldonian.candidate_selection.candidate_selection.CandidateSelection.get_constraint_upper_bounds"]], "get_importance_weights() (candidateselection method)": [[71, "seldonian.candidate_selection.candidate_selection.CandidateSelection.get_importance_weights"]], "objective_with_barrier() (candidateselection method)": [[71, "seldonian.candidate_selection.candidate_selection.CandidateSelection.objective_with_barrier"]], "run() (candidateselection method)": [[71, "seldonian.candidate_selection.candidate_selection.CandidateSelection.run"]], "seldonian.dataset": [[72, "module-seldonian.dataset"]], "dataset (class in seldonian.dataset)": [[73, "seldonian.dataset.DataSet"]], "__init__() (dataset method)": [[73, "seldonian.dataset.DataSet.__init__"]], "__repr__() (dataset method)": [[73, "seldonian.dataset.DataSet.__repr__"]], "datasetloader (class in seldonian.dataset)": [[74, "seldonian.dataset.DataSetLoader"]], "__init__() (datasetloader method)": [[74, "seldonian.dataset.DataSetLoader.__init__"]], "__repr__() (datasetloader method)": [[74, "seldonian.dataset.DataSetLoader.__repr__"]], "load_rl_dataset_from_csv() (datasetloader method)": [[74, "seldonian.dataset.DataSetLoader.load_RL_dataset_from_csv"]], "load_rl_dataset_from_episode_file() (datasetloader method)": [[74, "seldonian.dataset.DataSetLoader.load_RL_dataset_from_episode_file"]], "load_supervised_dataset() (datasetloader method)": [[74, "seldonian.dataset.DataSetLoader.load_supervised_dataset"]], "episode (class in seldonian.dataset)": [[75, "seldonian.dataset.Episode"]], "__init__() (episode method)": [[75, "seldonian.dataset.Episode.__init__"]], "__repr__() (episode method)": [[75, "seldonian.dataset.Episode.__repr__"]], "metadata (class in seldonian.dataset)": [[76, "seldonian.dataset.MetaData"]], "__init__() (metadata method)": [[76, "seldonian.dataset.MetaData.__init__"]], "__repr__() (metadata method)": [[76, "seldonian.dataset.MetaData.__repr__"]], "rldataset (class in seldonian.dataset)": [[77, "seldonian.dataset.RLDataSet"]], "__init__() (rldataset method)": [[77, "seldonian.dataset.RLDataSet.__init__"]], "__repr__() (rldataset method)": [[77, "seldonian.dataset.RLDataSet.__repr__"]], "rlmetadata (class in seldonian.dataset)": [[78, "seldonian.dataset.RLMetaData"]], "__init__() (rlmetadata method)": [[78, "seldonian.dataset.RLMetaData.__init__"]], "__repr__() (rlmetadata method)": [[78, "seldonian.dataset.RLMetaData.__repr__"]], "superviseddataset (class in seldonian.dataset)": [[79, "seldonian.dataset.SupervisedDataSet"]], "__init__() (superviseddataset method)": [[79, "seldonian.dataset.SupervisedDataSet.__init__"]], "__repr__() (superviseddataset method)": [[79, "seldonian.dataset.SupervisedDataSet.__repr__"]], "supervisedmetadata (class in seldonian.dataset)": [[80, "seldonian.dataset.SupervisedMetaData"]], "__init__() (supervisedmetadata method)": [[80, "seldonian.dataset.SupervisedMetaData.__init__"]], "__repr__() (supervisedmetadata method)": [[80, "seldonian.dataset.SupervisedMetaData.__repr__"]], "load_rl_metadata() (in module seldonian.dataset)": [[81, "seldonian.dataset.load_RL_metadata"]], "load_supervised_metadata() (in module seldonian.dataset)": [[82, "seldonian.dataset.load_supervised_metadata"]], "seldonian.hyperparam_search": [[83, "module-seldonian.hyperparam_search"]], "hyperparamsearch (class in seldonian.hyperparam_search)": [[84, "seldonian.hyperparam_search.HyperparamSearch"]], "__init__() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.__init__"]], "__repr__() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.__repr__"]], "bootstrap_sample_dataset() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.bootstrap_sample_dataset"]], "candidate_selection() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.candidate_selection"]], "create_dataset() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.create_dataset"]], "est_prob_pass() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.est_prob_pass"]], "find_best_hyperparams() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.find_best_hyperparams"]], "get_initial_solution() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.get_initial_solution"]], "get_safety_size() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.get_safety_size"]], "run_core() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.run_core"]], "run_safety_test() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.run_safety_test"]], "safety_test() (hyperparamsearch method)": [[84, "seldonian.hyperparam_search.HyperparamSearch.safety_test"]], "seldonian.models": [[85, "module-seldonian.models"]], "seldonian.models.models": [[86, "module-seldonian.models.models"]], "baselogisticregressionmodel (class in seldonian.models.models)": [[87, "seldonian.models.models.BaseLogisticRegressionModel"]], "__init__() (baselogisticregressionmodel method)": [[87, "seldonian.models.models.BaseLogisticRegressionModel.__init__"]], "__repr__() (baselogisticregressionmodel method)": [[87, "seldonian.models.models.BaseLogisticRegressionModel.__repr__"]], "fit() (baselogisticregressionmodel method)": [[87, "seldonian.models.models.BaseLogisticRegressionModel.fit"]], "binarylogisticregressionmodel (class in seldonian.models.models)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel"]], "__init__() (binarylogisticregressionmodel method)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel.__init__"]], "__repr__() (binarylogisticregressionmodel method)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel.__repr__"]], "fit() (binarylogisticregressionmodel method)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel.fit"]], "predict() (binarylogisticregressionmodel method)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel.predict"]], "boundedlinearregressionmodel (class in seldonian.models.models)": [[89, "seldonian.models.models.BoundedLinearRegressionModel"]], "__init__() (boundedlinearregressionmodel method)": [[89, "seldonian.models.models.BoundedLinearRegressionModel.__init__"]], "__repr__() (boundedlinearregressionmodel method)": [[89, "seldonian.models.models.BoundedLinearRegressionModel.__repr__"]], "fit() (boundedlinearregressionmodel method)": [[89, "seldonian.models.models.BoundedLinearRegressionModel.fit"]], "predict() (boundedlinearregressionmodel method)": [[89, "seldonian.models.models.BoundedLinearRegressionModel.predict"]], "classificationmodel (class in seldonian.models.models)": [[90, "seldonian.models.models.ClassificationModel"]], "__init__() (classificationmodel method)": [[90, "seldonian.models.models.ClassificationModel.__init__"]], "__repr__() (classificationmodel method)": [[90, "seldonian.models.models.ClassificationModel.__repr__"]], "dummyclassifiermodel (class in seldonian.models.models)": [[91, "seldonian.models.models.DummyClassifierModel"]], "__init__() (dummyclassifiermodel method)": [[91, "seldonian.models.models.DummyClassifierModel.__init__"]], "__repr__() (dummyclassifiermodel method)": [[91, "seldonian.models.models.DummyClassifierModel.__repr__"]], "predict() (dummyclassifiermodel method)": [[91, "seldonian.models.models.DummyClassifierModel.predict"]], "linearregressionmodel (class in seldonian.models.models)": [[92, "seldonian.models.models.LinearRegressionModel"]], "__init__() (linearregressionmodel method)": [[92, "seldonian.models.models.LinearRegressionModel.__init__"]], "__repr__() (linearregressionmodel method)": [[92, "seldonian.models.models.LinearRegressionModel.__repr__"]], "fit() (linearregressionmodel method)": [[92, "seldonian.models.models.LinearRegressionModel.fit"]], "predict() (linearregressionmodel method)": [[92, "seldonian.models.models.LinearRegressionModel.predict"]], "linearregressionmodellistfeatures (class in seldonian.models.models)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures"]], "__init__() (linearregressionmodellistfeatures method)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures.__init__"]], "__repr__() (linearregressionmodellistfeatures method)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures.__repr__"]], "fit() (linearregressionmodellistfeatures method)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures.fit"]], "predict() (linearregressionmodellistfeatures method)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures.predict"]], "multiclasslogisticregressionmodel (class in seldonian.models.models)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel"]], "__init__() (multiclasslogisticregressionmodel method)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel.__init__"]], "__repr__() (multiclasslogisticregressionmodel method)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel.__repr__"]], "fit() (multiclasslogisticregressionmodel method)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel.fit"]], "predict() (multiclasslogisticregressionmodel method)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel.predict"]], "randomclassifiermodel (class in seldonian.models.models)": [[95, "seldonian.models.models.RandomClassifierModel"]], "__init__() (randomclassifiermodel method)": [[95, "seldonian.models.models.RandomClassifierModel.__init__"]], "__repr__() (randomclassifiermodel method)": [[95, "seldonian.models.models.RandomClassifierModel.__repr__"]], "predict() (randomclassifiermodel method)": [[95, "seldonian.models.models.RandomClassifierModel.predict"]], "regressionmodel (class in seldonian.models.models)": [[96, "seldonian.models.models.RegressionModel"]], "__init__() (regressionmodel method)": [[96, "seldonian.models.models.RegressionModel.__init__"]], "__repr__() (regressionmodel method)": [[96, "seldonian.models.models.RegressionModel.__repr__"]], "seldonianmodel (class in seldonian.models.models)": [[97, "seldonian.models.models.SeldonianModel"]], "__init__() (seldonianmodel method)": [[97, "seldonian.models.models.SeldonianModel.__init__"]], "__repr__() (seldonianmodel method)": [[97, "seldonian.models.models.SeldonianModel.__repr__"]], "supervisedmodel (class in seldonian.models.models)": [[98, "seldonian.models.models.SupervisedModel"]], "__init__() (supervisedmodel method)": [[98, "seldonian.models.models.SupervisedModel.__init__"]], "__repr__() (supervisedmodel method)": [[98, "seldonian.models.models.SupervisedModel.__repr__"]], "seldonian.models.objectives": [[99, "module-seldonian.models.objectives"]], "error_rate() (in module seldonian.models.objectives)": [[100, "seldonian.models.objectives.Error_Rate"]], "false_negative_rate() (in module seldonian.models.objectives)": [[101, "seldonian.models.objectives.False_Negative_Rate"]], "false_positive_rate() (in module seldonian.models.objectives)": [[102, "seldonian.models.objectives.False_Positive_Rate"]], "is_estimate() (in module seldonian.models.objectives)": [[103, "seldonian.models.objectives.IS_estimate"]], "mean_error() (in module seldonian.models.objectives)": [[104, "seldonian.models.objectives.Mean_Error"]], "mean_squared_error() (in module seldonian.models.objectives)": [[105, "seldonian.models.objectives.Mean_Squared_Error"]], "negative_rate() (in module seldonian.models.objectives)": [[106, "seldonian.models.objectives.Negative_Rate"]], "pdis_estimate() (in module seldonian.models.objectives)": [[107, "seldonian.models.objectives.PDIS_estimate"]], "positive_rate() (in module seldonian.models.objectives)": [[108, "seldonian.models.objectives.Positive_Rate"]], "true_negative_rate() (in module seldonian.models.objectives)": [[109, "seldonian.models.objectives.True_Negative_Rate"]], "true_positive_rate() (in module seldonian.models.objectives)": [[110, "seldonian.models.objectives.True_Positive_Rate"]], "us_estimate() (in module seldonian.models.objectives)": [[111, "seldonian.models.objectives.US_estimate"]], "wis_estimate() (in module seldonian.models.objectives)": [[112, "seldonian.models.objectives.WIS_estimate"]], "binary_logistic_loss() (in module seldonian.models.objectives)": [[113, "seldonian.models.objectives.binary_logistic_loss"]], "confusion_matrix() (in module seldonian.models.objectives)": [[114, "seldonian.models.objectives.confusion_matrix"]], "gradient_bounded_squared_error() (in module seldonian.models.objectives)": [[115, "seldonian.models.objectives.gradient_Bounded_Squared_Error"]], "gradient_mean_squared_error() (in module seldonian.models.objectives)": [[116, "seldonian.models.objectives.gradient_Mean_Squared_Error"]], "gradient_binary_logistic_loss() (in module seldonian.models.objectives)": [[117, "seldonian.models.objectives.gradient_binary_logistic_loss"]], "multiclass_logistic_loss() (in module seldonian.models.objectives)": [[118, "seldonian.models.objectives.multiclass_logistic_loss"]], "seldonian.models.sklearn_lr": [[119, "module-seldonian.models.sklearn_lr"]], "sklearnlinearregressor (class in seldonian.models.sklearn_lr)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor"]], "__init__() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.__init__"]], "__repr__() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.__repr__"]], "backward_pass() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.backward_pass"]], "create_model() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.create_model"]], "forward_pass() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.forward_pass"]], "get_model_params() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.get_model_params"]], "predict() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.predict"]], "update_model_params() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.update_model_params"]], "seldonian.models.sklearn_model": [[121, "module-seldonian.models.sklearn_model"]], "supervisedsklearnbasemodel (class in seldonian.models.sklearn_model)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel"]], "__init__() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.__init__"]], "__repr__() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.__repr__"]], "backward_pass() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.backward_pass"]], "create_model() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.create_model"]], "forward_pass() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.forward_pass"]], "get_model_params() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.get_model_params"]], "predict() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.predict"]], "update_model_params() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.update_model_params"]], "sklearn_predict_vjp() (in module seldonian.models.sklearn_model)": [[123, "seldonian.models.sklearn_model.sklearn_predict_vjp"]], "seldonian.models.trees": [[124, "module-seldonian.models.trees"]], "seldonian.models.trees.skrandomforest_model": [[125, "module-seldonian.models.trees.skrandomforest_model"]], "seldonianrandomforest (class in seldonian.models.trees.skrandomforest_model)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest"]], "__init__() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.__init__"]], "__repr__() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.__repr__"]], "fit() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.fit"]], "forward_pass() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.forward_pass"]], "get_jacobian() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.get_jacobian"]], "get_leaf_node_probs() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.get_leaf_node_probs"]], "predict() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.predict"]], "set_leaf_node_values() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.set_leaf_node_values"]], "probs2theta() (in module seldonian.models.trees.skrandomforest_model)": [[127, "seldonian.models.trees.skrandomforest_model.probs2theta"]], "sigmoid() (in module seldonian.models.trees.skrandomforest_model)": [[128, "seldonian.models.trees.skrandomforest_model.sigmoid"]], "sklearn_predict_vjp() (in module seldonian.models.trees.skrandomforest_model)": [[129, "seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp"]], "seldonian.models.trees.sktree_model": [[130, "module-seldonian.models.trees.sktree_model"]], "seldoniandecisiontree (class in seldonian.models.trees.sktree_model)": [[131, "seldonian.models.trees.sktree_model.SeldonianDecisionTree"]], "__init__() (seldoniandecisiontree method)": [[131, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.__init__"]], "__repr__() (seldoniandecisiontree method)": [[131, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.__repr__"]], "fit() (seldoniandecisiontree method)": [[131, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.fit"]], "forward_pass() (seldoniandecisiontree method)": [[131, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.forward_pass"]], "get_jacobian() (seldoniandecisiontree method)": [[131, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.get_jacobian"]], "get_leaf_node_probs() (seldoniandecisiontree method)": [[131, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.get_leaf_node_probs"]], "predict() (seldoniandecisiontree method)": [[131, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.predict"]], "set_leaf_node_values() (seldoniandecisiontree method)": [[131, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.set_leaf_node_values"]], "probs2theta() (in module seldonian.models.trees.sktree_model)": [[132, "seldonian.models.trees.sktree_model.probs2theta"]], "sigmoid() (in module seldonian.models.trees.sktree_model)": [[133, "seldonian.models.trees.sktree_model.sigmoid"]], "sklearn_predict_vjp() (in module seldonian.models.trees.sktree_model)": [[134, "seldonian.models.trees.sktree_model.sklearn_predict_vjp"]], "seldonian.optimizers": [[135, "module-seldonian.optimizers"]], "seldonian.optimizers.gradient_descent": [[136, "module-seldonian.optimizers.gradient_descent"]], "gradient_descent_adam() (in module seldonian.optimizers.gradient_descent)": [[137, "seldonian.optimizers.gradient_descent.gradient_descent_adam"]], "setup_gradients() (in module seldonian.optimizers.gradient_descent)": [[138, "seldonian.optimizers.gradient_descent.setup_gradients"]], "seldonian.parse_tree": [[139, "module-seldonian.parse_tree"]], "seldonian.parse_tree.nodes": [[140, "module-seldonian.parse_tree.nodes"]], "basenode (class in seldonian.parse_tree.nodes)": [[141, "seldonian.parse_tree.nodes.BaseNode"]], "__init__() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.__init__"]], "__repr__() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.__repr__"]], "calculate_bounds() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.calculate_bounds"]], "calculate_data_forbound() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.calculate_data_forbound"]], "calculate_value() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.calculate_value"]], "compute_hc_lowerbound() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.compute_HC_upperbound"]], "mask_data() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.mask_data"]], "predict_hc_lowerbound() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.predict_HC_upperbound"]], "zhat() (basenode method)": [[141, "seldonian.parse_tree.nodes.BaseNode.zhat"]], "cvarsqebasenode (class in seldonian.parse_tree.nodes)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode"]], "__init__() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.__init__"]], "__repr__() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.__repr__"]], "calculate_bounds() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.calculate_bounds"]], "calculate_data_forbound() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.calculate_data_forbound"]], "calculate_value() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.calculate_value"]], "compute_hc_lowerbound() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.compute_HC_upperbound"]], "mask_data() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.mask_data"]], "predict_hc_lowerbound() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.predict_HC_upperbound"]], "zhat() (cvarsqebasenode method)": [[142, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.zhat"]], "confusionmatrixbasenode (class in seldonian.parse_tree.nodes)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode"]], "__init__() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.__init__"]], "__repr__() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.__repr__"]], "calculate_bounds() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.calculate_bounds"]], "calculate_data_forbound() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.calculate_data_forbound"]], "calculate_value() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.calculate_value"]], "compute_hc_lowerbound() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.compute_HC_upperbound"]], "mask_data() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.mask_data"]], "predict_hc_lowerbound() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.predict_HC_upperbound"]], "zhat() (confusionmatrixbasenode method)": [[143, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.zhat"]], "constantnode (class in seldonian.parse_tree.nodes)": [[144, "seldonian.parse_tree.nodes.ConstantNode"]], "__init__() (constantnode method)": [[144, "seldonian.parse_tree.nodes.ConstantNode.__init__"]], "__repr__() (constantnode method)": [[144, "seldonian.parse_tree.nodes.ConstantNode.__repr__"]], "internalnode (class in seldonian.parse_tree.nodes)": [[145, "seldonian.parse_tree.nodes.InternalNode"]], "__init__() (internalnode method)": [[145, "seldonian.parse_tree.nodes.InternalNode.__init__"]], "__repr__() (internalnode method)": [[145, "seldonian.parse_tree.nodes.InternalNode.__repr__"]], "medcustombasenode (class in seldonian.parse_tree.nodes)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode"]], "__init__() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.__init__"]], "__repr__() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.__repr__"]], "calculate_bounds() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.calculate_bounds"]], "calculate_data_forbound() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.calculate_data_forbound"]], "calculate_value() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.calculate_value"]], "compute_hc_lowerbound() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.compute_HC_upperbound"]], "mask_data() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.mask_data"]], "precalculate_data() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.precalculate_data"]], "predict_hc_lowerbound() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.predict_HC_upperbound"]], "zhat() (medcustombasenode method)": [[146, "seldonian.parse_tree.nodes.MEDCustomBaseNode.zhat"]], "multiclassbasenode (class in seldonian.parse_tree.nodes)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode"]], "__init__() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.__init__"]], "__repr__() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.__repr__"]], "calculate_bounds() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.calculate_bounds"]], "calculate_data_forbound() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.calculate_data_forbound"]], "calculate_value() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.calculate_value"]], "compute_hc_lowerbound() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.compute_HC_upperbound"]], "mask_data() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.mask_data"]], "predict_hc_lowerbound() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.predict_HC_upperbound"]], "zhat() (multiclassbasenode method)": [[147, "seldonian.parse_tree.nodes.MultiClassBaseNode.zhat"]], "newpolicyperformancebasenode (class in seldonian.parse_tree.nodes)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode"]], "__init__() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.__init__"]], "__repr__() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.__repr__"]], "calculate_bounds() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.calculate_bounds"]], "calculate_data_forbound() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.calculate_data_forbound"]], "calculate_value() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.calculate_value"]], "compute_hc_lowerbound() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.compute_HC_upperbound"]], "mask_data() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.mask_data"]], "predict_hc_lowerbound() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.predict_HC_upperbound"]], "zhat() (newpolicyperformancebasenode method)": [[148, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.zhat"]], "node (class in seldonian.parse_tree.nodes)": [[149, "seldonian.parse_tree.nodes.Node"]], "__init__() (node method)": [[149, "seldonian.parse_tree.nodes.Node.__init__"]], "__repr__() (node method)": [[149, "seldonian.parse_tree.nodes.Node.__repr__"]], "rlaltrewardbasenode (class in seldonian.parse_tree.nodes)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode"]], "__init__() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.__init__"]], "__repr__() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.__repr__"]], "calculate_bounds() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.calculate_bounds"]], "calculate_data_forbound() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.calculate_data_forbound"]], "calculate_value() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.calculate_value"]], "compute_hc_lowerbound() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.compute_HC_upperbound"]], "mask_data() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.mask_data"]], "predict_hc_lowerbound() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.predict_HC_upperbound"]], "zhat() (rlaltrewardbasenode method)": [[150, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.zhat"]], "bounds_required_dict (in module seldonian.parse_tree.operators)": [[151, "seldonian.parse_tree.operators.bounds_required_dict"]], "not_supported_op_mapper (in module seldonian.parse_tree.operators)": [[151, "seldonian.parse_tree.operators.not_supported_op_mapper"]], "op_mapper (in module seldonian.parse_tree.operators)": [[151, "seldonian.parse_tree.operators.op_mapper"]], "seldonian.parse_tree.operators": [[151, "module-seldonian.parse_tree.operators"]], "seldonian.parse_tree.parse_tree": [[152, "module-seldonian.parse_tree.parse_tree"]], "parsetree (class in seldonian.parse_tree.parse_tree)": [[153, "seldonian.parse_tree.parse_tree.ParseTree"]], "__init__() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.__init__"]], "__repr__() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.__repr__"]], "_abs() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._abs"]], "_add() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._add"]], "_assign_bounds_helper() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._assign_bounds_helper"]], "_assign_deltas_helper() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._assign_deltas_helper"]], "_assign_infl_factors_helper() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._assign_infl_factors_helper"]], "_ast2pt_node() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._ast2pt_node"]], "_ast_tree_helper() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._ast_tree_helper"]], "_div() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._div"]], "_evaluator_helper() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._evaluator_helper"]], "_exp() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._exp"]], "_log() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._log"]], "_max() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._max"]], "_min() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._min"]], "_mult() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._mult"]], "_pow() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._pow"]], "_preprocess_constraint_str() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._preprocess_constraint_str"]], "_propagate_value() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._propagate_value"]], "_propagator_helper() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._propagator_helper"]], "_protect_nan() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._protect_nan"]], "_sub() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._sub"]], "_validate_delta_vector() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._validate_delta_vector"]], "_validate_infl_factors() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree._validate_infl_factors"]], "assign_bounds_needed() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.assign_bounds_needed"]], "assign_deltas() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.assign_deltas"]], "assign_infl_factors() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.assign_infl_factors"]], "build_tree() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.build_tree"]], "create_from_ast() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.create_from_ast"]], "evaluate_constraint() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.evaluate_constraint"]], "make_viz() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.make_viz"]], "make_viz_helper() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.make_viz_helper"]], "propagate() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.propagate"]], "propagate_bounds() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.propagate_bounds"]], "reset_base_node_dict() (parsetree method)": [[153, "seldonian.parse_tree.parse_tree.ParseTree.reset_base_node_dict"]], "make_parse_trees_from_constraints() (in module seldonian.parse_tree.parse_tree)": [[154, "seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints"]], "seldonian.parse_tree.zhat_funcs": [[155, "module-seldonian.parse_tree.zhat_funcs"]], "batcher() (in module seldonian.parse_tree.zhat_funcs)": [[156, "seldonian.parse_tree.zhat_funcs.batcher"]], "evaluate_statistic() (in module seldonian.parse_tree.zhat_funcs)": [[157, "seldonian.parse_tree.zhat_funcs.evaluate_statistic"]], "sample_from_statistic() (in module seldonian.parse_tree.zhat_funcs)": [[158, "seldonian.parse_tree.zhat_funcs.sample_from_statistic"]], "vector_accuracy() (in module seldonian.parse_tree.zhat_funcs)": [[159, "seldonian.parse_tree.zhat_funcs.vector_Accuracy"]], "vector_error() (in module seldonian.parse_tree.zhat_funcs)": [[160, "seldonian.parse_tree.zhat_funcs.vector_Error"]], "vector_error_rate() (in module seldonian.parse_tree.zhat_funcs)": [[161, "seldonian.parse_tree.zhat_funcs.vector_Error_Rate"]], "vector_false_negative_rate() (in module seldonian.parse_tree.zhat_funcs)": [[162, "seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate"]], "vector_false_positive_rate() (in module seldonian.parse_tree.zhat_funcs)": [[163, "seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate"]], "vector_is_estimate() (in module seldonian.parse_tree.zhat_funcs)": [[164, "seldonian.parse_tree.zhat_funcs.vector_IS_estimate"]], "vector_negative_rate() (in module seldonian.parse_tree.zhat_funcs)": [[165, "seldonian.parse_tree.zhat_funcs.vector_Negative_Rate"]], "vector_pdis_estimate() (in module seldonian.parse_tree.zhat_funcs)": [[166, "seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate"]], "vector_positive_rate() (in module seldonian.parse_tree.zhat_funcs)": [[167, "seldonian.parse_tree.zhat_funcs.vector_Positive_Rate"]], "vector_squared_error() (in module seldonian.parse_tree.zhat_funcs)": [[168, "seldonian.parse_tree.zhat_funcs.vector_Squared_Error"]], "vector_true_negative_rate() (in module seldonian.parse_tree.zhat_funcs)": [[169, "seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate"]], "vector_true_positive_rate() (in module seldonian.parse_tree.zhat_funcs)": [[170, "seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate"]], "vector_wis_estimate() (in module seldonian.parse_tree.zhat_funcs)": [[171, "seldonian.parse_tree.zhat_funcs.vector_WIS_estimate"]], "vector_auxiliary_return_us_estimate() (in module seldonian.parse_tree.zhat_funcs)": [[172, "seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate"]], "vector_confusion_matrix() (in module seldonian.parse_tree.zhat_funcs)": [[173, "seldonian.parse_tree.zhat_funcs.vector_confusion_matrix"]], "seldonian.safety_test": [[174, "module-seldonian.safety_test"]], "seldonian.safety_test.safety_test": [[175, "module-seldonian.safety_test.safety_test"]], "safetytest (class in seldonian.safety_test.safety_test)": [[176, "seldonian.safety_test.safety_test.SafetyTest"]], "__init__() (safetytest method)": [[176, "seldonian.safety_test.safety_test.SafetyTest.__init__"]], "__repr__() (safetytest method)": [[176, "seldonian.safety_test.safety_test.SafetyTest.__repr__"]], "evaluate_primary_objective() (safetytest method)": [[176, "seldonian.safety_test.safety_test.SafetyTest.evaluate_primary_objective"]], "get_importance_weights() (safetytest method)": [[176, "seldonian.safety_test.safety_test.SafetyTest.get_importance_weights"]], "run() (safetytest method)": [[176, "seldonian.safety_test.safety_test.SafetyTest.run"]], "seldonian.seldonian_algorithm": [[177, "module-seldonian.seldonian_algorithm"]], "seldonianalgorithm (class in seldonian.seldonian_algorithm)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm"]], "__init__() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.__init__"]], "__repr__() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.__repr__"]], "candidate_safety_split() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.candidate_safety_split"]], "candidate_selection() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.candidate_selection"]], "evaluate_primary_objective() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.evaluate_primary_objective"]], "get_cs_result() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.get_cs_result"]], "get_importance_weights() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.get_importance_weights"]], "get_st_upper_bounds() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.get_st_upper_bounds"]], "run() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.run"]], "run_safety_test() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.run_safety_test"]], "safety_test() (seldonianalgorithm method)": [[178, "seldonian.seldonian_algorithm.SeldonianAlgorithm.safety_test"]], "seldonian.spec": [[179, "module-seldonian.spec"]], "rlspec (class in seldonian.spec)": [[180, "seldonian.spec.RLSpec"]], "__init__() (rlspec method)": [[180, "seldonian.spec.RLSpec.__init__"]], "__repr__() (rlspec method)": [[180, "seldonian.spec.RLSpec.__repr__"]], "spec (class in seldonian.spec)": [[181, "seldonian.spec.Spec"]], "__init__() (spec method)": [[181, "seldonian.spec.Spec.__init__"]], "__repr__() (spec method)": [[181, "seldonian.spec.Spec.__repr__"]], "supervisedspec (class in seldonian.spec)": [[182, "seldonian.spec.SupervisedSpec"]], "__init__() (supervisedspec method)": [[182, "seldonian.spec.SupervisedSpec.__init__"]], "__repr__() (supervisedspec method)": [[182, "seldonian.spec.SupervisedSpec.__repr__"]], "createrlspec() (in module seldonian.spec)": [[183, "seldonian.spec.createRLSpec"]], "createsimplesupervisedspec() (in module seldonian.spec)": [[184, "seldonian.spec.createSimpleSupervisedSpec"]], "createsupervisedspec() (in module seldonian.spec)": [[185, "seldonian.spec.createSupervisedSpec"]], "validate_parse_trees() (in module seldonian.spec)": [[186, "seldonian.spec.validate_parse_trees"]], "seldonian.utils": [[187, "module-seldonian.utils"]], "seldonian.utils.rl_utils": [[188, "module-seldonian.utils.RL_utils"]], "argmax_multi() (in module seldonian.utils.rl_utils)": [[189, "seldonian.utils.RL_utils.argmax_multi"]], "clamp() (in module seldonian.utils.rl_utils)": [[190, "seldonian.utils.RL_utils.clamp"]], "error() (in module seldonian.utils.rl_utils)": [[191, "seldonian.utils.RL_utils.error"]], "seldonian.utils.io_utils": [[192, "module-seldonian.utils.io_utils"]], "cmaes_logger() (in module seldonian.utils.io_utils)": [[193, "seldonian.utils.io_utils.cmaes_logger"]], "dir_path() (in module seldonian.utils.io_utils)": [[194, "seldonian.utils.io_utils.dir_path"]], "load_json() (in module seldonian.utils.io_utils)": [[195, "seldonian.utils.io_utils.load_json"]], "load_pickle() (in module seldonian.utils.io_utils)": [[196, "seldonian.utils.io_utils.load_pickle"]], "save_json() (in module seldonian.utils.io_utils)": [[197, "seldonian.utils.io_utils.save_json"]], "save_pickle() (in module seldonian.utils.io_utils)": [[198, "seldonian.utils.io_utils.save_pickle"]], "seldonian.utils.plot_utils": [[199, "module-seldonian.utils.plot_utils"]], "plot_gradient_descent() (in module seldonian.utils.plot_utils)": [[200, "seldonian.utils.plot_utils.plot_gradient_descent"]], "seldonian.utils.stats_utils": [[201, "module-seldonian.utils.stats_utils"]], "custom_cumprod() (in module seldonian.utils.stats_utils)": [[202, "seldonian.utils.stats_utils.custom_cumprod"]], "softmax() (in module seldonian.utils.stats_utils)": [[203, "seldonian.utils.stats_utils.softmax"]], "stddev() (in module seldonian.utils.stats_utils)": [[204, "seldonian.utils.stats_utils.stddev"]], "tinv() (in module seldonian.utils.stats_utils)": [[205, "seldonian.utils.stats_utils.tinv"]], "weighted_sum_gamma() (in module seldonian.utils.stats_utils)": [[206, "seldonian.utils.stats_utils.weighted_sum_gamma"]], "seldonian.utils.tutorial_utils": [[207, "module-seldonian.utils.tutorial_utils"]], "generate_clipped_data() (in module seldonian.utils.tutorial_utils)": [[208, "seldonian.utils.tutorial_utils.generate_clipped_data"]], "generate_data() (in module seldonian.utils.tutorial_utils)": [[209, "seldonian.utils.tutorial_utils.generate_data"]], "make_synthetic_regression_dataset() (in module seldonian.utils.tutorial_utils)": [[210, "seldonian.utils.tutorial_utils.make_synthetic_regression_dataset"]], "seldonian.warnings": [[211, "module-seldonian.warnings"]], "seldonian.warnings.custom_warnings": [[212, "module-seldonian.warnings.custom_warnings"]], "custom_formatwarning() (in module seldonian.warnings.custom_warnings)": [[213, "seldonian.warnings.custom_warnings.custom_formatwarning"]]}})