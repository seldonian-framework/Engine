Search.setIndex({"docnames": ["_autosummary/seldonian", "_autosummary/seldonian.RL", "_autosummary/seldonian.RL.Agents", "_autosummary/seldonian.RL.Agents.Agent", "_autosummary/seldonian.RL.Agents.Agent.Agent", "_autosummary/seldonian.RL.Agents.Bases", "_autosummary/seldonian.RL.Agents.Bases.Fourier", "_autosummary/seldonian.RL.Agents.Bases.Fourier.Fourier", "_autosummary/seldonian.RL.Agents.Discrete_Random_Agent", "_autosummary/seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent", "_autosummary/seldonian.RL.Agents.Function_Approximators", "_autosummary/seldonian.RL.Agents.Function_Approximators.Function_Approximator", "_autosummary/seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.Q_Table", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.Table", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description", "_autosummary/seldonian.RL.Agents.Parameterized_non_learning_softmax_agent", "_autosummary/seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent", "_autosummary/seldonian.RL.Agents.Policies", "_autosummary/seldonian.RL.Agents.Policies.Policy", "_autosummary/seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy", "_autosummary/seldonian.RL.Agents.Policies.Policy.Policy", "_autosummary/seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea", "_autosummary/seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea", "_autosummary/seldonian.RL.Agents.Policies.Softmax", "_autosummary/seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax", "_autosummary/seldonian.RL.Agents.Policies.Softmax.MixedSoftmax", "_autosummary/seldonian.RL.Agents.Policies.Softmax.Softmax", "_autosummary/seldonian.RL.Agents.keyboard_gridworld", "_autosummary/seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld", "_autosummary/seldonian.RL.Agents.mountain_car_rough_solution", "_autosummary/seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution", "_autosummary/seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent", "_autosummary/seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent", "_autosummary/seldonian.RL.Env_Description", "_autosummary/seldonian.RL.Env_Description.Env_Description", "_autosummary/seldonian.RL.Env_Description.Env_Description.Env_Description", "_autosummary/seldonian.RL.Env_Description.Env_Description.check_space_type", "_autosummary/seldonian.RL.Env_Description.Spaces", "_autosummary/seldonian.RL.Env_Description.Spaces.Continuous_Space", "_autosummary/seldonian.RL.Env_Description.Spaces.Discrete_Space", "_autosummary/seldonian.RL.RL_model", "_autosummary/seldonian.RL.RL_model.RL_model", "_autosummary/seldonian.RL.RL_runner", "_autosummary/seldonian.RL.RL_runner.create_agent_fromdict", "_autosummary/seldonian.RL.RL_runner.run_episode", "_autosummary/seldonian.RL.RL_runner.run_episode_from_dict", "_autosummary/seldonian.RL.RL_runner.run_episodes_par", "_autosummary/seldonian.RL.RL_runner.run_trial", "_autosummary/seldonian.RL.RL_runner.run_trial_given_agent_and_env", "_autosummary/seldonian.RL.environments", "_autosummary/seldonian.RL.environments.Environment", "_autosummary/seldonian.RL.environments.Environment.Environment", "_autosummary/seldonian.RL.environments.gridworld", "_autosummary/seldonian.RL.environments.gridworld.Gridworld", "_autosummary/seldonian.RL.environments.mountaincar", "_autosummary/seldonian.RL.environments.mountaincar.Mountaincar", "_autosummary/seldonian.RL.environments.n_step_mountaincar", "_autosummary/seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar", "_autosummary/seldonian.candidate_selection", "_autosummary/seldonian.candidate_selection.candidate_selection", "_autosummary/seldonian.candidate_selection.candidate_selection.CandidateSelection", "_autosummary/seldonian.dataset", "_autosummary/seldonian.dataset.CustomDataSet", "_autosummary/seldonian.dataset.CustomMetaData", "_autosummary/seldonian.dataset.DataSet", "_autosummary/seldonian.dataset.DataSetLoader", "_autosummary/seldonian.dataset.Episode", "_autosummary/seldonian.dataset.MetaData", "_autosummary/seldonian.dataset.RLDataSet", "_autosummary/seldonian.dataset.RLMetaData", "_autosummary/seldonian.dataset.SupervisedDataSet", "_autosummary/seldonian.dataset.SupervisedMetaData", "_autosummary/seldonian.dataset.load_RL_metadata", "_autosummary/seldonian.dataset.load_custom_metadata", "_autosummary/seldonian.dataset.load_supervised_metadata", "_autosummary/seldonian.hyperparam_search", "_autosummary/seldonian.hyperparam_search.HyperSchema", "_autosummary/seldonian.hyperparam_search.HyperparamSearch", "_autosummary/seldonian.models", "_autosummary/seldonian.models.custom_text_model", "_autosummary/seldonian.models.custom_text_model.CustomTextModel", "_autosummary/seldonian.models.models", "_autosummary/seldonian.models.models.BaseLogisticRegressionModel", "_autosummary/seldonian.models.models.BinaryLogisticRegressionModel", "_autosummary/seldonian.models.models.BoundedLinearRegressionModel", "_autosummary/seldonian.models.models.ClassificationModel", "_autosummary/seldonian.models.models.DummyClassifierModel", "_autosummary/seldonian.models.models.LinearRegressionModel", "_autosummary/seldonian.models.models.LinearRegressionModelListFeatures", "_autosummary/seldonian.models.models.MultiClassLogisticRegressionModel", "_autosummary/seldonian.models.models.RandomClassifierModel", "_autosummary/seldonian.models.models.RegressionModel", "_autosummary/seldonian.models.models.SeldonianModel", "_autosummary/seldonian.models.models.SupervisedModel", "_autosummary/seldonian.models.objectives", "_autosummary/seldonian.models.objectives.Error_Rate", "_autosummary/seldonian.models.objectives.False_Negative_Rate", "_autosummary/seldonian.models.objectives.False_Positive_Rate", "_autosummary/seldonian.models.objectives.IS_estimate", "_autosummary/seldonian.models.objectives.Mean_Error", "_autosummary/seldonian.models.objectives.Mean_Squared_Error", "_autosummary/seldonian.models.objectives.Negative_Rate", "_autosummary/seldonian.models.objectives.PDIS_estimate", "_autosummary/seldonian.models.objectives.Positive_Rate", "_autosummary/seldonian.models.objectives.True_Negative_Rate", "_autosummary/seldonian.models.objectives.True_Positive_Rate", "_autosummary/seldonian.models.objectives.US_estimate", "_autosummary/seldonian.models.objectives.WIS_estimate", "_autosummary/seldonian.models.objectives.binary_logistic_loss", "_autosummary/seldonian.models.objectives.confusion_matrix", "_autosummary/seldonian.models.objectives.gradient_Bounded_Squared_Error", "_autosummary/seldonian.models.objectives.gradient_Mean_Squared_Error", "_autosummary/seldonian.models.objectives.gradient_binary_logistic_loss", "_autosummary/seldonian.models.objectives.multiclass_logistic_loss", "_autosummary/seldonian.models.sklearn_lr", "_autosummary/seldonian.models.sklearn_lr.SkLearnLinearRegressor", "_autosummary/seldonian.models.sklearn_model", "_autosummary/seldonian.models.sklearn_model.SupervisedSkLearnBaseModel", "_autosummary/seldonian.models.sklearn_model.sklearn_predict_vjp", "_autosummary/seldonian.models.trees", "_autosummary/seldonian.models.trees.skrandomforest_model", "_autosummary/seldonian.models.trees.skrandomforest_model.SeldonianRandomForest", "_autosummary/seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp", "_autosummary/seldonian.models.trees.sktree_model", "_autosummary/seldonian.models.trees.sktree_model.SeldonianDecisionTree", "_autosummary/seldonian.models.trees.sktree_model.probs2theta", "_autosummary/seldonian.models.trees.sktree_model.sigmoid", "_autosummary/seldonian.models.trees.sktree_model.sklearn_predict_vjp", "_autosummary/seldonian.optimizers", "_autosummary/seldonian.optimizers.gradient_descent", "_autosummary/seldonian.optimizers.gradient_descent.gradient_descent_adam", "_autosummary/seldonian.optimizers.gradient_descent.setup_gradients", "_autosummary/seldonian.parse_tree", "_autosummary/seldonian.parse_tree.nodes", "_autosummary/seldonian.parse_tree.nodes.BaseNode", "_autosummary/seldonian.parse_tree.nodes.CVaRSQeBaseNode", "_autosummary/seldonian.parse_tree.nodes.ConfusionMatrixBaseNode", "_autosummary/seldonian.parse_tree.nodes.ConstantNode", "_autosummary/seldonian.parse_tree.nodes.InternalNode", "_autosummary/seldonian.parse_tree.nodes.MEDCustomBaseNode", "_autosummary/seldonian.parse_tree.nodes.MultiClassBaseNode", "_autosummary/seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode", "_autosummary/seldonian.parse_tree.nodes.Node", "_autosummary/seldonian.parse_tree.nodes.RLAltRewardBaseNode", "_autosummary/seldonian.parse_tree.operators", "_autosummary/seldonian.parse_tree.parse_tree", "_autosummary/seldonian.parse_tree.parse_tree.ParseTree", "_autosummary/seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints", "_autosummary/seldonian.parse_tree.zhat_funcs", "_autosummary/seldonian.parse_tree.zhat_funcs.batcher", "_autosummary/seldonian.parse_tree.zhat_funcs.evaluate_statistic", "_autosummary/seldonian.parse_tree.zhat_funcs.sample_from_statistic", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Accuracy", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Error", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Error_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_IS_estimate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Negative_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Positive_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Squared_Error", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_WIS_estimate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_confusion_matrix", "_autosummary/seldonian.safety_test", "_autosummary/seldonian.safety_test.safety_test", "_autosummary/seldonian.safety_test.safety_test.SafetyTest", "_autosummary/seldonian.seldonian_algorithm", "_autosummary/seldonian.seldonian_algorithm.SeldonianAlgorithm", "_autosummary/seldonian.spec", "_autosummary/seldonian.spec.HyperparameterSelectionSpec", "_autosummary/seldonian.spec.RLSpec", "_autosummary/seldonian.spec.Spec", "_autosummary/seldonian.spec.SupervisedSpec", "_autosummary/seldonian.spec.createRLSpec", "_autosummary/seldonian.spec.createSimpleSupervisedSpec", "_autosummary/seldonian.spec.createSupervisedSpec", "_autosummary/seldonian.utils", "_autosummary/seldonian.utils.RL_utils", "_autosummary/seldonian.utils.RL_utils.argmax_multi", "_autosummary/seldonian.utils.RL_utils.clamp", "_autosummary/seldonian.utils.RL_utils.error", "_autosummary/seldonian.utils.hyperparam_utils", "_autosummary/seldonian.utils.hyperparam_utils.bootstrap_sample_dataset", "_autosummary/seldonian.utils.hyperparam_utils.clopper_pearson_bound", "_autosummary/seldonian.utils.hyperparam_utils.create_shuffled_dataset", "_autosummary/seldonian.utils.hyperparam_utils.rebuild_parse_trees", "_autosummary/seldonian.utils.hyperparam_utils.set_spec_with_hyperparam_setting", "_autosummary/seldonian.utils.hyperparam_utils.ttest_bound", "_autosummary/seldonian.utils.io_utils", "_autosummary/seldonian.utils.io_utils.cmaes_logger", "_autosummary/seldonian.utils.io_utils.dir_path", "_autosummary/seldonian.utils.io_utils.load_json", "_autosummary/seldonian.utils.io_utils.load_pickle", "_autosummary/seldonian.utils.io_utils.save_json", "_autosummary/seldonian.utils.io_utils.save_pickle", "_autosummary/seldonian.utils.plot_utils", "_autosummary/seldonian.utils.plot_utils.plot_gradient_descent", "_autosummary/seldonian.utils.stats_utils", "_autosummary/seldonian.utils.stats_utils.custom_cumprod", "_autosummary/seldonian.utils.stats_utils.default_supervised_initial_solution_fn", "_autosummary/seldonian.utils.stats_utils.softmax", "_autosummary/seldonian.utils.stats_utils.stddev", "_autosummary/seldonian.utils.stats_utils.tinv", "_autosummary/seldonian.utils.stats_utils.weighted_sum_gamma", "_autosummary/seldonian.utils.tutorial_utils", "_autosummary/seldonian.utils.tutorial_utils.generate_clipped_data", "_autosummary/seldonian.utils.tutorial_utils.generate_data", "_autosummary/seldonian.utils.tutorial_utils.make_synthetic_regression_dataset", "_autosummary/seldonian.warnings", "_autosummary/seldonian.warnings.custom_warnings", "_autosummary/seldonian.warnings.custom_warnings.custom_formatwarning", "api", "getting_started", "index", "overview"], "filenames": ["_autosummary/seldonian.rst", "_autosummary/seldonian.RL.rst", "_autosummary/seldonian.RL.Agents.rst", "_autosummary/seldonian.RL.Agents.Agent.rst", "_autosummary/seldonian.RL.Agents.Agent.Agent.rst", "_autosummary/seldonian.RL.Agents.Bases.rst", "_autosummary/seldonian.RL.Agents.Bases.Fourier.rst", "_autosummary/seldonian.RL.Agents.Bases.Fourier.Fourier.rst", "_autosummary/seldonian.RL.Agents.Discrete_Random_Agent.rst", "_autosummary/seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Function_Approximator.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.Q_Table.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.Table.rst", "_autosummary/seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description.rst", "_autosummary/seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.rst", "_autosummary/seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.rst", "_autosummary/seldonian.RL.Agents.Policies.rst", "_autosummary/seldonian.RL.Agents.Policies.Policy.rst", "_autosummary/seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.rst", "_autosummary/seldonian.RL.Agents.Policies.Policy.Policy.rst", "_autosummary/seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.rst", "_autosummary/seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.rst", "_autosummary/seldonian.RL.Agents.Policies.Softmax.rst", "_autosummary/seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.rst", "_autosummary/seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.rst", "_autosummary/seldonian.RL.Agents.Policies.Softmax.Softmax.rst", "_autosummary/seldonian.RL.Agents.keyboard_gridworld.rst", "_autosummary/seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.rst", "_autosummary/seldonian.RL.Agents.mountain_car_rough_solution.rst", "_autosummary/seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.rst", "_autosummary/seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.rst", "_autosummary/seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.rst", "_autosummary/seldonian.RL.Env_Description.rst", "_autosummary/seldonian.RL.Env_Description.Env_Description.rst", "_autosummary/seldonian.RL.Env_Description.Env_Description.Env_Description.rst", "_autosummary/seldonian.RL.Env_Description.Env_Description.check_space_type.rst", "_autosummary/seldonian.RL.Env_Description.Spaces.rst", "_autosummary/seldonian.RL.Env_Description.Spaces.Continuous_Space.rst", "_autosummary/seldonian.RL.Env_Description.Spaces.Discrete_Space.rst", "_autosummary/seldonian.RL.RL_model.rst", "_autosummary/seldonian.RL.RL_model.RL_model.rst", "_autosummary/seldonian.RL.RL_runner.rst", "_autosummary/seldonian.RL.RL_runner.create_agent_fromdict.rst", "_autosummary/seldonian.RL.RL_runner.run_episode.rst", "_autosummary/seldonian.RL.RL_runner.run_episode_from_dict.rst", "_autosummary/seldonian.RL.RL_runner.run_episodes_par.rst", "_autosummary/seldonian.RL.RL_runner.run_trial.rst", "_autosummary/seldonian.RL.RL_runner.run_trial_given_agent_and_env.rst", "_autosummary/seldonian.RL.environments.rst", "_autosummary/seldonian.RL.environments.Environment.rst", "_autosummary/seldonian.RL.environments.Environment.Environment.rst", "_autosummary/seldonian.RL.environments.gridworld.rst", "_autosummary/seldonian.RL.environments.gridworld.Gridworld.rst", "_autosummary/seldonian.RL.environments.mountaincar.rst", "_autosummary/seldonian.RL.environments.mountaincar.Mountaincar.rst", "_autosummary/seldonian.RL.environments.n_step_mountaincar.rst", "_autosummary/seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.rst", "_autosummary/seldonian.candidate_selection.rst", "_autosummary/seldonian.candidate_selection.candidate_selection.rst", "_autosummary/seldonian.candidate_selection.candidate_selection.CandidateSelection.rst", "_autosummary/seldonian.dataset.rst", "_autosummary/seldonian.dataset.CustomDataSet.rst", "_autosummary/seldonian.dataset.CustomMetaData.rst", "_autosummary/seldonian.dataset.DataSet.rst", "_autosummary/seldonian.dataset.DataSetLoader.rst", "_autosummary/seldonian.dataset.Episode.rst", "_autosummary/seldonian.dataset.MetaData.rst", "_autosummary/seldonian.dataset.RLDataSet.rst", "_autosummary/seldonian.dataset.RLMetaData.rst", "_autosummary/seldonian.dataset.SupervisedDataSet.rst", "_autosummary/seldonian.dataset.SupervisedMetaData.rst", "_autosummary/seldonian.dataset.load_RL_metadata.rst", "_autosummary/seldonian.dataset.load_custom_metadata.rst", "_autosummary/seldonian.dataset.load_supervised_metadata.rst", "_autosummary/seldonian.hyperparam_search.rst", "_autosummary/seldonian.hyperparam_search.HyperSchema.rst", "_autosummary/seldonian.hyperparam_search.HyperparamSearch.rst", "_autosummary/seldonian.models.rst", "_autosummary/seldonian.models.custom_text_model.rst", "_autosummary/seldonian.models.custom_text_model.CustomTextModel.rst", "_autosummary/seldonian.models.models.rst", "_autosummary/seldonian.models.models.BaseLogisticRegressionModel.rst", "_autosummary/seldonian.models.models.BinaryLogisticRegressionModel.rst", "_autosummary/seldonian.models.models.BoundedLinearRegressionModel.rst", "_autosummary/seldonian.models.models.ClassificationModel.rst", "_autosummary/seldonian.models.models.DummyClassifierModel.rst", "_autosummary/seldonian.models.models.LinearRegressionModel.rst", "_autosummary/seldonian.models.models.LinearRegressionModelListFeatures.rst", "_autosummary/seldonian.models.models.MultiClassLogisticRegressionModel.rst", "_autosummary/seldonian.models.models.RandomClassifierModel.rst", "_autosummary/seldonian.models.models.RegressionModel.rst", "_autosummary/seldonian.models.models.SeldonianModel.rst", "_autosummary/seldonian.models.models.SupervisedModel.rst", "_autosummary/seldonian.models.objectives.rst", "_autosummary/seldonian.models.objectives.Error_Rate.rst", "_autosummary/seldonian.models.objectives.False_Negative_Rate.rst", "_autosummary/seldonian.models.objectives.False_Positive_Rate.rst", "_autosummary/seldonian.models.objectives.IS_estimate.rst", "_autosummary/seldonian.models.objectives.Mean_Error.rst", "_autosummary/seldonian.models.objectives.Mean_Squared_Error.rst", "_autosummary/seldonian.models.objectives.Negative_Rate.rst", "_autosummary/seldonian.models.objectives.PDIS_estimate.rst", "_autosummary/seldonian.models.objectives.Positive_Rate.rst", "_autosummary/seldonian.models.objectives.True_Negative_Rate.rst", "_autosummary/seldonian.models.objectives.True_Positive_Rate.rst", "_autosummary/seldonian.models.objectives.US_estimate.rst", "_autosummary/seldonian.models.objectives.WIS_estimate.rst", "_autosummary/seldonian.models.objectives.binary_logistic_loss.rst", "_autosummary/seldonian.models.objectives.confusion_matrix.rst", "_autosummary/seldonian.models.objectives.gradient_Bounded_Squared_Error.rst", "_autosummary/seldonian.models.objectives.gradient_Mean_Squared_Error.rst", "_autosummary/seldonian.models.objectives.gradient_binary_logistic_loss.rst", "_autosummary/seldonian.models.objectives.multiclass_logistic_loss.rst", "_autosummary/seldonian.models.sklearn_lr.rst", "_autosummary/seldonian.models.sklearn_lr.SkLearnLinearRegressor.rst", "_autosummary/seldonian.models.sklearn_model.rst", "_autosummary/seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.rst", "_autosummary/seldonian.models.sklearn_model.sklearn_predict_vjp.rst", "_autosummary/seldonian.models.trees.rst", "_autosummary/seldonian.models.trees.skrandomforest_model.rst", "_autosummary/seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.rst", "_autosummary/seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp.rst", "_autosummary/seldonian.models.trees.sktree_model.rst", "_autosummary/seldonian.models.trees.sktree_model.SeldonianDecisionTree.rst", "_autosummary/seldonian.models.trees.sktree_model.probs2theta.rst", "_autosummary/seldonian.models.trees.sktree_model.sigmoid.rst", "_autosummary/seldonian.models.trees.sktree_model.sklearn_predict_vjp.rst", "_autosummary/seldonian.optimizers.rst", "_autosummary/seldonian.optimizers.gradient_descent.rst", "_autosummary/seldonian.optimizers.gradient_descent.gradient_descent_adam.rst", "_autosummary/seldonian.optimizers.gradient_descent.setup_gradients.rst", "_autosummary/seldonian.parse_tree.rst", "_autosummary/seldonian.parse_tree.nodes.rst", "_autosummary/seldonian.parse_tree.nodes.BaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.CVaRSQeBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.ConstantNode.rst", "_autosummary/seldonian.parse_tree.nodes.InternalNode.rst", "_autosummary/seldonian.parse_tree.nodes.MEDCustomBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.MultiClassBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.rst", "_autosummary/seldonian.parse_tree.nodes.Node.rst", "_autosummary/seldonian.parse_tree.nodes.RLAltRewardBaseNode.rst", "_autosummary/seldonian.parse_tree.operators.rst", "_autosummary/seldonian.parse_tree.parse_tree.rst", "_autosummary/seldonian.parse_tree.parse_tree.ParseTree.rst", "_autosummary/seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.batcher.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.evaluate_statistic.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.sample_from_statistic.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Accuracy.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Error.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Error_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_IS_estimate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Negative_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Positive_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_Squared_Error.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_WIS_estimate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate.rst", "_autosummary/seldonian.parse_tree.zhat_funcs.vector_confusion_matrix.rst", "_autosummary/seldonian.safety_test.rst", "_autosummary/seldonian.safety_test.safety_test.rst", "_autosummary/seldonian.safety_test.safety_test.SafetyTest.rst", "_autosummary/seldonian.seldonian_algorithm.rst", "_autosummary/seldonian.seldonian_algorithm.SeldonianAlgorithm.rst", "_autosummary/seldonian.spec.rst", "_autosummary/seldonian.spec.HyperparameterSelectionSpec.rst", "_autosummary/seldonian.spec.RLSpec.rst", "_autosummary/seldonian.spec.Spec.rst", "_autosummary/seldonian.spec.SupervisedSpec.rst", "_autosummary/seldonian.spec.createRLSpec.rst", "_autosummary/seldonian.spec.createSimpleSupervisedSpec.rst", "_autosummary/seldonian.spec.createSupervisedSpec.rst", "_autosummary/seldonian.utils.rst", "_autosummary/seldonian.utils.RL_utils.rst", "_autosummary/seldonian.utils.RL_utils.argmax_multi.rst", "_autosummary/seldonian.utils.RL_utils.clamp.rst", "_autosummary/seldonian.utils.RL_utils.error.rst", "_autosummary/seldonian.utils.hyperparam_utils.rst", "_autosummary/seldonian.utils.hyperparam_utils.bootstrap_sample_dataset.rst", "_autosummary/seldonian.utils.hyperparam_utils.clopper_pearson_bound.rst", "_autosummary/seldonian.utils.hyperparam_utils.create_shuffled_dataset.rst", "_autosummary/seldonian.utils.hyperparam_utils.rebuild_parse_trees.rst", "_autosummary/seldonian.utils.hyperparam_utils.set_spec_with_hyperparam_setting.rst", "_autosummary/seldonian.utils.hyperparam_utils.ttest_bound.rst", "_autosummary/seldonian.utils.io_utils.rst", "_autosummary/seldonian.utils.io_utils.cmaes_logger.rst", "_autosummary/seldonian.utils.io_utils.dir_path.rst", "_autosummary/seldonian.utils.io_utils.load_json.rst", "_autosummary/seldonian.utils.io_utils.load_pickle.rst", "_autosummary/seldonian.utils.io_utils.save_json.rst", "_autosummary/seldonian.utils.io_utils.save_pickle.rst", "_autosummary/seldonian.utils.plot_utils.rst", "_autosummary/seldonian.utils.plot_utils.plot_gradient_descent.rst", "_autosummary/seldonian.utils.stats_utils.rst", "_autosummary/seldonian.utils.stats_utils.custom_cumprod.rst", "_autosummary/seldonian.utils.stats_utils.default_supervised_initial_solution_fn.rst", "_autosummary/seldonian.utils.stats_utils.softmax.rst", "_autosummary/seldonian.utils.stats_utils.stddev.rst", "_autosummary/seldonian.utils.stats_utils.tinv.rst", "_autosummary/seldonian.utils.stats_utils.weighted_sum_gamma.rst", "_autosummary/seldonian.utils.tutorial_utils.rst", "_autosummary/seldonian.utils.tutorial_utils.generate_clipped_data.rst", "_autosummary/seldonian.utils.tutorial_utils.generate_data.rst", "_autosummary/seldonian.utils.tutorial_utils.make_synthetic_regression_dataset.rst", "_autosummary/seldonian.warnings.rst", "_autosummary/seldonian.warnings.custom_warnings.rst", "_autosummary/seldonian.warnings.custom_warnings.custom_formatwarning.rst", "api.rst", "getting_started.rst", "index.rst", "overview.rst"], "titles": ["seldonian", "seldonian.RL", "seldonian.RL.Agents", "seldonian.RL.Agents.Agent", "seldonian.RL.Agents.Agent.Agent", "seldonian.RL.Agents.Bases", "seldonian.RL.Agents.Bases.Fourier", "seldonian.RL.Agents.Bases.Fourier.Fourier", "seldonian.RL.Agents.Discrete_Random_Agent", "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent", "seldonian.RL.Agents.Function_Approximators", "seldonian.RL.Agents.Function_Approximators.Function_Approximator", "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator", "seldonian.RL.Agents.Function_Approximators.Linear_FA", "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA", "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA", "seldonian.RL.Agents.Function_Approximators.Table", "seldonian.RL.Agents.Function_Approximators.Table.Q_Table", "seldonian.RL.Agents.Function_Approximators.Table.Table", "seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description", "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent", "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent", "seldonian.RL.Agents.Policies", "seldonian.RL.Agents.Policies.Policy", "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy", "seldonian.RL.Agents.Policies.Policy.Policy", "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea", "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea", "seldonian.RL.Agents.Policies.Softmax", "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax", "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax", "seldonian.RL.Agents.Policies.Softmax.Softmax", "seldonian.RL.Agents.keyboard_gridworld", "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld", "seldonian.RL.Agents.mountain_car_rough_solution", "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution", "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent", "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent", "seldonian.RL.Env_Description", "seldonian.RL.Env_Description.Env_Description", "seldonian.RL.Env_Description.Env_Description.Env_Description", "seldonian.RL.Env_Description.Env_Description.check_space_type", "seldonian.RL.Env_Description.Spaces", "seldonian.RL.Env_Description.Spaces.Continuous_Space", "seldonian.RL.Env_Description.Spaces.Discrete_Space", "seldonian.RL.RL_model", "seldonian.RL.RL_model.RL_model", "seldonian.RL.RL_runner", "seldonian.RL.RL_runner.create_agent_fromdict", "seldonian.RL.RL_runner.run_episode", "seldonian.RL.RL_runner.run_episode_from_dict", "seldonian.RL.RL_runner.run_episodes_par", "seldonian.RL.RL_runner.run_trial", "seldonian.RL.RL_runner.run_trial_given_agent_and_env", "seldonian.RL.environments", "seldonian.RL.environments.Environment", "seldonian.RL.environments.Environment.Environment", "seldonian.RL.environments.gridworld", "seldonian.RL.environments.gridworld.Gridworld", "seldonian.RL.environments.mountaincar", "seldonian.RL.environments.mountaincar.Mountaincar", "seldonian.RL.environments.n_step_mountaincar", "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar", "seldonian.candidate_selection", "seldonian.candidate_selection.candidate_selection", "seldonian.candidate_selection.candidate_selection.CandidateSelection", "seldonian.dataset", "seldonian.dataset.CustomDataSet", "seldonian.dataset.CustomMetaData", "seldonian.dataset.DataSet", "seldonian.dataset.DataSetLoader", "seldonian.dataset.Episode", "seldonian.dataset.MetaData", "seldonian.dataset.RLDataSet", "seldonian.dataset.RLMetaData", "seldonian.dataset.SupervisedDataSet", "seldonian.dataset.SupervisedMetaData", "seldonian.dataset.load_RL_metadata", "seldonian.dataset.load_custom_metadata", "seldonian.dataset.load_supervised_metadata", "seldonian.hyperparam_search", "seldonian.hyperparam_search.HyperSchema", "seldonian.hyperparam_search.HyperparamSearch", "seldonian.models", "seldonian.models.custom_text_model", "seldonian.models.custom_text_model.CustomTextModel", "seldonian.models.models", "seldonian.models.models.BaseLogisticRegressionModel", "seldonian.models.models.BinaryLogisticRegressionModel", "seldonian.models.models.BoundedLinearRegressionModel", "seldonian.models.models.ClassificationModel", "seldonian.models.models.DummyClassifierModel", "seldonian.models.models.LinearRegressionModel", "seldonian.models.models.LinearRegressionModelListFeatures", "seldonian.models.models.MultiClassLogisticRegressionModel", "seldonian.models.models.RandomClassifierModel", "seldonian.models.models.RegressionModel", "seldonian.models.models.SeldonianModel", "seldonian.models.models.SupervisedModel", "seldonian.models.objectives", "seldonian.models.objectives.Error_Rate", "seldonian.models.objectives.False_Negative_Rate", "seldonian.models.objectives.False_Positive_Rate", "seldonian.models.objectives.IS_estimate", "seldonian.models.objectives.Mean_Error", "seldonian.models.objectives.Mean_Squared_Error", "seldonian.models.objectives.Negative_Rate", "seldonian.models.objectives.PDIS_estimate", "seldonian.models.objectives.Positive_Rate", "seldonian.models.objectives.True_Negative_Rate", "seldonian.models.objectives.True_Positive_Rate", "seldonian.models.objectives.US_estimate", "seldonian.models.objectives.WIS_estimate", "seldonian.models.objectives.binary_logistic_loss", "seldonian.models.objectives.confusion_matrix", "seldonian.models.objectives.gradient_Bounded_Squared_Error", "seldonian.models.objectives.gradient_Mean_Squared_Error", "seldonian.models.objectives.gradient_binary_logistic_loss", "seldonian.models.objectives.multiclass_logistic_loss", "seldonian.models.sklearn_lr", "seldonian.models.sklearn_lr.SkLearnLinearRegressor", "seldonian.models.sklearn_model", "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel", "seldonian.models.sklearn_model.sklearn_predict_vjp", "seldonian.models.trees", "seldonian.models.trees.skrandomforest_model", "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest", "seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp", "seldonian.models.trees.sktree_model", "seldonian.models.trees.sktree_model.SeldonianDecisionTree", "seldonian.models.trees.sktree_model.probs2theta", "seldonian.models.trees.sktree_model.sigmoid", "seldonian.models.trees.sktree_model.sklearn_predict_vjp", "seldonian.optimizers", "seldonian.optimizers.gradient_descent", "seldonian.optimizers.gradient_descent.gradient_descent_adam", "seldonian.optimizers.gradient_descent.setup_gradients", "seldonian.parse_tree", "seldonian.parse_tree.nodes", "seldonian.parse_tree.nodes.BaseNode", "seldonian.parse_tree.nodes.CVaRSQeBaseNode", "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode", "seldonian.parse_tree.nodes.ConstantNode", "seldonian.parse_tree.nodes.InternalNode", "seldonian.parse_tree.nodes.MEDCustomBaseNode", "seldonian.parse_tree.nodes.MultiClassBaseNode", "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode", "seldonian.parse_tree.nodes.Node", "seldonian.parse_tree.nodes.RLAltRewardBaseNode", "seldonian.parse_tree.operators", "seldonian.parse_tree.parse_tree", "seldonian.parse_tree.parse_tree.ParseTree", "seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints", "seldonian.parse_tree.zhat_funcs", "seldonian.parse_tree.zhat_funcs.batcher", "seldonian.parse_tree.zhat_funcs.evaluate_statistic", "seldonian.parse_tree.zhat_funcs.sample_from_statistic", "seldonian.parse_tree.zhat_funcs.vector_Accuracy", "seldonian.parse_tree.zhat_funcs.vector_Error", "seldonian.parse_tree.zhat_funcs.vector_Error_Rate", "seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate", "seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate", "seldonian.parse_tree.zhat_funcs.vector_IS_estimate", "seldonian.parse_tree.zhat_funcs.vector_Negative_Rate", "seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate", "seldonian.parse_tree.zhat_funcs.vector_Positive_Rate", "seldonian.parse_tree.zhat_funcs.vector_Squared_Error", "seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate", "seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate", "seldonian.parse_tree.zhat_funcs.vector_WIS_estimate", "seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate", "seldonian.parse_tree.zhat_funcs.vector_confusion_matrix", "seldonian.safety_test", "seldonian.safety_test.safety_test", "seldonian.safety_test.safety_test.SafetyTest", "seldonian.seldonian_algorithm", "seldonian.seldonian_algorithm.SeldonianAlgorithm", "seldonian.spec", "seldonian.spec.HyperparameterSelectionSpec", "seldonian.spec.RLSpec", "seldonian.spec.Spec", "seldonian.spec.SupervisedSpec", "seldonian.spec.createRLSpec", "seldonian.spec.createSimpleSupervisedSpec", "seldonian.spec.createSupervisedSpec", "seldonian.utils", "seldonian.utils.RL_utils", "seldonian.utils.RL_utils.argmax_multi", "seldonian.utils.RL_utils.clamp", "seldonian.utils.RL_utils.error", "seldonian.utils.hyperparam_utils", "seldonian.utils.hyperparam_utils.bootstrap_sample_dataset", "seldonian.utils.hyperparam_utils.clopper_pearson_bound", "seldonian.utils.hyperparam_utils.create_shuffled_dataset", "seldonian.utils.hyperparam_utils.rebuild_parse_trees", "seldonian.utils.hyperparam_utils.set_spec_with_hyperparam_setting", "seldonian.utils.hyperparam_utils.ttest_bound", "seldonian.utils.io_utils", "seldonian.utils.io_utils.cmaes_logger", "seldonian.utils.io_utils.dir_path", "seldonian.utils.io_utils.load_json", "seldonian.utils.io_utils.load_pickle", "seldonian.utils.io_utils.save_json", "seldonian.utils.io_utils.save_pickle", "seldonian.utils.plot_utils", "seldonian.utils.plot_utils.plot_gradient_descent", "seldonian.utils.stats_utils", "seldonian.utils.stats_utils.custom_cumprod", "seldonian.utils.stats_utils.default_supervised_initial_solution_fn", "seldonian.utils.stats_utils.softmax", "seldonian.utils.stats_utils.stddev", "seldonian.utils.stats_utils.tinv", "seldonian.utils.stats_utils.weighted_sum_gamma", "seldonian.utils.tutorial_utils", "seldonian.utils.tutorial_utils.generate_clipped_data", "seldonian.utils.tutorial_utils.generate_data", "seldonian.utils.tutorial_utils.make_synthetic_regression_dataset", "seldonian.warnings", "seldonian.warnings.custom_warnings", "seldonian.warnings.custom_warnings.custom_formatwarning", "API", "Getting Started", "Seldonian Engine documentation", "Overview"], "terms": {"engin": [0, 221, 223], "packag": [0, 223], "modul": [0, 1, 2, 5, 10, 22, 38, 54, 63, 64, 80, 83, 86, 124, 133, 137, 149, 150, 153, 172, 173, 175, 177, 185, 217, 219, 223], "class": [3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 101, 102, 106, 108, 109, 110, 114, 118, 119, 120, 121, 122, 123, 125, 126, 128, 129, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 160, 161, 163, 165, 167, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 223], "base": [4, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 129, 132, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 174, 176, 178, 179, 180, 181, 222, 223], "object": [4, 7, 9, 12, 14, 15, 19, 21, 24, 25, 29, 30, 31, 33, 35, 37, 40, 43, 44, 51, 56, 58, 60, 65, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 81, 82, 97, 126, 129, 135, 136, 139, 140, 141, 144, 145, 146, 147, 148, 151, 170, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 198, 200, 201, 202, 203, 205, 216, 222], "__init__": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 129, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 174, 176, 178, 179, 180, 181, 222], "all": [4, 7, 21, 24, 29, 30, 31, 35, 46, 56, 72, 76, 81, 82, 90, 96, 97, 98, 103, 107, 112, 113, 118, 120, 122, 126, 135, 141, 145, 147, 148, 151, 174, 223], "overrid": [4, 35, 56, 58, 60, 62, 89, 139, 140, 141, 144, 145, 146, 148, 179, 180, 181], "method": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 129, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 174, 176, 178, 179, 180, 181, 223], "below": [4, 35, 223], "child": [4, 35, 56, 58, 60, 62, 147, 149, 151, 223], "implement": [4, 21, 25, 35, 37, 56, 58, 60, 62, 88, 89, 91, 92, 93, 94, 95, 120, 122, 135, 207, 211, 223], "__repr__": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 129, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 174, 176, 178, 179, 180, 181, 222], "return": [4, 7, 9, 12, 14, 15, 17, 18, 19, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 48, 49, 50, 51, 52, 53, 56, 58, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 127, 129, 132, 135, 139, 140, 141, 144, 145, 146, 148, 151, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 176, 178, 179, 180, 181, 187, 193, 205, 207, 208, 210, 211, 212, 216, 223], "repr": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 129, 151, 174, 176, 178, 179, 180, 181], "self": [4, 7, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 120, 122, 126, 129, 146, 151, 174, 176, 178, 179, 180, 181], "choose_act": [4, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 222], "observ": [4, 7, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 71, 88, 91, 94, 95, 139, 140, 141, 144, 145, 146, 148, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 171, 223], "choos": [4, 9, 33, 35, 223], "an": [4, 7, 9, 14, 15, 19, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 48, 51, 56, 58, 60, 62, 65, 67, 81, 123, 126, 127, 129, 132, 139, 140, 141, 145, 146, 147, 148, 149, 151, 174, 176, 179, 180, 181, 199, 200, 201, 202, 203, 212, 223], "action": [4, 9, 15, 17, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 70, 71, 111, 170, 223], "given": [4, 7, 17, 19, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 52, 53, 56, 58, 60, 62, 65, 120, 126, 136, 139, 140, 141, 144, 145, 146, 148, 151, 152, 174, 176, 193, 223], "To": [4, 9, 33, 35, 37, 221], "overridden": [4, 24, 25, 27, 33, 35, 37], "paramet": [4, 7, 9, 12, 14, 15, 17, 18, 19, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 41, 43, 44, 46, 48, 49, 50, 51, 52, 53, 56, 58, 60, 62, 65, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 85, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 127, 129, 132, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 176, 178, 179, 180, 181, 182, 183, 184, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 210, 211, 212, 214, 215, 216, 223], "The": [4, 7, 9, 14, 15, 17, 18, 21, 27, 29, 30, 31, 33, 35, 37, 43, 58, 60, 62, 65, 69, 70, 72, 76, 77, 78, 79, 82, 85, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 126, 127, 129, 132, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 176, 178, 179, 180, 181, 182, 183, 184, 191, 194, 198, 202, 203, 205, 207, 208, 212, 214, 215, 216, 222, 223], "current": [4, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 56, 58, 60, 62, 65, 82, 90, 111, 126, 129, 135, 223], "type": [4, 19, 21, 24, 29, 30, 31, 33, 35, 37, 41, 48, 49, 50, 58, 60, 65, 81, 82, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 126, 135, 139, 140, 141, 144, 145, 146, 148, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 176, 192, 193, 207, 208, 210, 211, 212, 223], "depend": [4, 21, 24, 29, 30, 31, 33, 35, 37, 81, 101, 102, 106, 108, 109, 110, 122, 139, 140, 141, 144, 145, 146, 148, 160, 161, 163, 165, 167, 168, 176, 223], "environ": [4, 7, 9, 14, 15, 17, 18, 19, 21, 24, 29, 30, 31, 33, 35, 37, 40, 46, 48, 49, 50, 51, 52, 53, 182, 222, 223], "get_param": [4, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 222], "retriev": [4, 9, 21, 33, 35, 37, 126, 129], "": [4, 9, 21, 33, 35, 37, 40, 51, 82, 126, 129, 144, 151, 176, 210, 211, 223], "polici": [4, 9, 21, 33, 35, 37, 46, 50, 52, 71, 146, 148, 182, 222, 223], "get_polici": [4, 9, 21, 33, 35, 37, 222], "get_prob_this_act": [4, 9, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 222], "get": [4, 7, 9, 17, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 40, 43, 44, 46, 56, 58, 60, 62, 65, 111, 114, 126, 130, 151, 170, 171, 174, 176, 222, 223], "probabl": [4, 9, 17, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 46, 71, 82, 88, 91, 94, 95, 114, 122, 126, 129, 140, 151, 157, 159, 171, 192, 196, 211, 223], "provid": [4, 33, 35, 37, 40, 65, 151, 155, 176, 179, 180, 181, 182, 223], "i": [4, 7, 9, 24, 25, 27, 29, 30, 31, 33, 35, 37, 43, 51, 58, 60, 62, 65, 81, 82, 87, 88, 89, 94, 103, 111, 112, 114, 117, 120, 122, 126, 129, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 157, 159, 162, 164, 169, 170, 171, 174, 176, 179, 180, 181, 196, 198, 199, 205, 221, 222, 223], "set_new_param": [4, 9, 12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 33, 35, 37, 222], "theta": [4, 9, 27, 33, 35, 37, 65, 82, 85, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 127, 129, 130, 131, 132, 135, 139, 140, 141, 144, 145, 146, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 176, 223], "updat": [4, 9, 21, 25, 33, 35, 37, 58, 60, 65, 120, 122, 126, 129, 182, 184, 195, 222], "next_observ": [4, 9, 21, 33, 35, 37], "reward": [4, 9, 21, 33, 35, 37, 58, 60, 62, 70, 71, 111, 148, 162, 164, 169, 170, 212, 223], "termin": [4, 9, 21, 33, 35, 37, 56, 58, 60, 62, 222], "accord": [4, 9, 21, 33, 35, 82, 195], "learn": [4, 7, 9, 21, 33, 35, 65, 69, 70, 72, 73, 74, 75, 76, 82, 86, 90, 96, 97, 98, 120, 122, 135, 139, 140, 141, 144, 145, 146, 148, 151, 152, 174, 181, 222, 223], "rule": [4, 9, 21, 33, 35, 60, 65], "overriden": [4, 9, 33, 35], "after": [4, 33, 35, 37, 82], "taken": [4, 9, 33, 35, 37, 40, 60, 62], "take": [4, 21, 24, 25, 27, 33, 35, 37, 62, 151, 223], "bool": [4, 33, 35, 37, 58, 60, 62, 65, 82, 147, 151, 174, 176, 178, 179, 180, 181, 182, 205], "whether": [4, 24, 29, 30, 31, 33, 35, 37, 52, 58, 60, 62, 65, 82, 106, 108, 135, 147, 151, 160, 161, 163, 165, 167, 168, 174, 176, 178, 179, 180, 181, 182, 183, 184, 199, 205, 216, 223], "hyperparam_and_setting_dict": [7, 21, 24, 29, 30, 31], "env_desc": 7, "basi": [7, 14, 15, 24, 29, 30, 31], "us": [7, 9, 14, 15, 21, 27, 29, 33, 37, 43, 44, 51, 52, 56, 60, 62, 65, 81, 82, 85, 87, 88, 89, 92, 93, 94, 103, 107, 111, 112, 117, 120, 122, 126, 129, 135, 136, 139, 140, 141, 144, 145, 146, 148, 149, 151, 170, 174, 176, 178, 179, 180, 181, 182, 183, 184, 196, 198, 208, 211, 212, 216, 221, 223], "linear": [7, 14, 15, 24, 29, 30, 31, 89, 92, 93, 120], "valu": [7, 15, 17, 27, 29, 30, 31, 37, 44, 65, 81, 82, 126, 135, 139, 140, 141, 142, 144, 145, 146, 148, 151, 155, 158, 166, 174, 176, 178, 179, 180, 181, 194, 198, 209, 214, 216, 223], "function": [7, 12, 14, 15, 16, 21, 24, 29, 30, 31, 39, 47, 51, 58, 65, 66, 71, 82, 89, 99, 111, 120, 121, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 139, 140, 141, 145, 146, 148, 150, 151, 152, 153, 154, 155, 156, 170, 174, 177, 179, 180, 181, 182, 183, 184, 186, 190, 197, 198, 204, 205, 206, 211, 213, 218, 223], "approxim": [7, 12, 14, 15, 24, 29, 30, 31], "see": [7, 30, 60, 65, 81, 111, 140, 144, 179, 180, 181, 222, 223], "http": [7, 27, 30, 37, 111, 140, 144, 207, 211], "irl": 7, "c": [7, 27, 30, 37, 111, 114, 140, 171], "brown": 7, "edu": [7, 27, 30, 37, 111, 140], "fb": 7, "php": 7, "refer": [7, 62, 148, 223], "each": [7, 24, 25, 27, 43, 62, 65, 67, 71, 73, 75, 82, 85, 88, 91, 94, 95, 126, 129, 135, 139, 140, 141, 144, 145, 146, 148, 149, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 176, 179, 180, 181, 196, 198, 205, 223], "featur": [7, 14, 15, 70, 75, 76, 82, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 127, 129, 132, 139, 140, 141, 144, 145, 146, 148, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 171, 176, 208, 223], "sine": 7, "cosin": 7, "certain": [7, 219], "order": [7, 82, 126, 129, 193, 223], "hyperparameter_and_setting_dict": [7, 24, 29, 30, 31, 48, 50, 52], "specifi": [7, 24, 29, 30, 31, 48, 50, 52, 65, 81, 82, 149, 151, 174, 176, 178, 179, 180, 181, 223], "number": [7, 17, 18, 24, 29, 30, 31, 40, 43, 44, 51, 52, 53, 58, 60, 62, 65, 67, 69, 75, 81, 82, 87, 88, 94, 114, 117, 126, 129, 135, 139, 140, 141, 144, 145, 146, 148, 151, 154, 171, 174, 176, 178, 179, 180, 181, 192, 214, 215, 216, 223], "episod": [7, 24, 29, 30, 31, 49, 50, 51, 52, 53, 70, 73, 103, 107, 111, 112, 146, 148, 162, 164, 169, 170, 176, 222, 223], "per": [7, 24, 29, 30, 31, 65, 107, 135, 164, 205], "trial": [7, 24, 29, 30, 31, 52, 82, 178, 192, 196], "env_descript": [7, 9, 14, 15, 19, 21, 24, 29, 30, 31, 33, 58, 60, 62, 222], "access": [7, 9, 14, 15, 19, 21, 24, 29, 30, 31, 40], "attribut": [7, 9, 14, 15, 19, 21, 24, 29, 30, 31, 40, 58, 60, 62, 67, 70, 72, 73, 75, 76, 82, 141, 145, 148, 151, 176, 223], "calculate_num_featur": [7, 222], "max_coupled_var": 7, "num_obs_dim": 7, "calcul": [7, 29, 58, 65, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 118, 135, 139, 140, 141, 144, 145, 146, 148, 151, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 174, 209, 212, 223], "reinforc": [7, 73, 223], "thi": [7, 9, 21, 27, 37, 48, 51, 56, 58, 60, 62, 65, 81, 82, 85, 101, 102, 106, 108, 109, 110, 111, 112, 114, 117, 126, 129, 139, 140, 141, 144, 145, 146, 147, 148, 151, 157, 159, 169, 170, 171, 174, 176, 214, 216, 222, 223], "comput": [7, 82, 126, 129, 135, 136, 144, 145, 146, 148, 151, 153, 179, 180, 181, 192, 196], "total": [7, 17, 18, 44, 65, 82, 151, 154], "consid": [7, 140], "maximum": [7, 27, 37, 43, 44, 58, 60, 81, 140, 151], "coupl": 7, "variabl": [7, 21, 43, 58, 60, 62, 126, 129, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 153], "dimens": [7, 40, 43, 214, 215, 216], "int": [7, 17, 18, 29, 44, 58, 60, 62, 65, 67, 69, 75, 82, 114, 135, 139, 140, 141, 144, 145, 146, 147, 148, 151, 154, 171, 174, 178, 179, 180, 181, 191, 192, 211, 214, 215, 216], "defin": [7, 24, 25, 27, 43, 135, 140, 149, 223], "highest": 7, "frequenc": 7, "can": [7, 30, 65, 67, 81, 82, 126, 130, 148, 151, 182, 184, 223], "singl": [7, 49, 50, 62, 65, 82, 85, 126, 145, 151, 174, 223], "control": [7, 135, 182, 183, 184, 216, 223], "complex": 7, "interact": [7, 223], "term": [7, 87, 88, 94, 114, 120, 135, 171], "space": [7, 9, 24, 27, 29, 30, 31, 37, 40, 41, 58, 60, 222], "num_featur": 7, "which": [7, 25, 37, 41, 65, 82, 120, 122, 126, 129, 130, 135, 139, 140, 141, 143, 144, 145, 146, 148, 149, 151, 170, 176, 178, 182, 184, 191, 223], "includ": [7, 51, 72, 76, 82, 87, 88, 94, 114, 146, 151, 171, 223], "possibl": [7, 17, 21, 24, 29, 30, 31, 40, 56, 58, 60, 62, 81, 140, 148, 223], "combin": [7, 82], "up": [7, 58, 65, 144, 151, 154, 223], "limit": [7, 188], "construct_basis_matrix": [7, 222], "construct": [7, 65, 82, 149, 223], "matrix": [7, 114, 126, 129, 141, 171, 223], "build": [7, 66, 137, 150, 151, 177, 194], "where": [7, 24, 29, 65, 67, 71, 81, 82, 85, 112, 120, 126, 129, 135, 139, 140, 141, 144, 145, 146, 148, 151, 174, 176, 182, 183, 184, 198, 202, 205, 212, 223], "row": [7, 85, 114, 141, 144, 171, 205, 223], "repres": [7, 123, 127, 132, 139, 142, 143, 151, 223], "basis_matrix": 7, "A": [7, 15, 17, 19, 27, 29, 46, 56, 58, 60, 62, 65, 67, 71, 72, 76, 81, 85, 123, 126, 127, 129, 132, 135, 139, 140, 141, 144, 145, 146, 148, 149, 151, 154, 162, 164, 169, 178, 179, 180, 181, 198, 199, 200, 201, 202, 203, 208, 219, 222], "2d": [7, 58, 71, 75, 208, 214, 215, 216], "numpi": [7, 29, 30, 31, 65, 67, 71, 73, 75, 89, 91, 92, 93, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 122, 123, 126, 127, 129, 132, 135, 139, 140, 141, 144, 145, 146, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 176, 207, 208, 210, 212], "arrai": [7, 17, 21, 24, 25, 27, 29, 30, 31, 37, 43, 46, 65, 67, 71, 73, 75, 87, 88, 94, 114, 120, 122, 123, 126, 127, 129, 149, 151, 171, 174, 176, 196, 207, 208, 212, 223], "shape": [7, 43, 75, 87, 88, 94, 114, 120, 122, 126, 129, 171, 223], "num_observation_dim": 7, "valid": [7, 41, 43, 60, 81, 117, 151, 179, 180, 181, 223], "entri": 7, "integ": [7, 82, 151, 223], "get_featur": [7, 222], "ob": [7, 17, 18, 21, 24, 25, 27, 29, 30, 31, 37, 40, 58, 60, 62, 70], "unnorm": 7, "ret_matrix": 7, "get_normalized_observ": [7, 222], "normal": [7, 151, 214, 215, 216], "norm_ob": 7, "act": 9, "discret": [9, 24, 29, 30, 31, 40, 41, 44], "pick": 9, "uniform": [9, 37, 81], "random": [9, 37, 126, 214, 215, 216], "capabl": [9, 18], "from": [9, 21, 24, 25, 27, 29, 30, 31, 37, 46, 48, 50, 58, 62, 65, 70, 71, 77, 78, 79, 82, 89, 92, 93, 123, 126, 127, 129, 130, 132, 137, 144, 146, 150, 151, 162, 164, 169, 176, 191, 194, 200, 201, 216, 223], "distribut": [9, 37, 81, 214, 215, 216], "doe": [9, 24, 25, 27, 65, 82, 144, 151, 154, 179, 180, 181, 222], "inform": [9, 58, 223], "specif": [9, 17, 24, 29, 30, 31, 48, 81, 82, 111, 148, 176, 177, 178, 179, 180, 181, 223], "Not": [9, 21, 33, 53, 149], "new_param": [12, 14, 15, 17, 18, 21, 24, 25, 27, 29, 30, 31, 37, 46], "set": [12, 14, 15, 17, 18, 21, 24, 27, 29, 30, 31, 37, 46, 50, 52, 53, 65, 82, 101, 102, 106, 108, 109, 110, 129, 135, 137, 141, 142, 151, 176, 223], "new": [12, 14, 15, 17, 18, 29, 30, 31, 46, 56, 71, 126, 146, 148, 151, 193, 194, 222, 223], "model": [12, 14, 15, 17, 18, 46, 65, 81, 135, 139, 140, 141, 144, 145, 146, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 176, 179, 180, 181, 182, 208, 222], "weight": [12, 14, 15, 17, 18, 21, 24, 27, 29, 30, 31, 37, 46, 65, 85, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 127, 129, 132, 135, 139, 140, 141, 144, 145, 146, 148, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 176, 179, 180, 181, 182, 212, 223], "encod": [14, 15, 223], "state": [15, 17, 18, 21, 40, 58, 60, 62], "min_stat": [17, 18], "num_stat": [17, 18, 58, 60], "num_act": 17, "q": [17, 19, 29], "contain": [17, 21, 25, 58, 60, 62, 65, 67, 70, 71, 81, 82, 86, 126, 135, 139, 140, 141, 144, 145, 146, 148, 149, 151, 153, 155, 156, 174, 176, 179, 180, 181, 183, 184, 193, 194, 196, 223], "transit": [17, 56, 58, 60, 62, 222], "smallest": [17, 18, 135], "from_environment_state_to_0_indexed_st": [17, 18, 222], "env_stat": [17, 18], "convert": [17, 18, 24, 29, 30, 31, 120, 122, 123, 127], "0": [17, 18, 24, 29, 30, 31, 43, 58, 60, 65, 81, 82, 89, 95, 100, 101, 102, 106, 108, 109, 110, 112, 126, 130, 135, 139, 140, 141, 144, 145, 146, 148, 151, 157, 159, 160, 161, 163, 165, 167, 168, 171, 174, 179, 180, 181, 182, 183, 184, 192, 196, 212, 214, 215, 216, 223], "index": [17, 18, 24, 29, 30, 31, 65, 114, 141, 145, 147, 148, 171, 212, 223], "you": [17, 18, 70, 81, 151, 154, 174, 203, 205, 221, 222, 223], "want": [17, 18, 41, 70, 81, 82, 145, 148, 151, 154, 174, 203, 205, 221, 223], "get_action_values_given_st": [17, 24, 29, 30, 31, 222], "state_number_not_zero_index": 17, "environment": 17, "get_action_values_given_zero_indexed_st": [17, 222], "zero_indexed_state_numb": 17, "hold": [18, 67, 68, 69, 71, 72, 73, 74, 75, 76], "reindex": 18, "creat": [19, 24, 29, 30, 31, 48, 51, 58, 60, 65, 70, 82, 120, 122, 139, 140, 141, 144, 145, 146, 148, 151, 152, 176, 182, 183, 184, 193, 223], "descript": [19, 24, 29, 30, 31, 56, 58, 60, 62, 223], "q_tabl": [19, 222], "parametr": 21, "softmax": [21, 222, 223], "pi": 21, "frac": 21, "e": [21, 65, 69, 70, 72, 76, 81, 82, 126, 135, 139, 140, 141, 144, 145, 146, 148, 151, 152, 155, 156, 174, 176, 179, 180, 181, 196, 198, 223], "p": [21, 130, 211, 223], "sum_": 21, "addit": [21, 65, 174, 176, 179, 180, 181, 223], "info": [21, 135, 176], "about": [21, 151, 223], "data": [21, 65, 67, 69, 70, 73, 75, 82, 85, 88, 94, 113, 118, 139, 140, 141, 144, 145, 146, 148, 151, 174, 176, 179, 180, 181, 182, 183, 184, 191, 193, 196, 202, 203, 210, 214, 215, 216, 223], "gener": [21, 24, 31, 51, 52, 53, 65, 82, 111, 135, 146, 148, 214, 215, 216, 223], "select": [21, 24, 25, 27, 29, 30, 31, 63, 64, 65, 80, 82, 133, 135, 139, 140, 141, 144, 145, 146, 148, 151, 174, 176, 178, 179, 180, 181, 182, 183, 222], "get_action_valu": [21, 222], "fa": 21, "float": [21, 27, 29, 30, 31, 37, 58, 60, 82, 91, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 176, 179, 180, 181, 182, 183, 184, 192, 196, 207, 208, 210, 211, 212, 214, 215, 216, 223], "ar": [24, 29, 37, 41, 43, 53, 65, 81, 82, 85, 126, 129, 135, 140, 141, 148, 149, 151, 174, 176, 179, 180, 181, 205, 212, 222, 223], "input": [24, 25, 27, 91, 95, 139, 140, 141, 144, 145, 146, 148, 154, 199, 200, 207, 212, 223], "how": [24, 25, 27, 30, 37, 81, 151, 223], "construct_basis_and_linear_fa": [24, 29, 30, 31, 222], "dictionari": [24, 29, 30, 31, 48, 50, 52, 53, 65, 77, 78, 79, 81, 135, 139, 140, 141, 144, 145, 146, 148, 176, 179, 180, 181, 205, 223], "from_0_indexed_action_to_environment_act": [24, 29, 30, 31, 222], "action_0_index": [24, 29, 30, 31], "env": [24, 29, 30, 31, 49, 53], "from_environment_action_to_0_indexed_act": [24, 29, 30, 31, 222], "env_act": [24, 29, 30, 31], "necessarili": [24, 25, 27], "need": [24, 25, 27, 65, 82, 126, 129, 130, 144, 147, 151, 152, 177, 223], "often": [24, 25, 27, 51, 53, 223], "call": [24, 25, 27, 40, 46, 122, 126, 129, 139, 140, 141, 144, 145, 146, 148, 154, 212, 223], "get_probs_from_observations_and_act": [24, 25, 27, 29, 30, 31, 46, 222], "behavior_action_prob": [24, 25, 27, 29, 30, 31], "make_state_action_fa": [24, 29, 30, 31, 222], "contin": [24, 29, 30, 31, 41], "some": [25, 85, 151, 223], "must": [25, 27, 37, 117, 120, 122, 123, 127, 139, 223], "ani": [25, 65, 67, 72, 76, 151, 152, 176, 223], "bb_crmin": [27, 37], "bb_crmax": [27, 37], "bb_cfmin": [27, 37], "bb_cfmax": [27, 37], "cr_shrink_factor": [27, 37], "cf_shrink_factor": [27, 37], "simglucos": [27, 37], "problem": [27, 37, 72, 111, 223], "studi": [27, 37], "exampl": [27, 37, 43, 81, 111, 145, 223], "umass": [27, 30, 37, 111, 140], "tutori": [27, 37, 111, 222, 223], "diabet": [27, 37, 111], "bound": [27, 37, 43, 60, 65, 89, 111, 115, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 170, 174, 176, 179, 180, 181, 192, 196, 223], "box": [27, 37, 65, 111, 142, 143, 147, 170, 223], "minimum": [27, 37, 43, 44, 81, 140, 151, 223], "cr": [27, 37, 111], "cf": [27, 37, 111], "much": [27, 37], "shrink": [27, 37], "size": [27, 37, 58, 65, 81, 82, 151, 154, 176, 191, 196], "theta2crcf": [27, 222], "cr_center": 27, "cf_center": 27, "keep": [27, 120, 151], "mind": [27, 120], "thei": [27, 81, 145, 149, 205, 223], "cap": 27, "so": [27, 65, 81, 82, 144, 148, 151, 223], "when": [27, 58, 65, 82, 139, 141, 145, 146, 148, 151, 178, 179, 180, 181, 205, 223], "fix": [27, 65, 82, 140, 174, 176, 223], "width": 27, "ad": [27, 223], "doesn": [27, 65, 85], "t": [27, 51, 65, 81, 85, 116, 117, 126, 129, 139, 140, 141, 144, 145, 146, 148, 211], "exce": 27, "origin": [27, 89, 191, 193, 194], "both": [29, 151, 179, 180, 181, 223], "faster": 29, "than": [29, 43, 53, 71, 140, 151, 174, 223], "just": [29, 46, 65, 122, 176], "becaus": [29, 51, 53, 65, 151, 205], "cach": [29, 151], "lookup": 29, "tabl": 29, "_arg": [29, 222], "helper": [29, 58, 151], "acceler": 29, "_denom": [29, 222], "choose_action_from_action_valu": [29, 30, 31, 222], "action_valu": [29, 30, 31], "list": [29, 30, 31, 51, 52, 53, 65, 67, 70, 71, 72, 73, 75, 76, 77, 81, 85, 103, 107, 111, 112, 126, 135, 139, 140, 141, 144, 145, 146, 148, 151, 152, 162, 164, 169, 174, 179, 180, 181, 182, 183, 184, 223], "param": [29, 30, 31, 108], "get_action_probs_from_action_valu": [29, 30, 31, 222], "probabilit": [29, 30, 31, 126], "get_e_to_the_something_term": [29, 30, 31, 222], "exponenti": [29, 30, 31, 135, 151], "obsertavt": [29, 31], "obserav": [29, 30], "action_prob": [29, 46, 71], "under": [29, 30, 31, 46], "behavior": [29, 30, 31, 46, 65, 71, 111, 135, 137, 146, 149, 150, 151, 153, 174, 179, 180, 181, 222], "pair": [29, 30, 31, 89, 92, 93, 144, 223], "ndarrai": [29, 30, 31, 43, 65, 67, 71, 73, 75, 89, 91, 92, 93, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 120, 122, 123, 126, 127, 129, 132, 135, 139, 140, 141, 144, 145, 146, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 176, 207, 208, 210, 212], "alpha": [30, 140, 192], "5": [30, 43, 60, 95, 179, 180, 181, 223], "mix": 30, "peopl": [30, 140], "pthoma": [30, 140], "paper": [30, 140], "thomas2015b": 30, "pdf": [30, 140], "equat": 30, "mu": 30, "last": [30, 176, 223], "paragraph": 30, "befor": [30, 50, 52, 82, 120, 122, 123, 127, 223], "section": 30, "2": [30, 43, 58, 65, 144, 145, 148, 151, 179, 180, 181, 202, 223], "1": [30, 43, 58, 60, 62, 65, 81, 82, 88, 100, 101, 102, 106, 108, 109, 110, 120, 126, 130, 135, 139, 140, 141, 144, 145, 146, 148, 157, 159, 160, 161, 163, 165, 167, 168, 171, 179, 180, 181, 192, 196, 214, 215, 216, 219, 223], "stationar": 30, "hyperparamet": [30, 80, 81, 82, 178, 179, 180, 181, 194, 223], "100": [30, 81, 135, 140], "far": [30, 223], "pi_b": 30, "discrete_action_polici": [31, 222], "debug": [33, 56, 60, 62, 135, 176], "gridworld": [33, 222], "intend": [33, 82], "public": 33, "sampl": [37, 82, 85, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 126, 129, 140, 155, 156, 162, 164, 169, 178, 179, 180, 181, 191, 210, 223], "whose": [37, 81, 111, 151, 170], "determin": [37, 82, 151, 182, 183, 184], "crmin": 37, "crmax": 37, "cfmin": 37, "cfmax": 37, "sigmoid": [37, 130, 222], "noop": 37, "observation_spac": 40, "action_spac": 40, "describ": [40, 58, 60, 62, 70], "conveni": [40, 151, 152, 182, 183, 184, 223], "continu": [40, 43], "made": 40, "get_min_act": [40, 222], "first": [40, 145, 151, 222, 223], "get_min_st": [40, 222], "get_num_act": [40, 222], "get_num_observation_dim": [40, 222], "get_num_st": [40, 222], "also": [40, 60, 117, 142, 143, 147, 151, 179, 180, 181, 212, 223], "here": [40, 53, 65, 81, 122, 126, 223], "desired_typ": 41, "ensur": [41, 60, 151, 179, 180, 181, 223], "equival": [41, 139, 140, 141, 144, 145, 146, 148, 157], "discrete_spac": [41, 222], "continous_spac": 41, "we": [41, 60, 65, 81, 82, 106, 108, 126, 135, 139, 140, 141, 144, 145, 146, 148, 151, 221, 223], "match": [41, 179, 180, 181], "np": [43, 85, 196, 207], "num_dim": 43, "min": [43, 44, 135, 144, 223], "max": [43, 44, 135, 223], "For": [43, 65, 145, 223], "3d": 43, "x": [43, 87, 88, 89, 91, 92, 93, 94, 95, 100, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 122, 123, 126, 127, 129, 132, 141, 144, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 171, 207, 208, 209, 214, 215, 216], "y": [43, 87, 88, 89, 92, 93, 94, 100, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 144, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 171, 208, 214, 215, 216], "4": [43, 65, 140, 149, 223], "z": [43, 140], "12": 43, "6": [43, 179, 181, 182, 183, 184, 223], "8": [43, 52, 223], "would": [43, 65, 135, 145, 148, 179, 180, 181, 223], "check_bounds_valid": [43, 222], "check": [43, 58, 60, 81, 151, 199], "format": [43, 70, 81, 223], "larger": [43, 140], "get_num_dim": [43, 222], "get_num_valu": [44, 222], "env_kwarg": [46, 182, 223], "seldonianmodel": [46, 65, 85, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 139, 140, 141, 144, 145, 146, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 180, 181, 208, 222], "parameter": [46, 146, 148, 223], "dict": [46, 48, 50, 52, 65, 135, 139, 140, 141, 144, 145, 146, 148, 149, 151, 153, 155, 156, 174, 179, 180, 181, 182, 202, 205], "kwarg": [46, 65, 67, 69, 70, 73, 82, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 122, 126, 129, 135, 139, 140, 141, 142, 143, 144, 145, 146, 148, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 182, 219], "pertain": [46, 182], "gamma": [46, 58, 62, 182, 212, 223], "discount": [46, 58, 62, 112, 182, 212, 223], "factor": [46, 58, 62, 139, 151, 182, 212, 223], "wrapper": [46, 62, 65, 80, 126, 129, 136, 154, 174, 176, 189, 200, 201, 202, 203, 208], "same": [46, 117, 120, 122, 126, 129, 144, 176, 193], "name": [46, 65, 70, 72, 76, 77, 81, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 155, 156, 179, 180, 181, 183, 223], "agent": [48, 49, 50, 51, 52, 53, 222], "onli": [48, 65, 75, 82, 90, 117, 129, 135, 140, 174, 205, 219, 223], "work": [48, 207, 223], "built": [48, 126, 129, 151, 179, 180, 181, 182, 223], "run": [49, 50, 51, 52, 53, 65, 66, 82, 83, 120, 126, 129, 135, 173, 174, 175, 176, 177, 178, 179, 180, 181, 205, 222], "model_param": [50, 52], "none": [50, 52, 65, 70, 72, 76, 82, 135, 147, 174, 176, 178, 179, 180, 181, 182], "default": [50, 65, 67, 70, 72, 73, 75, 76, 135, 136, 146, 147, 151, 152, 174, 176, 179, 180, 181, 182, 184, 223], "create_agent_func": 51, "create_env_func": 51, "num_episodes_this_proc": 51, "bunch": 51, "parallel": [51, 52, 53, 178], "process": [51, 52, 176, 178, 223], "explicitli": [51, 53, 179, 180, 181, 223], "pass": [51, 82, 120, 122, 123, 126, 127, 129, 132, 139, 140, 141, 144, 145, 146, 148, 151, 174, 176, 179, 180, 181, 182, 192, 196, 223], "those": [51, 149, 151, 179, 180, 181], "result": [51, 82, 123, 126, 127, 129, 132, 179, 180, 181, 196, 223], "error": [51, 65, 81, 100, 104, 105, 115, 116, 140, 144, 157, 158, 159, 166, 176, 222, 223], "mani": [51, 182, 184], "aren": 51, "picklabl": 51, "necessari": [51, 151, 179, 180, 181, 223], "condit": [51, 139, 140, 141, 144, 145, 146, 148, 151, 152], "python": [51, 151, 211, 221, 223], "multiprocess": 51, "pool": [51, 178], "fals": [52, 58, 65, 82, 101, 102, 135, 145, 146, 148, 151, 155, 156, 160, 161, 176, 179, 180, 181, 182, 183, 184, 202, 203, 205, 216, 223], "n_worker": 52, "verbos": [52, 135, 176, 179, 180, 181, 182, 183, 184, 202, 203], "cpu": 52, "num_episod": 53, "epido": 53, "rather": 53, "via": [53, 146, 148, 151, 223], "pickleabl": 53, "get_env_descript": [56, 58, 60, 62, 222], "get_observ": [56, 58, 60, 62, 222], "reset": [56, 58, 60, 62, 151, 222], "initi": [56, 58, 60, 62, 65, 82, 135, 179, 180, 181, 182], "start_visu": [56, 58, 60, 62, 222], "turn": [56, 58, 60, 62], "visual": [56, 58, 60, 62, 142, 143, 147, 151, 221, 222, 223], "debugg": [56, 58, 60, 62], "stop_visu": [56, 58, 60, 62, 222], "off": [56, 58, 60, 62, 146, 148], "print": [56, 58, 60, 62, 135, 176, 219], "out": [56, 58, 60, 62, 82, 126, 135, 176, 192, 219], "3": [58, 140, 145, 214, 216, 223], "squar": [58, 105, 115, 116, 140, 166, 223], "arbitrari": [58, 67, 148], "right": [58, 60, 126, 129, 147, 151, 223], "down": 58, "left": [58, 60, 126, 129, 147, 151, 223], "hardcod": [58, 60, 62, 89, 111], "enter": 58, "7": 58, "bottom": 58, "elsewher": [58, 81], "grid": [58, 81, 82], "cell": 58, "side": [58, 151], "distinct": 58, "locat": 58, "rang": 58, "top": [58, 151, 223], "terminal_st": [58, 60, 62], "occupi": [58, 60, 62], "time": [58, 60, 62, 81, 154, 176, 198], "timestep": [58, 60, 62, 71, 223], "max_tim": [58, 60], "allow": [58, 60, 82, 148, 151, 198], "expect": [58, 111, 112, 139, 140, 141, 144, 145, 146, 148, 189], "create_env_descript": [58, 60, 222], "is_in_goal_st": [58, 222], "goal": [58, 60, 223], "true": [58, 65, 109, 110, 114, 139, 140, 141, 144, 145, 146, 148, 167, 168, 171, 179, 180, 181, 182, 183, 184, 205, 223], "go": [58, 60, 62, 82, 223], "back": [58, 60, 62, 65, 120, 122, 123, 127, 179, 180, 181], "between": [58, 60, 62, 81, 100, 101, 102, 106, 108, 109, 110, 135, 144, 157, 159, 160, 161, 163, 165, 167, 168, 171, 188, 223], "reach": [58, 60, 62], "next": [58, 60, 62], "update_posit": [58, 222], "posit": [58, 60, 62, 88, 91, 95, 102, 108, 110, 126, 129, 140, 145, 151, 155, 156, 161, 165, 168, 223], "classic": [60, 62], "veloc": [60, 62, 135], "forc": [60, 223], "1d": [60, 75, 82, 120, 122, 126, 129, 151, 208], "physic": 60, "car": [60, 62], "check_valid_mc_act": [60, 222], "wa": [60, 65, 82, 114, 144, 145, 151, 171, 176, 223], "propos": [60, 146], "position_and_termination_upd": [60, 222], "have": [60, 65, 82, 88, 91, 94, 95, 139, 140, 141, 144, 145, 146, 148, 151, 223], "gone": 60, "outsid": 60, "update_veloc": [60, 222], "appli": [60, 151], "extend": [62, 223], "mountaincar": [62, 222], "n_step": 62, "instead": 62, "onc": [62, 151, 223], "docstr": [62, 81], "repeat": [62, 205, 223], "step": [62, 81, 135], "follow": [62, 81, 223], "mc_env": 62, "instanc": [62, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 127, 132, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 208], "cart": 62, "mountain": 62, "candid": [63, 64, 65, 82, 133, 135, 139, 140, 141, 144, 145, 146, 148, 151, 174, 176, 179, 180, 181, 182, 183, 222], "candidate_dataset": [65, 82, 179, 180, 181], "n_safeti": [65, 82, 176], "parse_tre": [65, 174, 176, 179, 180, 181, 222, 223], "primary_object": [65, 135, 136, 174, 176, 179, 180, 181], "optimization_techniqu": [65, 179, 180, 181, 223], "barrier_funct": [65, 179, 180, 181, 223], "optim": [65, 81, 82, 176, 179, 180, 181, 222, 223], "powel": [65, 82, 223], "initial_solut": [65, 176], "regim": [65, 67, 69, 70, 72, 78, 85, 151, 152, 174, 176, 191, 223], "supervised_learn": [65, 69, 70, 72, 151, 152, 174, 176, 223], "write_logfil": [65, 82, 176], "additional_dataset": [65, 174, 179, 180, 181], "dataset": [65, 82, 139, 140, 141, 144, 145, 146, 148, 152, 158, 166, 174, 176, 179, 180, 181, 182, 183, 184, 191, 193, 216, 222], "length": [65, 85, 88, 140, 149, 151, 176], "safeti": [65, 82, 139, 140, 141, 144, 145, 146, 148, 172, 173, 174, 176, 179, 180, 181, 182, 183, 222], "predict": [65, 85, 88, 89, 91, 92, 93, 94, 95, 114, 120, 122, 126, 129, 139, 140, 141, 144, 145, 146, 148, 157, 159, 171, 222, 223], "confid": [65, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 182, 183, 184, 192, 196, 223], "dure": [65, 135, 139, 146, 149, 176, 178, 179, 180, 181, 223], "parsetre": [65, 174, 179, 180, 181, 222, 223], "pars": [65, 137, 139, 142, 143, 144, 147, 149, 150, 151, 152, 174, 176, 179, 180, 181, 194, 221, 223], "tree": [65, 137, 139, 142, 143, 144, 147, 149, 150, 151, 152, 174, 176, 179, 180, 181, 194, 221, 222, 223], "constraint": [65, 135, 136, 137, 145, 149, 150, 151, 152, 153, 162, 164, 169, 170, 174, 176, 179, 180, 181, 182, 183, 184, 205, 222], "sole": [65, 135, 179, 180, 181], "absenc": [65, 135, 179, 180, 181], "loss": [65, 113, 117, 118, 135, 179, 180, 181, 223], "str": [65, 69, 70, 72, 76, 77, 79, 82, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 155, 156, 174, 176, 178, 179, 180, 181, 182, 183, 184, 191, 199, 200, 201, 202, 203, 205], "g": [65, 69, 70, 72, 76, 135, 139, 140, 141, 144, 145, 146, 148, 151, 152, 155, 156, 174, 179, 180, 181, 223], "gradient_desc": [65, 179, 180, 181, 222, 223], "string": [65, 142, 143, 147, 148, 149, 151, 152, 153, 176, 179, 180, 181, 182, 183, 184, 222], "categori": [65, 69, 70, 72, 76, 151, 152, 174, 219], "machin": [65, 69, 70, 72, 76, 86, 90, 97, 139, 140, 141, 144, 145, 146, 148, 151, 152, 174, 222, 223], "algorithm": [65, 66, 69, 70, 72, 76, 80, 82, 83, 144, 151, 152, 174, 175, 176, 177, 179, 180, 181, 223], "reinforcement_learn": [65, 69, 70, 72, 151, 152, 174, 176, 223], "write": [65, 82, 145, 176, 223], "output": [65, 122, 198, 223], "disk": [65, 70], "option": [65, 70, 135, 174, 179, 180, 181, 216, 223], "node": [65, 126, 129, 151, 152, 174, 176, 179, 180, 181, 222, 223], "calculate_batch": [65, 222], "batch_index": 65, "batch_siz": [65, 135, 154, 176], "epoch": [65, 135], "n_batch": [65, 135], "batch": [65, 135, 154, 176], "primari": [65, 71, 111, 112, 135, 136, 148, 170, 174, 176, 179, 180, 181, 182, 205, 223], "gradient": [65, 115, 116, 117, 122, 135, 136, 179, 180, 181, 182, 205, 223], "descent": [65, 135, 205, 223], "batch_dataset": 65, "logic": [65, 151], "solut": [65, 82, 135, 151, 174, 176, 205, 223], "viabl": [65, 135], "calculate_batches_addl_dataset": [65, 222], "primary_epoch_index": 65, "primary_batch_index": 65, "batch_indic": 65, "store": [65, 82, 151], "precalcul": 65, "make": [65, 120, 151, 205, 223], "easi": 65, "anyth": 65, "evaluate_primary_object": [65, 174, 176, 222], "kkt": [65, 135, 223], "evalu": [65, 126, 129, 139, 140, 141, 144, 145, 146, 148, 151, 155, 156, 174, 176, 198], "get_constraint_upper_bound": [65, 222], "obtain": [65, 123, 127, 132, 136, 176], "upper": [65, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 174, 176, 223], "get_importance_weight": [65, 174, 176, 222], "import": [65, 103, 107, 112, 162, 164, 169, 174, 176, 221, 223], "applic": [65, 111, 223], "rl": [65, 71, 77, 151, 174, 179, 212, 222, 223], "objective_with_barri": [65, 222], "barrier": [65, 223], "add": [65, 126, 130, 151], "larg": [65, 179, 180, 181], "penalti": 65, "violat": [65, 151, 223], "precalculate_addl_dataset_batch_indic": [65, 222], "n_epoch": [65, 135], "primary_batch_s": 65, "indic": [65, 82, 141, 176, 187, 223], "correspond": [65, 114, 152, 171, 211, 223], "start": [65, 81, 222, 223], "end": [65, 151, 223], "iter": [65, 81, 82, 135, 144, 198, 223], "look": [65, 223], "them": [65, 126], "place": 65, "custom": [65, 67, 68, 69, 78, 85, 140, 144, 176, 207, 223], "addl": [65, 176], "miss": [65, 179, 180, 181], "If": [65, 81, 82, 135, 146, 148, 149, 151, 179, 180, 181, 182, 221, 222, 223], "wrap": [65, 223], "around": [65, 126, 129, 208], "dataseet": 65, "reason": [65, 85], "either": [65, 81, 176, 179, 180, 181, 223], "wraparound": 65, "start1": 65, "end1": 65, "start2": 65, "end2": 65, "entir": [65, 151, 179, 180, 181], "don": 65, "reus": 65, "datapoint": [65, 82, 87, 88, 94, 114, 120, 126, 129, 154, 171, 174], "iv": [65, 205], "There": [65, 144, 148, 151, 223], "concept": [65, 223], "simpli": 65, "begin": 65, "peoch": 65, "techniqu": [65, 223], "black": [65, 223], "candidate_solut": [65, 176], "nsf": [65, 135, 176, 223], "found": [65, 174, 176, 223], "usual": 65, "load": [66, 70, 77, 78, 79, 82, 200, 201, 223], "sensitive_attr": [67, 73, 75], "num_datapoint": [67, 69, 75], "meta": [67, 69, 73, 75], "flexibl": 67, "form": [67, 111, 151, 223], "point": [67, 69, 73, 75, 82, 88, 94, 113, 118, 135, 144, 191, 193, 200, 201, 214, 215, 216, 223], "sensit": [67, 70, 72, 73, 75, 76, 82, 176, 183, 223], "rlmetadata": [67, 73, 77, 222], "metadata": [67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 183, 184, 222, 223], "all_col_nam": [68, 72, 74, 76], "sensitive_col_nam": [68, 72, 74, 76, 183], "abstract": 69, "agnost": [69, 176], "load_rl_dataset_from_csv": [70, 222, 223], "filenam": [70, 78, 79, 198, 200, 201, 202, 203, 219, 223], "metadata_filenam": [70, 77, 223], "rldataset": [70, 222, 223], "file": [70, 77, 78, 79, 82, 176, 182, 183, 184, 200, 201, 202, 203, 223], "save": [70, 82, 182, 183, 184, 191, 198, 202, 203, 205, 223], "csv": [70, 223], "episode_index": 70, "probability_of_act": 70, "load_rl_dataset_from_episode_fil": [70, 222, 223], "pickl": [70, 82, 176, 201, 203, 223], "filepath": 70, "load_supervised_dataset": [70, 222, 223], "file_typ": 70, "superviseddataset": [70, 216, 222, 223], "label": [70, 72, 75, 76, 82, 87, 88, 89, 91, 92, 93, 94, 95, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 122, 126, 129, 139, 140, 141, 144, 145, 146, 148, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 171, 176, 205, 208, 223], "extens": 70, "alt_reward": 71, "column": [71, 72, 75, 76, 77, 114, 139, 140, 141, 144, 145, 146, 148, 151, 152, 171, 183, 223], "other": [71, 82, 111, 145, 176, 223], "sub_regim": [72, 76, 139, 140, 141, 145, 146, 148, 151, 152, 181, 183, 223], "sub": [72, 76, 151, 152, 223], "classif": [72, 76, 90, 113, 118, 145, 151, 160, 161, 163, 165, 167, 168, 181, 183, 223], "regress": [72, 76, 87, 88, 89, 92, 93, 94, 96, 117, 144, 151, 152, 181, 183, 223], "supervis": [72, 74, 75, 76, 82, 96, 98, 122, 151, 181, 223], "n_featur": 75, "support": [75, 90, 149, 223], "feature_col_nam": 76, "label_col_nam": 76, "required_col_nam": 77, "json": [77, 78, 79, 200, 202, 223], "requir": [77, 81, 149, 151, 180, 221, 223], "datataset": 77, "jsonfil": 78, "custommetadata": [78, 222], "supervisedmetadata": [79, 222], "hyper_dict": [81, 82], "one": [81, 145, 146, 148, 149, 151, 179, 180, 181, 182, 223], "tune": [81, 82, 178], "adher": 81, "kei": [81, 176, 179, 180, 181, 223], "do": [81, 82, 117, 120, 122, 123, 127, 129, 132, 139, 140, 141, 144, 145, 146, 148, 222], "search": [81, 82, 151], "over": [81, 82, 100, 101, 102, 104, 105, 113, 118, 120, 126, 129, 151, 155, 174, 178, 223], "hyper_typ": 81, "tuning_method": [81, 82], "sa": [81, 222], "grid_search": 81, "cma": [81, 82, 198, 223], "initial_valu": 81, "min_val": [81, 188], "max_val": [81, 188], "search_distribut": 81, "log": [81, 82, 117, 151, 176, 198, 223], "betwen": 81, "common": 81, "num_it": [81, 135, 179, 180, 181], "alpha_theta": [81, 135, 179, 180, 181], "500": 81, "1000": 81, "1500": [81, 223], "005": [81, 179, 180, 181], "0001": 81, "_valid": [81, 222], "properli": 81, "know": [81, 223], "what": [81, 142, 143, 147, 179, 180, 181, 222], "might": [81, 223], "ahead": 81, "regard": 81, "caught": 81, "spec": [82, 176, 194, 195, 208, 222], "hyperparam_spec": [82, 192, 196], "results_dir": 82, "find": [82, 135, 223], "best": [82, 223], "safe": 82, "complet": [82, 176, 222, 223], "hyperparameterselectionspec": [82, 222], "hyparpamet": 82, "directori": [82, 182, 183, 184, 199, 223], "_get_theta_init_from_hyper_dict": [82, 222], "util": [82, 222, 223], "pack": 82, "hyperparam": 82, "vector": [82, 116, 122, 123, 126, 127, 129, 132, 135, 139, 140, 141, 144, 145, 146, 148, 151, 158, 162, 164, 166, 169, 209, 210], "_unpack_theta_to_hyperparam_valu": [82, 222], "unpack": 82, "inject": [82, 194], "aggregate_est_prob_pass": [82, 222], "est_frac_data_in_safeti": 82, "bootstrap_savedir": 82, "estim": [82, 103, 107, 111, 112, 139, 140, 141, 145, 146, 148, 153, 162, 164, 169, 223], "fraction": [82, 176, 179, 180, 181, 182, 183], "probabiilti": 82, "root": [82, 151, 174], "diretori": 82, "bootstrap": [82, 178, 191, 196], "aggreg": 82, "candidate_safety_combin": [82, 222], "safety_dataset": [82, 174, 179, 180, 181], "full": [82, 144, 205, 223], "join": 82, "come": 82, "combinded_dataset": 82, "candidate_safety_split": [82, 176, 222], "frac_data_in_safeti": [82, 176, 179, 180, 181, 182, 183, 184], "split": [82, 151, 176, 179, 180, 181, 223], "test": [82, 139, 140, 141, 144, 145, 146, 148, 172, 173, 174, 176, 179, 180, 181, 182, 183, 205, 222], "remain": [82, 176, 179, 180, 181, 182, 183], "f_c": [82, 176], "f_": [82, 176], "l_c": [82, 176], "l_": [82, 176], "s_c": [82, 176], "s_": [82, 176], "f": [82, 135, 144, 176, 198, 205, 223], "l": [82, 135, 176, 205, 223], "tupl": [82, 135, 151, 176, 223], "cmaes_object": [82, 222], "fixed_hyperparam_set": 82, "tri": [82, 223], "minim": [82, 223], "prob_pass": 82, "maxim": 82, "thing": [82, 223], "try": [82, 223], "minimz": 82, "frozen": 82, "create_bootstrap_trial_spec": [82, 222], "bootstrap_trial_i": 82, "hyperparam_set": [82, 195], "spec_for_bootstrap_tri": 82, "create_dataset": [82, 222], "shuffl": [82, 193], "partit": [82, 223], "should": [82, 111, 151, 223], "two": [82, 149, 151, 223], "find_best_frac_data_in_safeti": [82, 222], "threshold": [82, 140, 182, 183, 184], "01": 82, "percentag": 82, "elf": 82, "rtyle": 82, "find_best_hyperparamet": [82, 222], "hyperschema": [82, 178, 222], "figur": [82, 144, 205, 223], "ones": 82, "generate_all_bootstrap_dataset": [82, 222], "n_bootstrap_samples_candid": 82, "n_bootstrap_samples_safeti": 82, "resampl": [82, 191], "replac": 82, "n_bootstrap_tri": [82, 178, 192], "version": 82, "get_all_greater_est_prob_pass": [82, 222], "all_frac_data_in_safeti": 82, "get_bootstrap_dataset_s": [82, 222], "get_est_prob_pass": [82, 222], "rho_prim": 82, "get_gridsearchable_hyperparameter_iter": [82, 222], "everi": 82, "searchabl": 82, "get_safety_s": [82, 222], "n_total": 82, "desir": 82, "powell_object": [82, 222], "run_bootstrap_tri": [82, 222], "parent_savedir": 82, "train": [82, 87, 88, 89, 92, 93, 94, 223], "boolean": [82, 135, 146, 148, 149, 176, 182, 183, 184, 203, 216, 223], "actual": [82, 129, 140, 154, 223], "ha": [82, 95, 101, 102, 106, 108, 109, 110, 135, 145, 149, 151, 223], "been": [82, 151, 223], "alreadi": [82, 151, 223], "experi": 82, "u": [82, 111, 198], "identifi": 82, "adn": 82, "run_cma": [82, 222], "run_powel": [82, 222], "fallback": 82, "demo": 85, "illustr": [85, 223], "charact": 85, "dot": [85, 223], "product": [85, 207, 208], "numer": [85, 223], "represent": [85, 142, 143, 147, 149], "autograd": [85, 126, 129, 135, 136, 179, 180, 181, 182, 207], "like": [85, 149, 151, 223], "case": [85, 130, 151, 187, 223], "three": 85, "element": [85, 114, 171], "main": [86, 150], "classificationmodel": [87, 91, 95, 126, 129, 222, 223], "binari": [87, 88, 90, 101, 102, 106, 108, 109, 110, 113, 117, 160, 161, 163, 165, 167, 168], "multi": [87, 94, 101, 102, 106, 108, 109, 110, 118, 160, 161, 163, 165, 167, 168], "logist": [87, 88, 94, 113, 117, 118], "fit": [87, 88, 89, 92, 93, 94, 126, 129, 208, 222, 223], "let": [87, 88, 94, 114, 171, 223], "j": [87, 88, 94, 112, 114, 120, 126, 129, 141, 171], "bia": [87, 88, 94, 114, 171], "provi": [87, 88, 94, 114, 171, 223], "k": [87, 88, 94, 114, 141, 171], "baselogisticregressionmodel": [88, 94, 222], "linearregressionmodel": [89, 222, 223], "sever": [89, 140, 144, 223], "parent": [89, 90, 96, 97, 98, 140, 144], "assum": 89, "intercept": [89, 120], "nxm": [89, 92, 93], "nx1": [89, 92, 93], "squash": 89, "supervisedmodel": [90, 96, 122, 222], "classifi": [91, 95, 126, 129], "alwai": [91, 95, 139, 140, 141, 144, 145, 146, 148, 151, 223], "regardless": [91, 95, 223], "regressionmodel": [92, 93, 222, 223], "prob": [95, 126, 129, 130], "mean": [100, 101, 102, 104, 105, 106, 108, 109, 110, 113, 114, 116, 118, 144, 155, 160, 161, 163, 165, 167, 168, 169, 214, 215, 216, 223], "rate": [100, 101, 102, 106, 108, 109, 110, 135, 145, 151, 155, 156, 157, 159, 160, 161, 163, 165, 167, 168, 223], "whole": [100, 101, 102, 104, 105, 106, 108, 109, 110, 151, 155], "probabilist": [101, 102, 157], "neg": [101, 106, 109, 151, 160, 163, 167], "slightli": [101, 102, 106, 108, 109, 110], "differ": [101, 102, 106, 108, 109, 110, 144, 223], "v": [101, 102, 109, 110, 210], "vanilla": [103, 126, 129, 223], "y_hat": [104, 158], "re": [106, 108, 126, 129], "decis": [107, 126, 129, 130, 164], "pdi": [107, 164], "fall": [111, 170, 179, 180, 181], "within": [111, 170, 176], "It": [111, 179, 180, 181, 223], "its": [111, 139, 140, 141, 144, 145, 146, 148, 223], "arxiv": 111, "org": [111, 144], "ab": [111, 223], "1611": 111, "03451": 111, "wi": [112, 169], "sum": [112, 151, 212], "n": [112, 126, 154, 205, 223], "rho_i": 112, "rhosum": 112, "g_i": [112, 205, 223], "rho_j": 112, "l_i": [114, 171], "l_k": [114, 171], "confus": [114, 141, 171], "analyt": 115, "bse": 115, "d": [115, 116, 117, 120, 123, 126, 127, 129, 132, 176], "dtheta": [115, 116, 117, 123, 127, 132], "w": [116, 117], "r": [116, 117], "mse": 116, "warn": [117, 222], "NOT": 117, "FOR": 117, "neural": 117, "network": 117, "supervisedsklearnbasemodel": [120, 123, 222], "regressor": 120, "scikit": [120, 122, 223], "backward_pass": [120, 122, 222], "jacobian": [120, 123, 126, 127, 129, 132], "forward_pass": [120, 122, 126, 129, 222], "_i": [120, 126, 129, 223], "dtheta_": [120, 126], "henc": 120, "create_model": [120, 122, 222], "get_model_param": [120, 122, 222], "arg": [120, 122, 219], "flatten": [120, 122, 126], "forward": [120, 122, 123, 126, 127, 129, 132, 174, 179, 180, 181], "through": [120, 122, 123, 127, 129, 132, 144, 151, 174, 179, 180, 181], "sklearn": [120, 122, 123, 126, 127, 129, 132], "update_model_param": [120, 122, 222], "reshap": [120, 122], "external_grad": 122, "backward": [122, 123, 127, 132], "respect": 122, "pred": [123, 127, 129, 132], "inherit": [123, 141, 145, 148, 223], "fn": [123, 127, 132], "oper": [123, 127, 132, 139, 143, 222, 223], "rf_kwarg": 126, "forest": 126, "leaf": [126, 129, 139, 142, 143, 174], "randomforestclassifi": 126, "n_tree": 126, "assign": [126, 151], "id": [126, 129], "sublist": 126, "flattend": 126, "postiv": 126, "probs_pos_class": [126, 129], "leaf_nodes_hit": [126, 129], "were": [126, 129, 151], "hit": [126, 129], "These": [126, 129, 143, 148, 223], "get_jacobian": [126, 129, 222], "sum_k": 126, "forward_k": 126, "separ": [126, 223], "horizont": 126, "stack": 126, "front": 126, "isn": [126, 129], "get_leaf_node_prob": [126, 129, 222], "primit": [126, 129], "workaround": [126, 129], "sinc": [126, 129], "our": [126, 129, 223], "involv": [126, 129], "extern": [126, 129], "librari": [126, 129, 135, 136, 222, 223], "set_leaf_node_valu": [126, 129, 222], "categor": [126, 223], "seldonianrandomforest": [127, 222], "dt_kwarg": 129, "decisiontreeclassifi": 129, "dtheta_j": 129, "rtype": 129, "constant": [130, 142, 151, 212, 223], "stabil": 130, "happen": [130, 223], "n_constraint": 135, "upper_bounds_funct": [135, 136], "theta_init": 135, "lambda_init": [135, 179, 180, 181], "batch_calcul": 135, "05": [135, 139, 140, 141, 144, 145, 146, 148, 196, 223], "alpha_lamb": [135, 179, 180, 181], "beta_veloc": [135, 179, 180, 181], "9": [135, 179, 180, 181, 212, 223], "beta_rmsprop": [135, 179, 180, 181], "gradient_librari": [135, 136, 179, 180, 181], "clip_theta": 135, "simultan": 135, "ascent": 135, "adam": [135, 179, 180, 181, 223], "lagrangian": [135, 205, 223], "lambda": [135, 223], "lagrang": [135, 205], "multipli": [135, 151, 205], "done": 135, "saddl": 135, "interest": 135, "Being": 135, "part": [135, 219, 223], "nan": [135, 151], "inf": [135, 139, 140, 141, 143, 144, 145, 146, 148], "occur": [135, 176], "feasibl": [135, 223], "satisfi": [135, 223], "decai": 135, "rmsprop": 135, "automat": [135, 136], "clip": [135, 214, 216], "flag": [135, 146, 176, 182, 183, 184, 203, 216, 223], "lower": [139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151], "conditional_column": [139, 140, 141, 144, 145, 146, 148], "measur": [139, 140, 141, 145, 146, 148, 151, 153, 223], "being": [139, 141, 145, 146, 148], "node_typ": [139, 142], "equal": [139, 151, 152, 174, 223], "base_nod": [139, 176], "delta_low": [139, 140, 141, 144, 145, 146, 148], "share": [139, 140, 144], "put": [139, 140, 144], "delta_upp": [139, 140, 141, 144, 145, 146, 148], "infl_factor_low": 139, "inflat": [139, 151], "infl_factor_upp": 139, "measure_function_nam": [139, 146], "statist": [139, 145, 155, 156, 223], "fpr": [139, 155, 156, 223], "measure_funct": [139, 223], "calculate_bound": [139, 140, 141, 144, 145, 146, 148, 222], "bound_method": [139, 140, 141, 144, 145, 146, 148], "map": [139, 140, 141, 144, 145, 146, 148, 149, 153], "calculate_data_forbound": [139, 140, 141, 144, 145, 146, 148, 222], "prepar": [139, 140, 141, 145, 146, 148], "data_dict": [139, 140, 141, 144, 145, 146, 148, 155, 156], "calculate_valu": [139, 140, 141, 144, 145, 146, 148, 222], "etc": [139, 141, 143, 144, 145, 146, 148], "compute_hc_lowerbound": [139, 140, 141, 144, 145, 146, 148, 222], "datas": [139, 140, 141, 144, 145, 146, 148], "delta": [139, 140, 141, 144, 145, 146, 148, 151, 152, 182, 183, 184, 196, 223], "high": [139, 140, 141, 144, 145, 146, 148], "level": [139, 140, 141, 144, 145, 146, 148, 151, 196, 223], "compute_hc_upper_and_lowerbound": [139, 140, 141, 144, 145, 146, 148, 222], "compute_hc_upperbound": [139, 140, 141, 144, 145, 146, 148, 222], "independ": [139, 140, 141, 144, 145, 146, 148, 223], "mask_data": [139, 140, 141, 144, 145, 146, 148, 222], "mask": [139, 140, 141, 144, 145, 146, 148], "joint": [139, 140, 141, 144, 145, 146, 148], "AND": [139, 140, 141, 144, 145, 146, 148], "datafram": [139, 140, 141, 144, 145, 146, 148, 151, 162, 164, 169, 191], "predict_hc_lowerbound": [139, 140, 141, 144, 145, 146, 148, 222], "predict_hc_upper_and_lowerbound": [139, 140, 141, 144, 145, 146, 148, 222], "predict_hc_upperbound": [139, 140, 141, 144, 145, 146, 148, 222], "zhat": [139, 140, 141, 144, 145, 146, 148, 153, 222], "unbias": [139, 140, 141, 145, 146, 148, 153], "basenod": [140, 141, 144, 145, 146, 148, 222], "cvar_alpha": 140, "definit": [140, 223], "least": [140, 223], "var_alpha": 140, "largest": 140, "thoma": [140, 144], "miller": 140, "2019": [140, 144], "thomas2019": 140, "theorem": 140, "cvar": 140, "sort": 140, "b": [140, 149, 151], "n_candid": [140, 176], "cm_true_index": 141, "cm_pred_index": 141, "c_ij": 141, "c_00": 141, "c_01": 141, "c_0k": 141, "______": 141, "_____": 141, "c_10": 141, "c_11": 141, "c_1k": 141, "c_k0": 141, "c_k1": 141, "c_kk": 141, "constant_nod": 142, "displai": [142, 143, 147, 151, 205], "insid": [142, 143, 147], "graph": [142, 143, 147, 151, 221], "intern": [143, 223], "non": 143, "perform": [143, 146, 223], "wise": 144, "male": [144, 223], "femal": [144, 223], "present": [144, 151, 162, 164, 169, 179, 180, 181], "et": 144, "al": 144, "www": [144, 211], "scienc": 144, "stoken": 144, "author": 144, "token": 144, "st": 144, "119": 144, "precalculate_data": [144, 222], "preconfigur": 144, "recalcul": 144, "panda": [144, 191], "y_i": 144, "y_hat_i": 144, "m": [144, 151, 223], "y_j": 144, "y_hat_j": 144, "mai": [144, 176, 199, 223], "n_male": 144, "n_femal": 144, "class_index": 145, "against": 145, "fpr_": 145, "on_polici": [146, 148], "referenc": 146, "j_pi_new_is_": [146, 148], "will_lower_bound": 147, "will_upper_bound": 147, "alt_reward_numb": 148, "newpolicyperformancebasenod": [148, 222], "altern": 148, "besid": 148, "second": [148, 223], "therefor": 148, "On": 148, "global": 149, "op_mapp": [149, 222], "ast": [149, 151], "appear": [149, 151, 153, 223], "not_supported_op_mapp": [149, 222], "bounds_required_dict": [149, 222], "children": [149, 151], "need_a_low": 149, "need_a_upp": 149, "need_b_low": 149, "need_b_upp": 149, "custom_measure_funct": 151, "broken": 151, "smaller": 151, "ml": [151, 223], "user": [151, 176, 179, 180, 181, 223], "appropri": 151, "create_from_ast": [151, 222], "constraint_str": [151, 152, 176, 182, 183, 184], "express": [151, 223], "n_node": 151, "n_base_nod": 151, "pr": [151, 223], "more": [151, 223], "contribut": 151, "base_node_dict": 151, "track": 151, "uniqu": 151, "help": [151, 211], "handl": 151, "duplic": [151, 179, 180, 181], "n_unique_bounds_tot": 151, "assign_bounds_need": [151, 222], "node_fonts": 151, "fontsiz": 151, "graphviz": [151, 221], "available_measure_funct": 151, "mean_error": [151, 222], "_ab": [151, 222], "absolut": [151, 223], "interv": 151, "_add": [151, 222], "_assign_bounds_help": [151, 222], "lower_need": 151, "upper_need": 151, "travers": 151, "_assign_deltas_help": [151, 222], "weight_method": 151, "_assign_infl_factors_help": [151, 222], "manual": [151, 223], "_ast2pt_nod": [151, 222], "ast_nod": 151, "_ast_tree_help": [151, 222], "recurs": 151, "_div": [151, 222], "divid": 151, "_evaluator_help": [151, 222], "_exp": [151, 222], "_log": [151, 222], "_max": [151, 222], "_min": [151, 222], "_mult": [151, 222], "_parse_subscript": [151, 222], "deal": 151, "subscript": 151, "node_class": 151, "node_kwarg": 151, "keyword": 151, "argument": 151, "_pow": [151, 222], "pow": 151, "_preprocess_constraint_str": [151, 222], "inequ": [151, 223], "move": 151, "everyth": 151, "final": 151, "sure": 151, "mathemat": [151, 223], "written": [151, 223], "syntax": 151, "_propagate_valu": [151, 222], "propag": [151, 174, 222], "_propagator_help": [151, 222], "_protect_nan": [151, 222], "bound_typ": 151, "infin": 151, "postit": 151, "_sub": [151, 222], "subract": 151, "_validate_delta_vector": [151, 222], "delta_vector": 151, "suppli": 151, "correct": [151, 157, 159, 210], "_validate_infl_factor": [151, 222], "dtype": 151, "depth": 151, "decid": 151, "care": 151, "assign_delta": [151, 222], "among": 151, "assign_infl_factor": [151, 222], "across": [151, 152, 196], "build_tre": [151, 222], "delta_weight_method": [151, 152], "infl_factor_method": 151, "infl_factor": 151, "subdivid": 151, "assing": 151, "structur": 151, "evaluate_constraint": [151, 222], "itself": 151, "postord": 151, "make_viz": [151, 222], "titl": 151, "diagram": 151, "make_viz_help": [151, 222], "edg": 151, "digraph": 151, "propagate_bound": [151, 222], "reset_base_node_dict": [151, 222], "reset_data": 151, "remov": 151, "howev": [151, 223], "less": [151, 174, 223], "frequent": 151, "defult": 152, "classifict": 152, "measure_function_vector_mapp": [153, 222], "func": 154, "num_batch": 154, "statistic_nam": [155, 156], "accuraci": 157, "weighted_return": [162, 164, 169, 170], "unweight": 162, "pre": [162, 164, 169], "auxiliari": 170, "unlik": 170, "bounding_box_estim": 170, "d_": [174, 176], "relev": [174, 205], "batch_size_safeti": [174, 176, 179, 180, 181], "loop": 174, "introspect": 176, "e_c": 176, "e_": 176, "d_c": 176, "candidate_safety_split_addl_dataset": [176, 222], "addl_dataset": 176, "candidate_select": [176, 222], "detail": [176, 223], "branch": 176, "safety_test": [176, 222, 223], "get_cs_result": [176, 222], "chosen": [176, 223], "get_st_upper_bound": [176, 222], "upper_bounds_dict": 176, "base_node_bound_dict": 176, "write_cs_logfil": [176, 223], "passed_safeti": [176, 223], "run_candidate_select": [176, 222], "mode": 176, "run_safety_test": [176, 222], "set_initial_solut": [176, 222], "initial_solution_fn": [176, 179, 180, 181, 182, 208], "otherwis": 176, "hyper_schema": 178, "n_bootstrap_work": 178, "use_bs_pool": 178, "confidence_interval_typ": 178, "hyperparam_search": [178, 222], "schema": 178, "sweep": 178, "worker": 178, "ttest": [178, 196], "clopper": [178, 192], "pearson": [178, 192], "base_node_bound_method_dict": [179, 180, 181], "use_builtin_primary_gradient_fn": [179, 180, 181, 182], "custom_primary_gradient_fn": [179, 180, 181], "optimization_hyperparam": [179, 180, 181, 223], "95": [179, 180, 181], "hyper_search": [179, 180, 181], "200": [179, 180, 181], "use_batch": [179, 181], "regularization_hyperparam": [179, 180, 181], "rl_model": [179, 182, 222, 223], "exist": [179, 180, 181, 182, 194], "builtin": [179, 180, 181], "regular": [179, 180, 181], "chang": [179, 180, 181, 182, 184, 205], "sometim": [179, 180, 181], "avoid": [179, 180, 181], "memori": [179, 180, 181], "overflow": [179, 180, 181], "conjuct": [179, 180, 181], "validate_additional_dataset": [179, 180, 181, 222], "subdict": [179, 180, 181], "fill": [179, 180, 181], "validate_custom_dataset": [179, 180, 181, 222], "validate_parse_tre": [179, 180, 181, 222], "save_dir": [182, 183, 184], "rlspec": [182, 222, 223], "later": [182, 184], "pkl": [182, 183, 184, 223], "glag": [182, 183, 184], "supervisedspec": [183, 184, 222, 223], "without": 183, "metadata_pth": 184, "path": [184, 191, 199, 205], "array_in": 187, "argmax": 187, "multipl": [187, 223], "tie": 187, "val_in": 188, "output_str": 189, "rais": 189, "n_bootstrap_sampl": [191, 196], "savenam": [191, 205], "pass_count": 192, "shuffled_dataset": 193, "hyper_nam": 194, "hyper_v": 194, "rebuild": 194, "bootstrap_trial_data": 196, "callback": 198, "evolu": 198, "strategi": [198, 223], "xmean": 198, "indent": 202, "abl": 203, "primary_objective_nam": [205, 223], "plot_running_avg": 205, "png": 205, "show": [205, 223], "evolut": [205, 223], "One": [205, 223], "subplot": [205, 223], "plot": [205, 223], "ii": 205, "lambda_i": [205, 223], "iii": 205, "lagranian": 205, "sum_i": 205, "averag": 205, "plt": 205, "cumprod": 207, "sourc": [207, 222], "github": [207, 222], "com": [207, 211], "hip": 207, "issu": 207, "257": 207, "cumul": [207, 208], "standard": [210, 214, 215, 216, 219], "deviat": [210, 214, 215, 216], "bessel": 210, "nu": 211, "invers": [211, 223], "student": 211, "cdf": 211, "degre": 211, "freedom": 211, "matlab": 211, "mathwork": 211, "stat": 211, "html": 211, "arr": 212, "num_point": [214, 215, 216], "loc_x": [214, 215, 216], "loc_i": [214, 215, 216], "sigma_x": [214, 215, 216], "sigma_i": [214, 215, 216], "clip_min": [214, 216], "clip_max": [214, 216], "msg": 219, "lineno": 219, "wai": [219, 223], "messag": 219, "seldonian": [221, 223], "pip": 221, "Then": 221, "system": 221, "wide": 221, "recommend": 221, "welcom": 222, "core": 222, "toolkit": [222, 223], "code": [222, 223], "host": 222, "overview": 222, "interfac": 222, "instal": 222, "api": [222, 223], "fourier": 222, "discrete_random_ag": 222, "function_approxim": 222, "linear_fa": 222, "linear_state_action_value_fa": 222, "construct_q_table_from_env_descript": 222, "parameterized_non_learning_softmax_ag": 222, "simglucosepolicyfixedarea": 222, "sigmoidpolicyfixedarea": 222, "discretesoftmax": [222, 223], "mixedsoftmax": 222, "keyboard_gridworld": 222, "mountain_car_rough_solut": 222, "simglucose_custom_fixedarea_random_ag": 222, "simglucosefixedareaag": 222, "check_space_typ": 222, "continuous_spac": 222, "rl_runner": 222, "create_agent_fromdict": 222, "run_episod": 222, "run_episode_from_dict": 222, "run_episodes_par": 222, "run_trial": 222, "run_trial_given_agent_and_env": 222, "n_step_mountaincar": 222, "candidateselect": [222, 223], "load_rl_metadata": 222, "load_custom_metadata": 222, "load_supervised_metadata": 222, "customdataset": 222, "datasetload": [222, 223], "hyperparamsearch": 222, "custom_text_model": 222, "customtextmodel": 222, "binarylogisticregressionmodel": 222, "boundedlinearregressionmodel": 222, "dummyclassifiermodel": 222, "linearregressionmodellistfeatur": 222, "multiclasslogisticregressionmodel": 222, "randomclassifiermodel": 222, "error_r": 222, "false_negative_r": 222, "false_positive_r": 222, "is_estim": 222, "mean_squared_error": [222, 223], "negative_r": 222, "pdis_estim": 222, "positive_r": 222, "true_negative_r": 222, "true_positive_r": 222, "us_estim": 222, "wis_estim": 222, "binary_logistic_loss": 222, "confusion_matrix": 222, "gradient_bounded_squared_error": 222, "gradient_mean_squared_error": 222, "gradient_binary_logistic_loss": 222, "multiclass_logistic_loss": 222, "sklearn_lr": 222, "sklearnlinearregressor": 222, "sklearn_model": 222, "sklearn_predict_vjp": 222, "skrandomforest_model": 222, "sktree_model": 222, "probs2theta": 222, "seldoniandecisiontre": 222, "gradient_descent_adam": 222, "setup_gradi": 222, "cvarsqebasenod": 222, "confusionmatrixbasenod": 222, "constantnod": 222, "internalnod": 222, "medcustombasenod": 222, "multiclassbasenod": 222, "rlaltrewardbasenod": 222, "make_parse_trees_from_constraint": 222, "zhat_func": 222, "batcher": 222, "evaluate_statist": 222, "sample_from_statist": 222, "vector_accuraci": 222, "vector_error": 222, "vector_error_r": 222, "vector_false_negative_r": 222, "vector_false_positive_r": 222, "vector_is_estim": 222, "vector_negative_r": 222, "vector_pdis_estim": 222, "vector_positive_r": 222, "vector_squared_error": 222, "vector_true_negative_r": 222, "vector_true_positive_r": 222, "vector_wis_estim": 222, "vector_auxiliary_return_us_estim": 222, "vector_confusion_matrix": 222, "safetytest": [222, 223], "seldonian_algorithm": [222, 223], "seldonianalgorithm": [222, 223], "createrlspec": [222, 223], "createsimplesupervisedspec": 222, "createsupervisedspec": [222, 223], "rl_util": 222, "argmax_multi": 222, "clamp": 222, "hyperparam_util": 222, "bootstrap_sample_dataset": 222, "clopper_pearson_bound": 222, "create_shuffled_dataset": 222, "rebuild_parse_tre": 222, "set_spec_with_hyperparam_set": 222, "ttest_bound": 222, "io_util": [222, 223], "cmaes_logg": 222, "dir_path": 222, "load_json": 222, "load_pickl": [222, 223], "save_json": 222, "save_pickl": 222, "plot_util": [222, 223], "plot_gradient_desc": [222, 223], "stats_util": 222, "custom_cumprod": 222, "default_supervised_initial_solution_fn": 222, "stddev": 222, "tinv": 222, "weighted_sum_gamma": 222, "tutorial_util": 222, "generate_clipped_data": 222, "generate_data": 222, "make_synthetic_regression_dataset": 222, "custom_warn": 222, "custom_formatwarn": 222, "document": 223, "homepag": 223, "In": 223, "page": 223, "few": 223, "hand": 223, "simul": 223, "realist": 223, "most": 223, "piec": 223, "cover": 223, "note": 223, "could": 223, "unifi": 223, "pattern": 223, "conceptu": 223, "enforc": 223, "consist": 223, "develop": 223, "design": 223, "command": 223, "line": 223, "graphic": 223, "short": 223, "underli": 223, "discuss": 223, "well": 223, "loader": 223, "comma": 223, "header": 223, "622": 223, "491": 223, "56": 223, "439": 223, "93": 223, "707": 223, "64": 223, "663": 223, "65": 223, "557": 223, "09": 223, "711": 223, "37": 223, "731": 223, "31": 223, "509": 223, "33333": 223, "538": 223, "490": 223, "58": 223, "406": 223, "59": 223, "529": 223, "532": 223, "28": 223, "447": 223, "23": 223, "527": 223, "379": 223, "14": 223, "488": 223, "98333": 223, "455": 223, "18": 223, "440": 223, "570": 223, "86": 223, "417": 223, "54": 223, "453": 223, "53": 223, "425": 223, "87": 223, "475": 223, "63": 223, "476": 223, "11": 223, "407": 223, "15": 223, "97333": 223, "756": 223, "91": 223, "679": 223, "62": 223, "531": 223, "583": 223, "534": 223, "42": 223, "521": 223, "592": 223, "41": 223, "783": 223, "76": 223, "588": 223, "26": 223, "53333": 223, "hot": 223, "10": 223, "25": 223, "intention": 223, "exclud": 223, "your": 223, "label_column": 223, "sensitive_column": 223, "biggest": 223, "logisticregressionmodel": 223, "essenti": 223, "linearregress": 223, "unless": 223, "own": 223, "though": 223, "py": 223, "_": 223, "directli": 223, "five": 223, "math": 223, "four": 223, "nativ": 223, "exp": 223, "239": 223, "trigger": 223, "special": 223, "open": 223, "quantiti": 223, "someth": 223, "wrote": 223, "instruct": 223, "recal": 223, "leq": 223, "cumbersom": 223, "symbol": 223, "interpret": 223, "ident": 223, "themselv": 223, "basic": 223, "plain": 223, "english": 223, "88": 223, "tpr": 223, "greater": 223, "j_pi_new": 223, "commonli": 223, "fair": 223, "filter": 223, "atr1": 223, "atr2": 223, "placehold": 223, "parenthes": 223, "surround": 223, "statement": 223, "sai": 223, "r1": 223, "r2": 223, "stand": 223, "race": 223, "subject": 223, "demograph": 223, "pariti": 223, "toler": 223, "ratio": 223, "dispar": 223, "impact": 223, "anoth": 223, "permit": 223, "belong": 223, "bundl": 223, "shown": 223, "block": 223, "At": 223, "broad": 223, "scope": 223, "No": 223, "throught": 223, "now": 223, "even": 223, "small": 223, "cost": 223, "toward": 223, "cg": 223, "nelder": 223, "mead": 223, "bfg": 223, "scipi": 223, "solver": 223, "covari": 223, "adapt": 223, "situat": 223, "contraint": 223, "conflict": 223, "oscil": 223, "boundari": 223, "dampen": 223, "momentum": 223, "mitig": 223, "accept": 223, "hat": 223, "mathcal": 223, "ran": 223, "convent": 223, "candidate_selection_log": 223, "increas": 223, "overwritten": 223, "log_fil": 223, "candidate_selection_log0": 223, "cs_dict": 223, "produc": 223, "red": 223, "area": 223, "middl": 223, "region": 223, "deem": 223, "assembl": 223}, "objects": {"": [[0, 0, 0, "-", "seldonian"]], "seldonian": [[1, 0, 0, "-", "RL"], [63, 0, 0, "-", "candidate_selection"], [66, 0, 0, "-", "dataset"], [80, 0, 0, "-", "hyperparam_search"], [83, 0, 0, "-", "models"], [133, 0, 0, "-", "optimizers"], [137, 0, 0, "-", "parse_tree"], [172, 0, 0, "-", "safety_test"], [175, 0, 0, "-", "seldonian_algorithm"], [177, 0, 0, "-", "spec"], [185, 0, 0, "-", "utils"], [217, 0, 0, "-", "warnings"]], "seldonian.RL": [[2, 0, 0, "-", "Agents"], [38, 0, 0, "-", "Env_Description"], [45, 0, 0, "-", "RL_model"], [47, 0, 0, "-", "RL_runner"], [54, 0, 0, "-", "environments"]], "seldonian.RL.Agents": [[3, 0, 0, "-", "Agent"], [5, 0, 0, "-", "Bases"], [8, 0, 0, "-", "Discrete_Random_Agent"], [10, 0, 0, "-", "Function_Approximators"], [20, 0, 0, "-", "Parameterized_non_learning_softmax_agent"], [22, 0, 0, "-", "Policies"], [32, 0, 0, "-", "keyboard_gridworld"], [34, 0, 0, "-", "mountain_car_rough_solution"], [36, 0, 0, "-", "simglucose_custom_fixedarea_random_agent"]], "seldonian.RL.Agents.Agent": [[4, 1, 1, "", "Agent"]], "seldonian.RL.Agents.Agent.Agent": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "__repr__"], [4, 2, 1, "", "choose_action"], [4, 2, 1, "", "get_params"], [4, 2, 1, "", "get_policy"], [4, 2, 1, "", "get_prob_this_action"], [4, 2, 1, "", "set_new_params"], [4, 2, 1, "", "update"]], "seldonian.RL.Agents.Bases": [[6, 0, 0, "-", "Fourier"]], "seldonian.RL.Agents.Bases.Fourier": [[7, 1, 1, "", "Fourier"]], "seldonian.RL.Agents.Bases.Fourier.Fourier": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "__repr__"], [7, 2, 1, "", "calculate_num_features"], [7, 2, 1, "", "construct_basis_matrix"], [7, 2, 1, "", "get_features"], [7, 2, 1, "", "get_normalized_observation"]], "seldonian.RL.Agents.Discrete_Random_Agent": [[9, 1, 1, "", "Discrete_Random_Agent"]], "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "__repr__"], [9, 2, 1, "", "choose_action"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "get_policy"], [9, 2, 1, "", "get_prob_this_action"], [9, 2, 1, "", "set_new_params"], [9, 2, 1, "", "update"]], "seldonian.RL.Agents.Function_Approximators": [[11, 0, 0, "-", "Function_Approximator"], [13, 0, 0, "-", "Linear_FA"], [16, 0, 0, "-", "Table"]], "seldonian.RL.Agents.Function_Approximators.Function_Approximator": [[12, 1, 1, "", "Function_Approximator"]], "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "__repr__"], [12, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA": [[14, 1, 1, "", "Linear_FA"], [15, 1, 1, "", "Linear_state_action_value_FA"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "__repr__"], [14, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "__repr__"], [15, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Function_Approximators.Table": [[17, 1, 1, "", "Q_Table"], [18, 1, 1, "", "Table"], [19, 3, 1, "", "construct_Q_Table_From_Env_Description"]], "seldonian.RL.Agents.Function_Approximators.Table.Q_Table": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "__repr__"], [17, 2, 1, "", "from_environment_state_to_0_indexed_state"], [17, 2, 1, "", "get_action_values_given_state"], [17, 2, 1, "", "get_action_values_given_zero_indexed_state"], [17, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Function_Approximators.Table.Table": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "__repr__"], [18, 2, 1, "", "from_environment_state_to_0_indexed_state"], [18, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent": [[21, 1, 1, "", "Parameterized_non_learning_softmax_agent"]], "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "__repr__"], [21, 2, 1, "", "choose_action"], [21, 2, 1, "", "get_action_values"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "get_policy"], [21, 2, 1, "", "get_prob_this_action"], [21, 2, 1, "", "set_new_params"], [21, 2, 1, "", "update"]], "seldonian.RL.Agents.Policies": [[23, 0, 0, "-", "Policy"], [26, 0, 0, "-", "SimglucosePolicyFixedArea"], [28, 0, 0, "-", "Softmax"]], "seldonian.RL.Agents.Policies.Policy": [[24, 1, 1, "", "Discrete_Action_Policy"], [25, 1, 1, "", "Policy"]], "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "__repr__"], [24, 2, 1, "", "choose_action"], [24, 2, 1, "", "construct_basis_and_linear_FA"], [24, 2, 1, "", "from_0_indexed_action_to_environment_action"], [24, 2, 1, "", "from_environment_action_to_0_indexed_action"], [24, 2, 1, "", "get_action_values_given_state"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "get_prob_this_action"], [24, 2, 1, "", "get_probs_from_observations_and_actions"], [24, 2, 1, "", "make_state_action_FA"], [24, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Policies.Policy.Policy": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "__repr__"], [25, 2, 1, "", "choose_action"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "get_prob_this_action"], [25, 2, 1, "", "get_probs_from_observations_and_actions"], [25, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea": [[27, 1, 1, "", "SigmoidPolicyFixedArea"]], "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "__repr__"], [27, 2, 1, "", "choose_action"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "get_prob_this_action"], [27, 2, 1, "", "get_probs_from_observations_and_actions"], [27, 2, 1, "", "set_new_params"], [27, 2, 1, "", "theta2crcf"]], "seldonian.RL.Agents.Policies.Softmax": [[29, 1, 1, "", "DiscreteSoftmax"], [30, 1, 1, "", "MixedSoftmax"], [31, 1, 1, "", "Softmax"]], "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "__repr__"], [29, 2, 1, "", "_arg"], [29, 2, 1, "", "_denom"], [29, 2, 1, "", "choose_action"], [29, 2, 1, "", "choose_action_from_action_values"], [29, 2, 1, "", "construct_basis_and_linear_FA"], [29, 2, 1, "", "from_0_indexed_action_to_environment_action"], [29, 2, 1, "", "from_environment_action_to_0_indexed_action"], [29, 2, 1, "", "get_action_probs_from_action_values"], [29, 2, 1, "", "get_action_values_given_state"], [29, 2, 1, "", "get_e_to_the_something_terms"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "get_prob_this_action"], [29, 2, 1, "", "get_probs_from_observations_and_actions"], [29, 2, 1, "", "make_state_action_FA"], [29, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "__repr__"], [30, 2, 1, "", "choose_action"], [30, 2, 1, "", "choose_action_from_action_values"], [30, 2, 1, "", "construct_basis_and_linear_FA"], [30, 2, 1, "", "from_0_indexed_action_to_environment_action"], [30, 2, 1, "", "from_environment_action_to_0_indexed_action"], [30, 2, 1, "", "get_action_probs_from_action_values"], [30, 2, 1, "", "get_action_values_given_state"], [30, 2, 1, "", "get_e_to_the_something_terms"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "get_prob_this_action"], [30, 2, 1, "", "get_probs_from_observations_and_actions"], [30, 2, 1, "", "make_state_action_FA"], [30, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.Policies.Softmax.Softmax": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "__repr__"], [31, 2, 1, "", "choose_action"], [31, 2, 1, "", "choose_action_from_action_values"], [31, 2, 1, "", "construct_basis_and_linear_FA"], [31, 2, 1, "", "from_0_indexed_action_to_environment_action"], [31, 2, 1, "", "from_environment_action_to_0_indexed_action"], [31, 2, 1, "", "get_action_probs_from_action_values"], [31, 2, 1, "", "get_action_values_given_state"], [31, 2, 1, "", "get_e_to_the_something_terms"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "get_prob_this_action"], [31, 2, 1, "", "get_probs_from_observations_and_actions"], [31, 2, 1, "", "make_state_action_FA"], [31, 2, 1, "", "set_new_params"]], "seldonian.RL.Agents.keyboard_gridworld": [[33, 1, 1, "", "Keyboard_gridworld"]], "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "__repr__"], [33, 2, 1, "", "choose_action"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "get_policy"], [33, 2, 1, "", "get_prob_this_action"], [33, 2, 1, "", "set_new_params"], [33, 2, 1, "", "update"]], "seldonian.RL.Agents.mountain_car_rough_solution": [[35, 1, 1, "", "Mountain_car_rough_solution"]], "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "__repr__"], [35, 2, 1, "", "choose_action"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "get_policy"], [35, 2, 1, "", "get_prob_this_action"], [35, 2, 1, "", "set_new_params"], [35, 2, 1, "", "update"]], "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent": [[37, 1, 1, "", "SimglucoseFixedAreaAgent"]], "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "__repr__"], [37, 2, 1, "", "choose_action"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "get_policy"], [37, 2, 1, "", "get_prob_this_action"], [37, 2, 1, "", "set_new_params"], [37, 2, 1, "", "update"]], "seldonian.RL.Env_Description": [[39, 0, 0, "-", "Env_Description"], [42, 0, 0, "-", "Spaces"]], "seldonian.RL.Env_Description.Env_Description": [[40, 1, 1, "", "Env_Description"], [41, 3, 1, "", "check_space_type"]], "seldonian.RL.Env_Description.Env_Description.Env_Description": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "__repr__"], [40, 2, 1, "", "get_min_action"], [40, 2, 1, "", "get_min_state"], [40, 2, 1, "", "get_num_actions"], [40, 2, 1, "", "get_num_observation_dims"], [40, 2, 1, "", "get_num_states"]], "seldonian.RL.Env_Description.Spaces": [[43, 1, 1, "", "Continuous_Space"], [44, 1, 1, "", "Discrete_Space"]], "seldonian.RL.Env_Description.Spaces.Continuous_Space": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "__repr__"], [43, 2, 1, "", "check_bounds_valid"], [43, 2, 1, "", "get_num_dims"]], "seldonian.RL.Env_Description.Spaces.Discrete_Space": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "__repr__"], [44, 2, 1, "", "get_num_values"]], "seldonian.RL.RL_model": [[46, 1, 1, "", "RL_model"]], "seldonian.RL.RL_model.RL_model": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "__repr__"], [46, 2, 1, "", "get_probs_from_observations_and_actions"]], "seldonian.RL.RL_runner": [[48, 3, 1, "", "create_agent_fromdict"], [49, 3, 1, "", "run_episode"], [50, 3, 1, "", "run_episode_from_dict"], [51, 3, 1, "", "run_episodes_par"], [52, 3, 1, "", "run_trial"], [53, 3, 1, "", "run_trial_given_agent_and_env"]], "seldonian.RL.environments": [[55, 0, 0, "-", "Environment"], [57, 0, 0, "-", "gridworld"], [59, 0, 0, "-", "mountaincar"], [61, 0, 0, "-", "n_step_mountaincar"]], "seldonian.RL.environments.Environment": [[56, 1, 1, "", "Environment"]], "seldonian.RL.environments.Environment.Environment": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "__repr__"], [56, 2, 1, "", "get_env_description"], [56, 2, 1, "", "get_observation"], [56, 2, 1, "", "reset"], [56, 2, 1, "", "start_visualizing"], [56, 2, 1, "", "stop_visualizing"], [56, 2, 1, "", "terminated"], [56, 2, 1, "", "transition"], [56, 2, 1, "", "visualize"]], "seldonian.RL.environments.gridworld": [[58, 1, 1, "", "Gridworld"]], "seldonian.RL.environments.gridworld.Gridworld": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "__repr__"], [58, 2, 1, "", "create_env_description"], [58, 2, 1, "", "get_env_description"], [58, 2, 1, "", "get_observation"], [58, 2, 1, "", "is_in_goal_state"], [58, 2, 1, "", "reset"], [58, 2, 1, "", "start_visualizing"], [58, 2, 1, "", "stop_visualizing"], [58, 2, 1, "", "terminated"], [58, 2, 1, "", "transition"], [58, 2, 1, "", "update_position"], [58, 2, 1, "", "visualize"]], "seldonian.RL.environments.mountaincar": [[60, 1, 1, "", "Mountaincar"]], "seldonian.RL.environments.mountaincar.Mountaincar": [[60, 2, 1, "", "__init__"], [60, 2, 1, "", "__repr__"], [60, 2, 1, "", "check_valid_mc_action"], [60, 2, 1, "", "create_env_description"], [60, 2, 1, "", "get_env_description"], [60, 2, 1, "", "get_observation"], [60, 2, 1, "", "position_and_termination_update"], [60, 2, 1, "", "reset"], [60, 2, 1, "", "start_visualizing"], [60, 2, 1, "", "stop_visualizing"], [60, 2, 1, "", "terminated"], [60, 2, 1, "", "transition"], [60, 2, 1, "", "update_velocity"], [60, 2, 1, "", "visualize"]], "seldonian.RL.environments.n_step_mountaincar": [[62, 1, 1, "", "N_step_mountaincar"]], "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "__repr__"], [62, 2, 1, "", "get_env_description"], [62, 2, 1, "", "get_observation"], [62, 2, 1, "", "reset"], [62, 2, 1, "", "start_visualizing"], [62, 2, 1, "", "stop_visualizing"], [62, 2, 1, "", "terminated"], [62, 2, 1, "", "transition"], [62, 2, 1, "", "visualize"]], "seldonian.candidate_selection": [[64, 0, 0, "-", "candidate_selection"]], "seldonian.candidate_selection.candidate_selection": [[65, 1, 1, "", "CandidateSelection"]], "seldonian.candidate_selection.candidate_selection.CandidateSelection": [[65, 2, 1, "", "__init__"], [65, 2, 1, "", "__repr__"], [65, 2, 1, "", "calculate_batches"], [65, 2, 1, "", "calculate_batches_addl_datasets"], [65, 2, 1, "", "evaluate_primary_objective"], [65, 2, 1, "", "get_constraint_upper_bounds"], [65, 2, 1, "", "get_importance_weights"], [65, 2, 1, "", "objective_with_barrier"], [65, 2, 1, "", "precalculate_addl_dataset_batch_indices"], [65, 2, 1, "", "run"]], "seldonian.dataset": [[67, 1, 1, "", "CustomDataSet"], [68, 1, 1, "", "CustomMetaData"], [69, 1, 1, "", "DataSet"], [70, 1, 1, "", "DataSetLoader"], [71, 1, 1, "", "Episode"], [72, 1, 1, "", "MetaData"], [73, 1, 1, "", "RLDataSet"], [74, 1, 1, "", "RLMetaData"], [75, 1, 1, "", "SupervisedDataSet"], [76, 1, 1, "", "SupervisedMetaData"], [77, 3, 1, "", "load_RL_metadata"], [78, 3, 1, "", "load_custom_metadata"], [79, 3, 1, "", "load_supervised_metadata"]], "seldonian.dataset.CustomDataSet": [[67, 2, 1, "", "__init__"], [67, 2, 1, "", "__repr__"]], "seldonian.dataset.CustomMetaData": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "__repr__"]], "seldonian.dataset.DataSet": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "__repr__"]], "seldonian.dataset.DataSetLoader": [[70, 2, 1, "", "__init__"], [70, 2, 1, "", "__repr__"], [70, 2, 1, "", "load_RL_dataset_from_csv"], [70, 2, 1, "", "load_RL_dataset_from_episode_file"], [70, 2, 1, "", "load_supervised_dataset"]], "seldonian.dataset.Episode": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "__repr__"]], "seldonian.dataset.MetaData": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "__repr__"]], "seldonian.dataset.RLDataSet": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "__repr__"]], "seldonian.dataset.RLMetaData": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "__repr__"]], "seldonian.dataset.SupervisedDataSet": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "__repr__"]], "seldonian.dataset.SupervisedMetaData": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "__repr__"]], "seldonian.hyperparam_search": [[81, 1, 1, "", "HyperSchema"], [82, 1, 1, "", "HyperparamSearch"]], "seldonian.hyperparam_search.HyperSchema": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "__repr__"], [81, 2, 1, "", "_validate"]], "seldonian.hyperparam_search.HyperparamSearch": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "__repr__"], [82, 2, 1, "", "_get_theta_init_from_hyper_dict"], [82, 2, 1, "", "_unpack_theta_to_hyperparam_values"], [82, 2, 1, "", "aggregate_est_prob_pass"], [82, 2, 1, "", "candidate_safety_combine"], [82, 2, 1, "", "candidate_safety_split"], [82, 2, 1, "", "cmaes_objective"], [82, 2, 1, "", "create_bootstrap_trial_spec"], [82, 2, 1, "", "create_dataset"], [82, 2, 1, "", "find_best_frac_data_in_safety"], [82, 2, 1, "", "find_best_hyperparameters"], [82, 2, 1, "", "generate_all_bootstrap_datasets"], [82, 2, 1, "", "get_all_greater_est_prob_pass"], [82, 2, 1, "", "get_bootstrap_dataset_size"], [82, 2, 1, "", "get_est_prob_pass"], [82, 2, 1, "", "get_gridsearchable_hyperparameter_iterator"], [82, 2, 1, "", "get_safety_size"], [82, 2, 1, "", "powell_objective"], [82, 2, 1, "", "run_bootstrap_trial"], [82, 2, 1, "", "run_cmaes"], [82, 2, 1, "", "run_powell"]], "seldonian.models": [[84, 0, 0, "-", "custom_text_model"], [86, 0, 0, "-", "models"], [99, 0, 0, "-", "objectives"], [119, 0, 0, "-", "sklearn_lr"], [121, 0, 0, "-", "sklearn_model"], [124, 0, 0, "-", "trees"]], "seldonian.models.custom_text_model": [[85, 1, 1, "", "CustomTextModel"]], "seldonian.models.custom_text_model.CustomTextModel": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "__repr__"], [85, 2, 1, "", "predict"]], "seldonian.models.models": [[87, 1, 1, "", "BaseLogisticRegressionModel"], [88, 1, 1, "", "BinaryLogisticRegressionModel"], [89, 1, 1, "", "BoundedLinearRegressionModel"], [90, 1, 1, "", "ClassificationModel"], [91, 1, 1, "", "DummyClassifierModel"], [92, 1, 1, "", "LinearRegressionModel"], [93, 1, 1, "", "LinearRegressionModelListFeatures"], [94, 1, 1, "", "MultiClassLogisticRegressionModel"], [95, 1, 1, "", "RandomClassifierModel"], [96, 1, 1, "", "RegressionModel"], [97, 1, 1, "", "SeldonianModel"], [98, 1, 1, "", "SupervisedModel"]], "seldonian.models.models.BaseLogisticRegressionModel": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "__repr__"], [87, 2, 1, "", "fit"]], "seldonian.models.models.BinaryLogisticRegressionModel": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "__repr__"], [88, 2, 1, "", "fit"], [88, 2, 1, "", "predict"]], "seldonian.models.models.BoundedLinearRegressionModel": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "__repr__"], [89, 2, 1, "", "fit"], [89, 2, 1, "", "predict"]], "seldonian.models.models.ClassificationModel": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "__repr__"]], "seldonian.models.models.DummyClassifierModel": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "__repr__"], [91, 2, 1, "", "predict"]], "seldonian.models.models.LinearRegressionModel": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "__repr__"], [92, 2, 1, "", "fit"], [92, 2, 1, "", "predict"]], "seldonian.models.models.LinearRegressionModelListFeatures": [[93, 2, 1, "", "__init__"], [93, 2, 1, "", "__repr__"], [93, 2, 1, "", "fit"], [93, 2, 1, "", "predict"]], "seldonian.models.models.MultiClassLogisticRegressionModel": [[94, 2, 1, "", "__init__"], [94, 2, 1, "", "__repr__"], [94, 2, 1, "", "fit"], [94, 2, 1, "", "predict"]], "seldonian.models.models.RandomClassifierModel": [[95, 2, 1, "", "__init__"], [95, 2, 1, "", "__repr__"], [95, 2, 1, "", "predict"]], "seldonian.models.models.RegressionModel": [[96, 2, 1, "", "__init__"], [96, 2, 1, "", "__repr__"]], "seldonian.models.models.SeldonianModel": [[97, 2, 1, "", "__init__"], [97, 2, 1, "", "__repr__"]], "seldonian.models.models.SupervisedModel": [[98, 2, 1, "", "__init__"], [98, 2, 1, "", "__repr__"]], "seldonian.models.objectives": [[100, 3, 1, "", "Error_Rate"], [101, 3, 1, "", "False_Negative_Rate"], [102, 3, 1, "", "False_Positive_Rate"], [103, 3, 1, "", "IS_estimate"], [104, 3, 1, "", "Mean_Error"], [105, 3, 1, "", "Mean_Squared_Error"], [106, 3, 1, "", "Negative_Rate"], [107, 3, 1, "", "PDIS_estimate"], [108, 3, 1, "", "Positive_Rate"], [109, 3, 1, "", "True_Negative_Rate"], [110, 3, 1, "", "True_Positive_Rate"], [111, 3, 1, "", "US_estimate"], [112, 3, 1, "", "WIS_estimate"], [113, 3, 1, "", "binary_logistic_loss"], [114, 3, 1, "", "confusion_matrix"], [115, 3, 1, "", "gradient_Bounded_Squared_Error"], [116, 3, 1, "", "gradient_Mean_Squared_Error"], [117, 3, 1, "", "gradient_binary_logistic_loss"], [118, 3, 1, "", "multiclass_logistic_loss"]], "seldonian.models.sklearn_lr": [[120, 1, 1, "", "SkLearnLinearRegressor"]], "seldonian.models.sklearn_lr.SkLearnLinearRegressor": [[120, 2, 1, "", "__init__"], [120, 2, 1, "", "__repr__"], [120, 2, 1, "", "backward_pass"], [120, 2, 1, "", "create_model"], [120, 2, 1, "", "forward_pass"], [120, 2, 1, "", "get_model_params"], [120, 2, 1, "", "predict"], [120, 2, 1, "", "update_model_params"]], "seldonian.models.sklearn_model": [[122, 1, 1, "", "SupervisedSkLearnBaseModel"], [123, 3, 1, "", "sklearn_predict_vjp"]], "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel": [[122, 2, 1, "", "__init__"], [122, 2, 1, "", "__repr__"], [122, 2, 1, "", "backward_pass"], [122, 2, 1, "", "create_model"], [122, 2, 1, "", "forward_pass"], [122, 2, 1, "", "get_model_params"], [122, 2, 1, "", "predict"], [122, 2, 1, "", "update_model_params"]], "seldonian.models.trees": [[125, 0, 0, "-", "skrandomforest_model"], [128, 0, 0, "-", "sktree_model"]], "seldonian.models.trees.skrandomforest_model": [[126, 1, 1, "", "SeldonianRandomForest"], [127, 3, 1, "", "sklearn_predict_vjp"]], "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest": [[126, 2, 1, "", "__init__"], [126, 2, 1, "", "__repr__"], [126, 2, 1, "", "fit"], [126, 2, 1, "", "forward_pass"], [126, 2, 1, "", "get_jacobian"], [126, 2, 1, "", "get_leaf_node_probs"], [126, 2, 1, "", "predict"], [126, 2, 1, "", "set_leaf_node_values"]], "seldonian.models.trees.sktree_model": [[129, 1, 1, "", "SeldonianDecisionTree"], [130, 3, 1, "", "probs2theta"], [131, 3, 1, "", "sigmoid"], [132, 3, 1, "", "sklearn_predict_vjp"]], "seldonian.models.trees.sktree_model.SeldonianDecisionTree": [[129, 2, 1, "", "__init__"], [129, 2, 1, "", "__repr__"], [129, 2, 1, "", "fit"], [129, 2, 1, "", "forward_pass"], [129, 2, 1, "", "get_jacobian"], [129, 2, 1, "", "get_leaf_node_probs"], [129, 2, 1, "", "predict"], [129, 2, 1, "", "set_leaf_node_values"]], "seldonian.optimizers": [[134, 0, 0, "-", "gradient_descent"]], "seldonian.optimizers.gradient_descent": [[135, 3, 1, "", "gradient_descent_adam"], [136, 3, 1, "", "setup_gradients"]], "seldonian.parse_tree": [[138, 0, 0, "-", "nodes"], [149, 0, 0, "-", "operators"], [150, 0, 0, "-", "parse_tree"], [153, 0, 0, "-", "zhat_funcs"]], "seldonian.parse_tree.nodes": [[139, 1, 1, "", "BaseNode"], [140, 1, 1, "", "CVaRSQeBaseNode"], [141, 1, 1, "", "ConfusionMatrixBaseNode"], [142, 1, 1, "", "ConstantNode"], [143, 1, 1, "", "InternalNode"], [144, 1, 1, "", "MEDCustomBaseNode"], [145, 1, 1, "", "MultiClassBaseNode"], [146, 1, 1, "", "NewPolicyPerformanceBaseNode"], [147, 1, 1, "", "Node"], [148, 1, 1, "", "RLAltRewardBaseNode"]], "seldonian.parse_tree.nodes.BaseNode": [[139, 2, 1, "", "__init__"], [139, 2, 1, "", "__repr__"], [139, 2, 1, "", "calculate_bounds"], [139, 2, 1, "", "calculate_data_forbound"], [139, 2, 1, "", "calculate_value"], [139, 2, 1, "", "compute_HC_lowerbound"], [139, 2, 1, "", "compute_HC_upper_and_lowerbound"], [139, 2, 1, "", "compute_HC_upperbound"], [139, 2, 1, "", "mask_data"], [139, 2, 1, "", "predict_HC_lowerbound"], [139, 2, 1, "", "predict_HC_upper_and_lowerbound"], [139, 2, 1, "", "predict_HC_upperbound"], [139, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.CVaRSQeBaseNode": [[140, 2, 1, "", "__init__"], [140, 2, 1, "", "__repr__"], [140, 2, 1, "", "calculate_bounds"], [140, 2, 1, "", "calculate_data_forbound"], [140, 2, 1, "", "calculate_value"], [140, 2, 1, "", "compute_HC_lowerbound"], [140, 2, 1, "", "compute_HC_upper_and_lowerbound"], [140, 2, 1, "", "compute_HC_upperbound"], [140, 2, 1, "", "mask_data"], [140, 2, 1, "", "predict_HC_lowerbound"], [140, 2, 1, "", "predict_HC_upper_and_lowerbound"], [140, 2, 1, "", "predict_HC_upperbound"], [140, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode": [[141, 2, 1, "", "__init__"], [141, 2, 1, "", "__repr__"], [141, 2, 1, "", "calculate_bounds"], [141, 2, 1, "", "calculate_data_forbound"], [141, 2, 1, "", "calculate_value"], [141, 2, 1, "", "compute_HC_lowerbound"], [141, 2, 1, "", "compute_HC_upper_and_lowerbound"], [141, 2, 1, "", "compute_HC_upperbound"], [141, 2, 1, "", "mask_data"], [141, 2, 1, "", "predict_HC_lowerbound"], [141, 2, 1, "", "predict_HC_upper_and_lowerbound"], [141, 2, 1, "", "predict_HC_upperbound"], [141, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.ConstantNode": [[142, 2, 1, "", "__init__"], [142, 2, 1, "", "__repr__"]], "seldonian.parse_tree.nodes.InternalNode": [[143, 2, 1, "", "__init__"], [143, 2, 1, "", "__repr__"]], "seldonian.parse_tree.nodes.MEDCustomBaseNode": [[144, 2, 1, "", "__init__"], [144, 2, 1, "", "__repr__"], [144, 2, 1, "", "calculate_bounds"], [144, 2, 1, "", "calculate_data_forbound"], [144, 2, 1, "", "calculate_value"], [144, 2, 1, "", "compute_HC_lowerbound"], [144, 2, 1, "", "compute_HC_upper_and_lowerbound"], [144, 2, 1, "", "compute_HC_upperbound"], [144, 2, 1, "", "mask_data"], [144, 2, 1, "", "precalculate_data"], [144, 2, 1, "", "predict_HC_lowerbound"], [144, 2, 1, "", "predict_HC_upper_and_lowerbound"], [144, 2, 1, "", "predict_HC_upperbound"], [144, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.MultiClassBaseNode": [[145, 2, 1, "", "__init__"], [145, 2, 1, "", "__repr__"], [145, 2, 1, "", "calculate_bounds"], [145, 2, 1, "", "calculate_data_forbound"], [145, 2, 1, "", "calculate_value"], [145, 2, 1, "", "compute_HC_lowerbound"], [145, 2, 1, "", "compute_HC_upper_and_lowerbound"], [145, 2, 1, "", "compute_HC_upperbound"], [145, 2, 1, "", "mask_data"], [145, 2, 1, "", "predict_HC_lowerbound"], [145, 2, 1, "", "predict_HC_upper_and_lowerbound"], [145, 2, 1, "", "predict_HC_upperbound"], [145, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode": [[146, 2, 1, "", "__init__"], [146, 2, 1, "", "__repr__"], [146, 2, 1, "", "calculate_bounds"], [146, 2, 1, "", "calculate_data_forbound"], [146, 2, 1, "", "calculate_value"], [146, 2, 1, "", "compute_HC_lowerbound"], [146, 2, 1, "", "compute_HC_upper_and_lowerbound"], [146, 2, 1, "", "compute_HC_upperbound"], [146, 2, 1, "", "mask_data"], [146, 2, 1, "", "predict_HC_lowerbound"], [146, 2, 1, "", "predict_HC_upper_and_lowerbound"], [146, 2, 1, "", "predict_HC_upperbound"], [146, 2, 1, "", "zhat"]], "seldonian.parse_tree.nodes.Node": [[147, 2, 1, "", "__init__"], [147, 2, 1, "", "__repr__"]], "seldonian.parse_tree.nodes.RLAltRewardBaseNode": [[148, 2, 1, "", "__init__"], [148, 2, 1, "", "__repr__"], [148, 2, 1, "", "calculate_bounds"], [148, 2, 1, "", "calculate_data_forbound"], [148, 2, 1, "", "calculate_value"], [148, 2, 1, "", "compute_HC_lowerbound"], [148, 2, 1, "", "compute_HC_upper_and_lowerbound"], [148, 2, 1, "", "compute_HC_upperbound"], [148, 2, 1, "", "mask_data"], [148, 2, 1, "", "predict_HC_lowerbound"], [148, 2, 1, "", "predict_HC_upper_and_lowerbound"], [148, 2, 1, "", "predict_HC_upperbound"], [148, 2, 1, "", "zhat"]], "seldonian.parse_tree.operators": [[149, 4, 1, "", "bounds_required_dict"], [149, 4, 1, "", "not_supported_op_mapper"], [149, 4, 1, "", "op_mapper"]], "seldonian.parse_tree.parse_tree": [[151, 1, 1, "", "ParseTree"], [152, 3, 1, "", "make_parse_trees_from_constraints"]], "seldonian.parse_tree.parse_tree.ParseTree": [[151, 2, 1, "", "__init__"], [151, 2, 1, "", "__repr__"], [151, 2, 1, "", "_abs"], [151, 2, 1, "", "_add"], [151, 2, 1, "", "_assign_bounds_helper"], [151, 2, 1, "", "_assign_deltas_helper"], [151, 2, 1, "", "_assign_infl_factors_helper"], [151, 2, 1, "", "_ast2pt_node"], [151, 2, 1, "", "_ast_tree_helper"], [151, 2, 1, "", "_div"], [151, 2, 1, "", "_evaluator_helper"], [151, 2, 1, "", "_exp"], [151, 2, 1, "", "_log"], [151, 2, 1, "", "_max"], [151, 2, 1, "", "_min"], [151, 2, 1, "", "_mult"], [151, 2, 1, "", "_parse_subscript"], [151, 2, 1, "", "_pow"], [151, 2, 1, "", "_preprocess_constraint_str"], [151, 2, 1, "", "_propagate_value"], [151, 2, 1, "", "_propagator_helper"], [151, 2, 1, "", "_protect_nan"], [151, 2, 1, "", "_sub"], [151, 2, 1, "", "_validate_delta_vector"], [151, 2, 1, "", "_validate_infl_factors"], [151, 2, 1, "", "assign_bounds_needed"], [151, 2, 1, "", "assign_deltas"], [151, 2, 1, "", "assign_infl_factors"], [151, 2, 1, "", "build_tree"], [151, 2, 1, "", "create_from_ast"], [151, 2, 1, "", "evaluate_constraint"], [151, 2, 1, "", "make_viz"], [151, 2, 1, "", "make_viz_helper"], [151, 2, 1, "", "propagate"], [151, 2, 1, "", "propagate_bounds"], [151, 2, 1, "", "reset_base_node_dict"]], "seldonian.parse_tree.zhat_funcs": [[154, 3, 1, "", "batcher"], [155, 3, 1, "", "evaluate_statistic"], [153, 4, 1, "", "measure_function_vector_mapper"], [156, 3, 1, "", "sample_from_statistic"], [157, 3, 1, "", "vector_Accuracy"], [158, 3, 1, "", "vector_Error"], [159, 3, 1, "", "vector_Error_Rate"], [160, 3, 1, "", "vector_False_Negative_Rate"], [161, 3, 1, "", "vector_False_Positive_Rate"], [162, 3, 1, "", "vector_IS_estimate"], [163, 3, 1, "", "vector_Negative_Rate"], [164, 3, 1, "", "vector_PDIS_estimate"], [165, 3, 1, "", "vector_Positive_Rate"], [166, 3, 1, "", "vector_Squared_Error"], [167, 3, 1, "", "vector_True_Negative_Rate"], [168, 3, 1, "", "vector_True_Positive_Rate"], [169, 3, 1, "", "vector_WIS_estimate"], [170, 3, 1, "", "vector_auxiliary_return_US_estimate"], [171, 3, 1, "", "vector_confusion_matrix"]], "seldonian.safety_test": [[173, 0, 0, "-", "safety_test"]], "seldonian.safety_test.safety_test": [[174, 1, 1, "", "SafetyTest"]], "seldonian.safety_test.safety_test.SafetyTest": [[174, 2, 1, "", "__init__"], [174, 2, 1, "", "__repr__"], [174, 2, 1, "", "evaluate_primary_objective"], [174, 2, 1, "", "get_importance_weights"], [174, 2, 1, "", "run"]], "seldonian.seldonian_algorithm": [[176, 1, 1, "", "SeldonianAlgorithm"]], "seldonian.seldonian_algorithm.SeldonianAlgorithm": [[176, 2, 1, "", "__init__"], [176, 2, 1, "", "__repr__"], [176, 2, 1, "", "candidate_safety_split"], [176, 2, 1, "", "candidate_safety_split_addl_datasets"], [176, 2, 1, "", "candidate_selection"], [176, 2, 1, "", "evaluate_primary_objective"], [176, 2, 1, "", "get_cs_result"], [176, 2, 1, "", "get_importance_weights"], [176, 2, 1, "", "get_st_upper_bounds"], [176, 5, 1, "", "parse_trees"], [176, 2, 1, "", "run"], [176, 2, 1, "", "run_candidate_selection"], [176, 2, 1, "", "run_safety_test"], [176, 2, 1, "", "safety_test"], [176, 2, 1, "", "set_initial_solution"]], "seldonian.spec": [[178, 1, 1, "", "HyperparameterSelectionSpec"], [179, 1, 1, "", "RLSpec"], [180, 1, 1, "", "Spec"], [181, 1, 1, "", "SupervisedSpec"], [182, 3, 1, "", "createRLSpec"], [183, 3, 1, "", "createSimpleSupervisedSpec"], [184, 3, 1, "", "createSupervisedSpec"]], "seldonian.spec.HyperparameterSelectionSpec": [[178, 2, 1, "", "__init__"], [178, 2, 1, "", "__repr__"]], "seldonian.spec.RLSpec": [[179, 2, 1, "", "__init__"], [179, 2, 1, "", "__repr__"], [179, 2, 1, "", "validate_additional_datasets"], [179, 2, 1, "", "validate_custom_datasets"], [179, 2, 1, "", "validate_parse_trees"]], "seldonian.spec.Spec": [[180, 2, 1, "", "__init__"], [180, 2, 1, "", "__repr__"], [180, 2, 1, "", "validate_additional_datasets"], [180, 2, 1, "", "validate_custom_datasets"], [180, 2, 1, "", "validate_parse_trees"]], "seldonian.spec.SupervisedSpec": [[181, 2, 1, "", "__init__"], [181, 2, 1, "", "__repr__"], [181, 2, 1, "", "validate_additional_datasets"], [181, 2, 1, "", "validate_custom_datasets"], [181, 2, 1, "", "validate_parse_trees"]], "seldonian.utils": [[186, 0, 0, "-", "RL_utils"], [190, 0, 0, "-", "hyperparam_utils"], [197, 0, 0, "-", "io_utils"], [204, 0, 0, "-", "plot_utils"], [206, 0, 0, "-", "stats_utils"], [213, 0, 0, "-", "tutorial_utils"]], "seldonian.utils.RL_utils": [[187, 3, 1, "", "argmax_multi"], [188, 3, 1, "", "clamp"], [189, 3, 1, "", "error"]], "seldonian.utils.hyperparam_utils": [[191, 3, 1, "", "bootstrap_sample_dataset"], [192, 3, 1, "", "clopper_pearson_bound"], [193, 3, 1, "", "create_shuffled_dataset"], [194, 3, 1, "", "rebuild_parse_trees"], [195, 3, 1, "", "set_spec_with_hyperparam_setting"], [196, 3, 1, "", "ttest_bound"]], "seldonian.utils.io_utils": [[198, 3, 1, "", "cmaes_logger"], [199, 3, 1, "", "dir_path"], [200, 3, 1, "", "load_json"], [201, 3, 1, "", "load_pickle"], [202, 3, 1, "", "save_json"], [203, 3, 1, "", "save_pickle"]], "seldonian.utils.plot_utils": [[205, 3, 1, "", "plot_gradient_descent"]], "seldonian.utils.stats_utils": [[207, 3, 1, "", "custom_cumprod"], [208, 3, 1, "", "default_supervised_initial_solution_fn"], [209, 3, 1, "", "softmax"], [210, 3, 1, "", "stddev"], [211, 3, 1, "", "tinv"], [212, 3, 1, "", "weighted_sum_gamma"]], "seldonian.utils.tutorial_utils": [[214, 3, 1, "", "generate_clipped_data"], [215, 3, 1, "", "generate_data"], [216, 3, 1, "", "make_synthetic_regression_dataset"]], "seldonian.warnings": [[218, 0, 0, "-", "custom_warnings"]], "seldonian.warnings.custom_warnings": [[219, 3, 1, "", "custom_formatwarning"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:data", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "data", "Python data"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"seldonian": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 222], "rl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "agent": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "base": [5, 6, 7], "fourier": [6, 7], "discrete_random_ag": [8, 9], "function_approxim": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "linear_fa": [13, 14, 15], "linear_state_action_value_fa": 15, "tabl": [16, 17, 18, 19, 222], "q_tabl": 17, "construct_q_table_from_env_descript": 19, "parameterized_non_learning_softmax_ag": [20, 21], "polici": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31], "discrete_action_polici": 24, "simglucosepolicyfixedarea": [26, 27], "sigmoidpolicyfixedarea": 27, "softmax": [28, 29, 30, 31, 209], "discretesoftmax": 29, "mixedsoftmax": 30, "keyboard_gridworld": [32, 33], "mountain_car_rough_solut": [34, 35], "simglucose_custom_fixedarea_random_ag": [36, 37], "simglucosefixedareaag": 37, "env_descript": [38, 39, 40, 41, 42, 43, 44], "check_space_typ": 41, "space": [42, 43, 44], "continuous_spac": 43, "discrete_spac": 44, "rl_model": [45, 46], "rl_runner": [47, 48, 49, 50, 51, 52, 53], "create_agent_fromdict": 48, "run_episod": 49, "run_episode_from_dict": 50, "run_episodes_par": 51, "run_trial": 52, "run_trial_given_agent_and_env": 53, "environ": [54, 55, 56, 57, 58, 59, 60, 61, 62], "gridworld": [57, 58], "mountaincar": [59, 60], "n_step_mountaincar": [61, 62], "candidate_select": [63, 64, 65], "candidateselect": 65, "dataset": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 223], "customdataset": 67, "custommetadata": 68, "datasetload": 70, "episod": 71, "metadata": 72, "rldataset": 73, "rlmetadata": 74, "superviseddataset": 75, "supervisedmetadata": 76, "load_rl_metadata": 77, "load_custom_metadata": 78, "load_supervised_metadata": 79, "hyperparam_search": [80, 81, 82], "hyperschema": 81, "hyperparamsearch": 82, "model": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 223], "custom_text_model": [84, 85], "customtextmodel": 85, "baselogisticregressionmodel": 87, "binarylogisticregressionmodel": 88, "boundedlinearregressionmodel": 89, "classificationmodel": 90, "dummyclassifiermodel": 91, "linearregressionmodel": 92, "linearregressionmodellistfeatur": 93, "multiclasslogisticregressionmodel": 94, "randomclassifiermodel": 95, "regressionmodel": 96, "seldonianmodel": 97, "supervisedmodel": 98, "object": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 223], "error_r": 100, "false_negative_r": 101, "false_positive_r": 102, "is_estim": 103, "mean_error": 104, "mean_squared_error": 105, "negative_r": 106, "pdis_estim": 107, "positive_r": 108, "true_negative_r": 109, "true_positive_r": 110, "us_estim": 111, "wis_estim": 112, "binary_logistic_loss": 113, "confusion_matrix": 114, "gradient_bounded_squared_error": 115, "gradient_mean_squared_error": 116, "gradient_binary_logistic_loss": 117, "multiclass_logistic_loss": 118, "sklearn_lr": [119, 120], "sklearnlinearregressor": 120, "sklearn_model": [121, 122, 123], "supervisedsklearnbasemodel": 122, "sklearn_predict_vjp": [123, 127, 132], "tree": [124, 125, 126, 127, 128, 129, 130, 131, 132], "skrandomforest_model": [125, 126, 127], "seldonianrandomforest": 126, "sktree_model": [128, 129, 130, 131, 132], "seldoniandecisiontre": 129, "probs2theta": 130, "sigmoid": 131, "optim": [133, 134, 135, 136], "gradient_desc": [134, 135, 136], "gradient_descent_adam": 135, "setup_gradi": 136, "parse_tre": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "node": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "basenod": 139, "cvarsqebasenod": 140, "confusionmatrixbasenod": 141, "constantnod": 142, "internalnod": 143, "medcustombasenod": 144, "multiclassbasenod": 145, "newpolicyperformancebasenod": 146, "rlaltrewardbasenod": 148, "oper": 149, "parsetre": 151, "make_parse_trees_from_constraint": 152, "zhat_func": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "batcher": 154, "evaluate_statist": 155, "sample_from_statist": 156, "vector_accuraci": 157, "vector_error": 158, "vector_error_r": 159, "vector_false_negative_r": 160, "vector_false_positive_r": 161, "vector_is_estim": 162, "vector_negative_r": 163, "vector_pdis_estim": 164, "vector_positive_r": 165, "vector_squared_error": 166, "vector_true_negative_r": 167, "vector_true_positive_r": 168, "vector_wis_estim": 169, "vector_auxiliary_return_us_estim": 170, "vector_confusion_matrix": 171, "safety_test": [172, 173, 174], "safetytest": 174, "seldonian_algorithm": [175, 176], "seldonianalgorithm": 176, "spec": [177, 178, 179, 180, 181, 182, 183, 184, 223], "hyperparameterselectionspec": 178, "rlspec": 179, "supervisedspec": 181, "createrlspec": 182, "createsimplesupervisedspec": 183, "createsupervisedspec": 184, "util": [185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216], "rl_util": [186, 187, 188, 189], "argmax_multi": 187, "clamp": 188, "error": 189, "hyperparam_util": [190, 191, 192, 193, 194, 195, 196], "bootstrap_sample_dataset": 191, "clopper_pearson_bound": 192, "create_shuffled_dataset": 193, "rebuild_parse_tre": 194, "set_spec_with_hyperparam_set": 195, "ttest_bound": 196, "io_util": [197, 198, 199, 200, 201, 202, 203], "cmaes_logg": 198, "dir_path": 199, "load_json": 200, "load_pickl": 201, "save_json": 202, "save_pickl": 203, "plot_util": [204, 205], "plot_gradient_desc": 205, "stats_util": [206, 207, 208, 209, 210, 211, 212], "custom_cumprod": 207, "default_supervised_initial_solution_fn": 208, "stddev": 210, "tinv": 211, "weighted_sum_gamma": 212, "tutorial_util": [213, 214, 215, 216], "generate_clipped_data": 214, "generate_data": 215, "make_synthetic_regression_dataset": 216, "warn": [217, 218, 219], "custom_warn": [218, 219], "custom_formatwarn": 219, "api": 220, "get": 221, "start": 221, "instal": 221, "A": 221, "first": 221, "tutori": 221, "engin": 222, "document": 222, "content": 222, "overview": 223, "interfac": 223, "behavior": 223, "constraint": 223, "string": 223, "what": 223, "doe": 223, "sa": 223, "run": 223, "do": 223, "candid": 223, "select": 223, "safeti": 223, "test": 223}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"seldonian": [[0, "module-seldonian"]], "seldonian.RL": [[1, "module-seldonian.RL"]], "seldonian.RL.Agents": [[2, "module-seldonian.RL.Agents"]], "seldonian.RL.Agents.Agent": [[3, "module-seldonian.RL.Agents.Agent"]], "seldonian.RL.Agents.Agent.Agent": [[4, "seldonian-rl-agents-agent-agent"]], "seldonian.RL.Agents.Bases": [[5, "module-seldonian.RL.Agents.Bases"]], "seldonian.RL.Agents.Bases.Fourier": [[6, "module-seldonian.RL.Agents.Bases.Fourier"]], "seldonian.RL.Agents.Bases.Fourier.Fourier": [[7, "seldonian-rl-agents-bases-fourier-fourier"]], "seldonian.RL.Agents.Discrete_Random_Agent": [[8, "module-seldonian.RL.Agents.Discrete_Random_Agent"]], "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent": [[9, "seldonian-rl-agents-discrete-random-agent-discrete-random-agent"]], "seldonian.RL.Agents.Function_Approximators": [[10, "module-seldonian.RL.Agents.Function_Approximators"]], "seldonian.RL.Agents.Function_Approximators.Function_Approximator": [[11, "module-seldonian.RL.Agents.Function_Approximators.Function_Approximator"]], "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator": [[12, "seldonian-rl-agents-function-approximators-function-approximator-function-approximator"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA": [[13, "module-seldonian.RL.Agents.Function_Approximators.Linear_FA"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA": [[14, "seldonian-rl-agents-function-approximators-linear-fa-linear-fa"]], "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA": [[15, "seldonian-rl-agents-function-approximators-linear-fa-linear-state-action-value-fa"]], "seldonian.RL.Agents.Function_Approximators.Table": [[16, "module-seldonian.RL.Agents.Function_Approximators.Table"]], "seldonian.RL.Agents.Function_Approximators.Table.Q_Table": [[17, "seldonian-rl-agents-function-approximators-table-q-table"]], "seldonian.RL.Agents.Function_Approximators.Table.Table": [[18, "seldonian-rl-agents-function-approximators-table-table"]], "seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description": [[19, "seldonian-rl-agents-function-approximators-table-construct-q-table-from-env-description"]], "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent": [[20, "module-seldonian.RL.Agents.Parameterized_non_learning_softmax_agent"]], "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent": [[21, "seldonian-rl-agents-parameterized-non-learning-softmax-agent-parameterized-non-learning-softmax-agent"]], "seldonian.RL.Agents.Policies": [[22, "module-seldonian.RL.Agents.Policies"]], "seldonian.RL.Agents.Policies.Policy": [[23, "module-seldonian.RL.Agents.Policies.Policy"]], "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy": [[24, "seldonian-rl-agents-policies-policy-discrete-action-policy"]], "seldonian.RL.Agents.Policies.Policy.Policy": [[25, "seldonian-rl-agents-policies-policy-policy"]], "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea": [[26, "module-seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea"]], "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea": [[27, "seldonian-rl-agents-policies-simglucosepolicyfixedarea-sigmoidpolicyfixedarea"]], "seldonian.RL.Agents.Policies.Softmax": [[28, "module-seldonian.RL.Agents.Policies.Softmax"]], "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax": [[29, "seldonian-rl-agents-policies-softmax-discretesoftmax"]], "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax": [[30, "seldonian-rl-agents-policies-softmax-mixedsoftmax"]], "seldonian.RL.Agents.Policies.Softmax.Softmax": [[31, "seldonian-rl-agents-policies-softmax-softmax"]], "seldonian.RL.Agents.keyboard_gridworld": [[32, "module-seldonian.RL.Agents.keyboard_gridworld"]], "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld": [[33, "seldonian-rl-agents-keyboard-gridworld-keyboard-gridworld"]], "seldonian.RL.Agents.mountain_car_rough_solution": [[34, "module-seldonian.RL.Agents.mountain_car_rough_solution"]], "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution": [[35, "seldonian-rl-agents-mountain-car-rough-solution-mountain-car-rough-solution"]], "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent": [[36, "module-seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent"]], "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent": [[37, "seldonian-rl-agents-simglucose-custom-fixedarea-random-agent-simglucosefixedareaagent"]], "seldonian.RL.Env_Description": [[38, "module-seldonian.RL.Env_Description"]], "seldonian.RL.Env_Description.Env_Description": [[39, "module-seldonian.RL.Env_Description.Env_Description"]], "seldonian.RL.Env_Description.Env_Description.Env_Description": [[40, "seldonian-rl-env-description-env-description-env-description"]], "seldonian.RL.Env_Description.Env_Description.check_space_type": [[41, "seldonian-rl-env-description-env-description-check-space-type"]], "seldonian.RL.Env_Description.Spaces": [[42, "module-seldonian.RL.Env_Description.Spaces"]], "seldonian.RL.Env_Description.Spaces.Continuous_Space": [[43, "seldonian-rl-env-description-spaces-continuous-space"]], "seldonian.RL.Env_Description.Spaces.Discrete_Space": [[44, "seldonian-rl-env-description-spaces-discrete-space"]], "seldonian.RL.RL_model": [[45, "module-seldonian.RL.RL_model"]], "seldonian.RL.RL_model.RL_model": [[46, "seldonian-rl-rl-model-rl-model"]], "seldonian.RL.RL_runner": [[47, "module-seldonian.RL.RL_runner"]], "seldonian.RL.RL_runner.create_agent_fromdict": [[48, "seldonian-rl-rl-runner-create-agent-fromdict"]], "seldonian.RL.RL_runner.run_episode": [[49, "seldonian-rl-rl-runner-run-episode"]], "seldonian.RL.RL_runner.run_episode_from_dict": [[50, "seldonian-rl-rl-runner-run-episode-from-dict"]], "seldonian.RL.RL_runner.run_episodes_par": [[51, "seldonian-rl-rl-runner-run-episodes-par"]], "seldonian.RL.RL_runner.run_trial": [[52, "seldonian-rl-rl-runner-run-trial"]], "seldonian.RL.RL_runner.run_trial_given_agent_and_env": [[53, "seldonian-rl-rl-runner-run-trial-given-agent-and-env"]], "seldonian.RL.environments": [[54, "module-seldonian.RL.environments"]], "seldonian.RL.environments.Environment": [[55, "module-seldonian.RL.environments.Environment"]], "seldonian.RL.environments.Environment.Environment": [[56, "seldonian-rl-environments-environment-environment"]], "seldonian.RL.environments.gridworld": [[57, "module-seldonian.RL.environments.gridworld"]], "seldonian.RL.environments.gridworld.Gridworld": [[58, "seldonian-rl-environments-gridworld-gridworld"]], "seldonian.RL.environments.mountaincar": [[59, "module-seldonian.RL.environments.mountaincar"]], "seldonian.RL.environments.mountaincar.Mountaincar": [[60, "seldonian-rl-environments-mountaincar-mountaincar"]], "seldonian.RL.environments.n_step_mountaincar": [[61, "module-seldonian.RL.environments.n_step_mountaincar"]], "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar": [[62, "seldonian-rl-environments-n-step-mountaincar-n-step-mountaincar"]], "seldonian.candidate_selection": [[63, "module-seldonian.candidate_selection"]], "seldonian.candidate_selection.candidate_selection": [[64, "module-seldonian.candidate_selection.candidate_selection"]], "seldonian.candidate_selection.candidate_selection.CandidateSelection": [[65, "seldonian-candidate-selection-candidate-selection-candidateselection"]], "seldonian.dataset": [[66, "module-seldonian.dataset"]], "seldonian.dataset.CustomDataSet": [[67, "seldonian-dataset-customdataset"]], "seldonian.dataset.CustomMetaData": [[68, "seldonian-dataset-custommetadata"]], "seldonian.dataset.DataSet": [[69, "seldonian-dataset-dataset"]], "seldonian.dataset.DataSetLoader": [[70, "seldonian-dataset-datasetloader"]], "seldonian.dataset.Episode": [[71, "seldonian-dataset-episode"]], "seldonian.dataset.MetaData": [[72, "seldonian-dataset-metadata"]], "seldonian.dataset.RLDataSet": [[73, "seldonian-dataset-rldataset"]], "seldonian.dataset.RLMetaData": [[74, "seldonian-dataset-rlmetadata"]], "seldonian.dataset.SupervisedDataSet": [[75, "seldonian-dataset-superviseddataset"]], "seldonian.dataset.SupervisedMetaData": [[76, "seldonian-dataset-supervisedmetadata"]], "seldonian.dataset.load_RL_metadata": [[77, "seldonian-dataset-load-rl-metadata"]], "seldonian.dataset.load_custom_metadata": [[78, "seldonian-dataset-load-custom-metadata"]], "seldonian.dataset.load_supervised_metadata": [[79, "seldonian-dataset-load-supervised-metadata"]], "seldonian.hyperparam_search": [[80, "module-seldonian.hyperparam_search"]], "seldonian.hyperparam_search.HyperSchema": [[81, "seldonian-hyperparam-search-hyperschema"]], "seldonian.hyperparam_search.HyperparamSearch": [[82, "seldonian-hyperparam-search-hyperparamsearch"]], "seldonian.models": [[83, "module-seldonian.models"]], "seldonian.models.custom_text_model": [[84, "module-seldonian.models.custom_text_model"]], "seldonian.models.custom_text_model.CustomTextModel": [[85, "seldonian-models-custom-text-model-customtextmodel"]], "seldonian.models.models": [[86, "module-seldonian.models.models"]], "seldonian.models.models.BaseLogisticRegressionModel": [[87, "seldonian-models-models-baselogisticregressionmodel"]], "seldonian.models.models.BinaryLogisticRegressionModel": [[88, "seldonian-models-models-binarylogisticregressionmodel"]], "seldonian.models.models.BoundedLinearRegressionModel": [[89, "seldonian-models-models-boundedlinearregressionmodel"]], "seldonian.models.models.ClassificationModel": [[90, "seldonian-models-models-classificationmodel"]], "seldonian.models.models.DummyClassifierModel": [[91, "seldonian-models-models-dummyclassifiermodel"]], "seldonian.models.models.LinearRegressionModel": [[92, "seldonian-models-models-linearregressionmodel"]], "seldonian.models.models.LinearRegressionModelListFeatures": [[93, "seldonian-models-models-linearregressionmodellistfeatures"]], "seldonian.models.models.MultiClassLogisticRegressionModel": [[94, "seldonian-models-models-multiclasslogisticregressionmodel"]], "seldonian.models.models.RandomClassifierModel": [[95, "seldonian-models-models-randomclassifiermodel"]], "seldonian.models.models.RegressionModel": [[96, "seldonian-models-models-regressionmodel"]], "seldonian.models.models.SeldonianModel": [[97, "seldonian-models-models-seldonianmodel"]], "seldonian.models.models.SupervisedModel": [[98, "seldonian-models-models-supervisedmodel"]], "seldonian.models.objectives": [[99, "module-seldonian.models.objectives"]], "seldonian.models.objectives.Error_Rate": [[100, "seldonian-models-objectives-error-rate"]], "seldonian.models.objectives.False_Negative_Rate": [[101, "seldonian-models-objectives-false-negative-rate"]], "seldonian.models.objectives.False_Positive_Rate": [[102, "seldonian-models-objectives-false-positive-rate"]], "seldonian.models.objectives.IS_estimate": [[103, "seldonian-models-objectives-is-estimate"]], "seldonian.models.objectives.Mean_Error": [[104, "seldonian-models-objectives-mean-error"]], "seldonian.models.objectives.Mean_Squared_Error": [[105, "seldonian-models-objectives-mean-squared-error"]], "seldonian.models.objectives.Negative_Rate": [[106, "seldonian-models-objectives-negative-rate"]], "seldonian.models.objectives.PDIS_estimate": [[107, "seldonian-models-objectives-pdis-estimate"]], "seldonian.models.objectives.Positive_Rate": [[108, "seldonian-models-objectives-positive-rate"]], "seldonian.models.objectives.True_Negative_Rate": [[109, "seldonian-models-objectives-true-negative-rate"]], "seldonian.models.objectives.True_Positive_Rate": [[110, "seldonian-models-objectives-true-positive-rate"]], "seldonian.models.objectives.US_estimate": [[111, "seldonian-models-objectives-us-estimate"]], "seldonian.models.objectives.WIS_estimate": [[112, "seldonian-models-objectives-wis-estimate"]], "seldonian.models.objectives.binary_logistic_loss": [[113, "seldonian-models-objectives-binary-logistic-loss"]], "seldonian.models.objectives.confusion_matrix": [[114, "seldonian-models-objectives-confusion-matrix"]], "seldonian.models.objectives.gradient_Bounded_Squared_Error": [[115, "seldonian-models-objectives-gradient-bounded-squared-error"]], "seldonian.models.objectives.gradient_Mean_Squared_Error": [[116, "seldonian-models-objectives-gradient-mean-squared-error"]], "seldonian.models.objectives.gradient_binary_logistic_loss": [[117, "seldonian-models-objectives-gradient-binary-logistic-loss"]], "seldonian.models.objectives.multiclass_logistic_loss": [[118, "seldonian-models-objectives-multiclass-logistic-loss"]], "seldonian.models.sklearn_lr": [[119, "module-seldonian.models.sklearn_lr"]], "seldonian.models.sklearn_lr.SkLearnLinearRegressor": [[120, "seldonian-models-sklearn-lr-sklearnlinearregressor"]], "seldonian.models.sklearn_model": [[121, "module-seldonian.models.sklearn_model"]], "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel": [[122, "seldonian-models-sklearn-model-supervisedsklearnbasemodel"]], "seldonian.models.sklearn_model.sklearn_predict_vjp": [[123, "seldonian-models-sklearn-model-sklearn-predict-vjp"]], "seldonian.models.trees": [[124, "module-seldonian.models.trees"]], "seldonian.models.trees.skrandomforest_model": [[125, "module-seldonian.models.trees.skrandomforest_model"]], "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest": [[126, "seldonian-models-trees-skrandomforest-model-seldonianrandomforest"]], "seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp": [[127, "seldonian-models-trees-skrandomforest-model-sklearn-predict-vjp"]], "seldonian.models.trees.sktree_model": [[128, "module-seldonian.models.trees.sktree_model"]], "seldonian.models.trees.sktree_model.SeldonianDecisionTree": [[129, "seldonian-models-trees-sktree-model-seldoniandecisiontree"]], "seldonian.models.trees.sktree_model.probs2theta": [[130, "seldonian-models-trees-sktree-model-probs2theta"]], "seldonian.models.trees.sktree_model.sigmoid": [[131, "seldonian-models-trees-sktree-model-sigmoid"]], "seldonian.models.trees.sktree_model.sklearn_predict_vjp": [[132, "seldonian-models-trees-sktree-model-sklearn-predict-vjp"]], "seldonian.optimizers": [[133, "module-seldonian.optimizers"]], "seldonian.optimizers.gradient_descent": [[134, "module-seldonian.optimizers.gradient_descent"]], "seldonian.optimizers.gradient_descent.gradient_descent_adam": [[135, "seldonian-optimizers-gradient-descent-gradient-descent-adam"]], "seldonian.optimizers.gradient_descent.setup_gradients": [[136, "seldonian-optimizers-gradient-descent-setup-gradients"]], "seldonian.parse_tree": [[137, "module-seldonian.parse_tree"]], "seldonian.parse_tree.nodes": [[138, "module-seldonian.parse_tree.nodes"]], "seldonian.parse_tree.nodes.BaseNode": [[139, "seldonian-parse-tree-nodes-basenode"]], "seldonian.parse_tree.nodes.CVaRSQeBaseNode": [[140, "seldonian-parse-tree-nodes-cvarsqebasenode"]], "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode": [[141, "seldonian-parse-tree-nodes-confusionmatrixbasenode"]], "seldonian.parse_tree.nodes.ConstantNode": [[142, "seldonian-parse-tree-nodes-constantnode"]], "seldonian.parse_tree.nodes.InternalNode": [[143, "seldonian-parse-tree-nodes-internalnode"]], "seldonian.parse_tree.nodes.MEDCustomBaseNode": [[144, "seldonian-parse-tree-nodes-medcustombasenode"]], "seldonian.parse_tree.nodes.MultiClassBaseNode": [[145, "seldonian-parse-tree-nodes-multiclassbasenode"]], "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode": [[146, "seldonian-parse-tree-nodes-newpolicyperformancebasenode"]], "seldonian.parse_tree.nodes.Node": [[147, "seldonian-parse-tree-nodes-node"]], "seldonian.parse_tree.nodes.RLAltRewardBaseNode": [[148, "seldonian-parse-tree-nodes-rlaltrewardbasenode"]], "seldonian.parse_tree.operators": [[149, "module-seldonian.parse_tree.operators"]], "seldonian.parse_tree.parse_tree": [[150, "module-seldonian.parse_tree.parse_tree"]], "seldonian.parse_tree.parse_tree.ParseTree": [[151, "seldonian-parse-tree-parse-tree-parsetree"]], "seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints": [[152, "seldonian-parse-tree-parse-tree-make-parse-trees-from-constraints"]], "seldonian.parse_tree.zhat_funcs": [[153, "module-seldonian.parse_tree.zhat_funcs"]], "seldonian.parse_tree.zhat_funcs.batcher": [[154, "seldonian-parse-tree-zhat-funcs-batcher"]], "seldonian.parse_tree.zhat_funcs.evaluate_statistic": [[155, "seldonian-parse-tree-zhat-funcs-evaluate-statistic"]], "seldonian.parse_tree.zhat_funcs.sample_from_statistic": [[156, "seldonian-parse-tree-zhat-funcs-sample-from-statistic"]], "seldonian.parse_tree.zhat_funcs.vector_Accuracy": [[157, "seldonian-parse-tree-zhat-funcs-vector-accuracy"]], "seldonian.parse_tree.zhat_funcs.vector_Error": [[158, "seldonian-parse-tree-zhat-funcs-vector-error"]], "seldonian.parse_tree.zhat_funcs.vector_Error_Rate": [[159, "seldonian-parse-tree-zhat-funcs-vector-error-rate"]], "seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate": [[160, "seldonian-parse-tree-zhat-funcs-vector-false-negative-rate"]], "seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate": [[161, "seldonian-parse-tree-zhat-funcs-vector-false-positive-rate"]], "seldonian.parse_tree.zhat_funcs.vector_IS_estimate": [[162, "seldonian-parse-tree-zhat-funcs-vector-is-estimate"]], "seldonian.parse_tree.zhat_funcs.vector_Negative_Rate": [[163, "seldonian-parse-tree-zhat-funcs-vector-negative-rate"]], "seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate": [[164, "seldonian-parse-tree-zhat-funcs-vector-pdis-estimate"]], "seldonian.parse_tree.zhat_funcs.vector_Positive_Rate": [[165, "seldonian-parse-tree-zhat-funcs-vector-positive-rate"]], "seldonian.parse_tree.zhat_funcs.vector_Squared_Error": [[166, "seldonian-parse-tree-zhat-funcs-vector-squared-error"]], "seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate": [[167, "seldonian-parse-tree-zhat-funcs-vector-true-negative-rate"]], "seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate": [[168, "seldonian-parse-tree-zhat-funcs-vector-true-positive-rate"]], "seldonian.parse_tree.zhat_funcs.vector_WIS_estimate": [[169, "seldonian-parse-tree-zhat-funcs-vector-wis-estimate"]], "seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate": [[170, "seldonian-parse-tree-zhat-funcs-vector-auxiliary-return-us-estimate"]], "seldonian.parse_tree.zhat_funcs.vector_confusion_matrix": [[171, "seldonian-parse-tree-zhat-funcs-vector-confusion-matrix"]], "seldonian.safety_test": [[172, "module-seldonian.safety_test"]], "seldonian.safety_test.safety_test": [[173, "module-seldonian.safety_test.safety_test"]], "seldonian.safety_test.safety_test.SafetyTest": [[174, "seldonian-safety-test-safety-test-safetytest"]], "seldonian.seldonian_algorithm": [[175, "module-seldonian.seldonian_algorithm"]], "seldonian.seldonian_algorithm.SeldonianAlgorithm": [[176, "seldonian-seldonian-algorithm-seldonianalgorithm"]], "seldonian.spec": [[177, "module-seldonian.spec"]], "seldonian.spec.HyperparameterSelectionSpec": [[178, "seldonian-spec-hyperparameterselectionspec"]], "seldonian.spec.RLSpec": [[179, "seldonian-spec-rlspec"]], "seldonian.spec.Spec": [[180, "seldonian-spec-spec"]], "seldonian.spec.SupervisedSpec": [[181, "seldonian-spec-supervisedspec"]], "seldonian.spec.createRLSpec": [[182, "seldonian-spec-createrlspec"]], "seldonian.spec.createSimpleSupervisedSpec": [[183, "seldonian-spec-createsimplesupervisedspec"]], "seldonian.spec.createSupervisedSpec": [[184, "seldonian-spec-createsupervisedspec"]], "seldonian.utils": [[185, "module-seldonian.utils"]], "seldonian.utils.RL_utils": [[186, "module-seldonian.utils.RL_utils"]], "seldonian.utils.RL_utils.argmax_multi": [[187, "seldonian-utils-rl-utils-argmax-multi"]], "seldonian.utils.RL_utils.clamp": [[188, "seldonian-utils-rl-utils-clamp"]], "seldonian.utils.RL_utils.error": [[189, "seldonian-utils-rl-utils-error"]], "seldonian.utils.hyperparam_utils": [[190, "module-seldonian.utils.hyperparam_utils"]], "seldonian.utils.hyperparam_utils.bootstrap_sample_dataset": [[191, "seldonian-utils-hyperparam-utils-bootstrap-sample-dataset"]], "seldonian.utils.hyperparam_utils.clopper_pearson_bound": [[192, "seldonian-utils-hyperparam-utils-clopper-pearson-bound"]], "seldonian.utils.hyperparam_utils.create_shuffled_dataset": [[193, "seldonian-utils-hyperparam-utils-create-shuffled-dataset"]], "seldonian.utils.hyperparam_utils.rebuild_parse_trees": [[194, "seldonian-utils-hyperparam-utils-rebuild-parse-trees"]], "seldonian.utils.hyperparam_utils.set_spec_with_hyperparam_setting": [[195, "seldonian-utils-hyperparam-utils-set-spec-with-hyperparam-setting"]], "seldonian.utils.hyperparam_utils.ttest_bound": [[196, "seldonian-utils-hyperparam-utils-ttest-bound"]], "seldonian.utils.io_utils": [[197, "module-seldonian.utils.io_utils"]], "seldonian.utils.io_utils.cmaes_logger": [[198, "seldonian-utils-io-utils-cmaes-logger"]], "seldonian.utils.io_utils.dir_path": [[199, "seldonian-utils-io-utils-dir-path"]], "seldonian.utils.io_utils.load_json": [[200, "seldonian-utils-io-utils-load-json"]], "seldonian.utils.io_utils.load_pickle": [[201, "seldonian-utils-io-utils-load-pickle"]], "seldonian.utils.io_utils.save_json": [[202, "seldonian-utils-io-utils-save-json"]], "seldonian.utils.io_utils.save_pickle": [[203, "seldonian-utils-io-utils-save-pickle"]], "seldonian.utils.plot_utils": [[204, "module-seldonian.utils.plot_utils"]], "seldonian.utils.plot_utils.plot_gradient_descent": [[205, "seldonian-utils-plot-utils-plot-gradient-descent"]], "seldonian.utils.stats_utils": [[206, "module-seldonian.utils.stats_utils"]], "seldonian.utils.stats_utils.custom_cumprod": [[207, "seldonian-utils-stats-utils-custom-cumprod"]], "seldonian.utils.stats_utils.default_supervised_initial_solution_fn": [[208, "seldonian-utils-stats-utils-default-supervised-initial-solution-fn"]], "seldonian.utils.stats_utils.softmax": [[209, "seldonian-utils-stats-utils-softmax"]], "seldonian.utils.stats_utils.stddev": [[210, "seldonian-utils-stats-utils-stddev"]], "seldonian.utils.stats_utils.tinv": [[211, "seldonian-utils-stats-utils-tinv"]], "seldonian.utils.stats_utils.weighted_sum_gamma": [[212, "seldonian-utils-stats-utils-weighted-sum-gamma"]], "seldonian.utils.tutorial_utils": [[213, "module-seldonian.utils.tutorial_utils"]], "seldonian.utils.tutorial_utils.generate_clipped_data": [[214, "seldonian-utils-tutorial-utils-generate-clipped-data"]], "seldonian.utils.tutorial_utils.generate_data": [[215, "seldonian-utils-tutorial-utils-generate-data"]], "seldonian.utils.tutorial_utils.make_synthetic_regression_dataset": [[216, "seldonian-utils-tutorial-utils-make-synthetic-regression-dataset"]], "seldonian.warnings": [[217, "module-seldonian.warnings"]], "seldonian.warnings.custom_warnings": [[218, "module-seldonian.warnings.custom_warnings"]], "seldonian.warnings.custom_warnings.custom_formatwarning": [[219, "seldonian-warnings-custom-warnings-custom-formatwarning"]], "API": [[220, "api"]], "Getting Started": [[221, "getting-started"]], "Installation": [[221, "installation"]], "A first tutorial": [[221, "a-first-tutorial"]], "Seldonian Engine documentation": [[222, "seldonian-engine-documentation"]], "Table of contents": [[222, "table-of-contents"]], "Overview": [[223, "overview"]], "Interface": [[223, "interface"]], "Spec object": [[223, "spec-object"]], "Dataset object": [[223, "dataset-object"]], "Model object": [[223, "model-object"]], "Behavioral constraints": [[223, "behavioral-constraints"]], "Constraint strings": [[223, "constraint-strings"]], "What does SA.run() do?": [[223, "what-does-sa-run-do"]], "Candidate Selection": [[223, "candidate-selection"]], "Safety Test": [[223, "safety-test"]]}, "indexentries": {"module": [[0, "module-seldonian"], [1, "module-seldonian.RL"], [2, "module-seldonian.RL.Agents"], [3, "module-seldonian.RL.Agents.Agent"], [5, "module-seldonian.RL.Agents.Bases"], [6, "module-seldonian.RL.Agents.Bases.Fourier"], [8, "module-seldonian.RL.Agents.Discrete_Random_Agent"], [10, "module-seldonian.RL.Agents.Function_Approximators"], [11, "module-seldonian.RL.Agents.Function_Approximators.Function_Approximator"], [13, "module-seldonian.RL.Agents.Function_Approximators.Linear_FA"], [16, "module-seldonian.RL.Agents.Function_Approximators.Table"], [20, "module-seldonian.RL.Agents.Parameterized_non_learning_softmax_agent"], [22, "module-seldonian.RL.Agents.Policies"], [23, "module-seldonian.RL.Agents.Policies.Policy"], [26, "module-seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea"], [28, "module-seldonian.RL.Agents.Policies.Softmax"], [32, "module-seldonian.RL.Agents.keyboard_gridworld"], [34, "module-seldonian.RL.Agents.mountain_car_rough_solution"], [36, "module-seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent"], [38, "module-seldonian.RL.Env_Description"], [39, "module-seldonian.RL.Env_Description.Env_Description"], [42, "module-seldonian.RL.Env_Description.Spaces"], [45, "module-seldonian.RL.RL_model"], [47, "module-seldonian.RL.RL_runner"], [54, "module-seldonian.RL.environments"], [55, "module-seldonian.RL.environments.Environment"], [57, "module-seldonian.RL.environments.gridworld"], [59, "module-seldonian.RL.environments.mountaincar"], [61, "module-seldonian.RL.environments.n_step_mountaincar"], [63, "module-seldonian.candidate_selection"], [64, "module-seldonian.candidate_selection.candidate_selection"], [66, "module-seldonian.dataset"], [80, "module-seldonian.hyperparam_search"], [83, "module-seldonian.models"], [84, "module-seldonian.models.custom_text_model"], [86, "module-seldonian.models.models"], [99, "module-seldonian.models.objectives"], [119, "module-seldonian.models.sklearn_lr"], [121, "module-seldonian.models.sklearn_model"], [124, "module-seldonian.models.trees"], [125, "module-seldonian.models.trees.skrandomforest_model"], [128, "module-seldonian.models.trees.sktree_model"], [133, "module-seldonian.optimizers"], [134, "module-seldonian.optimizers.gradient_descent"], [137, "module-seldonian.parse_tree"], [138, "module-seldonian.parse_tree.nodes"], [149, "module-seldonian.parse_tree.operators"], [150, "module-seldonian.parse_tree.parse_tree"], [153, "module-seldonian.parse_tree.zhat_funcs"], [172, "module-seldonian.safety_test"], [173, "module-seldonian.safety_test.safety_test"], [175, "module-seldonian.seldonian_algorithm"], [177, "module-seldonian.spec"], [185, "module-seldonian.utils"], [186, "module-seldonian.utils.RL_utils"], [190, "module-seldonian.utils.hyperparam_utils"], [197, "module-seldonian.utils.io_utils"], [204, "module-seldonian.utils.plot_utils"], [206, "module-seldonian.utils.stats_utils"], [213, "module-seldonian.utils.tutorial_utils"], [217, "module-seldonian.warnings"], [218, "module-seldonian.warnings.custom_warnings"]], "seldonian": [[0, "module-seldonian"]], "seldonian.rl": [[1, "module-seldonian.RL"]], "seldonian.rl.agents": [[2, "module-seldonian.RL.Agents"]], "seldonian.rl.agents.agent": [[3, "module-seldonian.RL.Agents.Agent"]], "agent (class in seldonian.rl.agents.agent)": [[4, "seldonian.RL.Agents.Agent.Agent"]], "__init__() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.__init__"]], "__repr__() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.__repr__"]], "choose_action() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.choose_action"]], "get_params() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.get_params"]], "get_policy() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.get_policy"]], "get_prob_this_action() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.get_prob_this_action"]], "set_new_params() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.set_new_params"]], "update() (agent method)": [[4, "seldonian.RL.Agents.Agent.Agent.update"]], "seldonian.rl.agents.bases": [[5, "module-seldonian.RL.Agents.Bases"]], "seldonian.rl.agents.bases.fourier": [[6, "module-seldonian.RL.Agents.Bases.Fourier"]], "fourier (class in seldonian.rl.agents.bases.fourier)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier"]], "__init__() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.__init__"]], "__repr__() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.__repr__"]], "calculate_num_features() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.calculate_num_features"]], "construct_basis_matrix() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.construct_basis_matrix"]], "get_features() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.get_features"]], "get_normalized_observation() (fourier method)": [[7, "seldonian.RL.Agents.Bases.Fourier.Fourier.get_normalized_observation"]], "seldonian.rl.agents.discrete_random_agent": [[8, "module-seldonian.RL.Agents.Discrete_Random_Agent"]], "discrete_random_agent (class in seldonian.rl.agents.discrete_random_agent)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent"]], "__init__() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.__init__"]], "__repr__() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.__repr__"]], "choose_action() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.choose_action"]], "get_params() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.get_params"]], "get_policy() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.get_policy"]], "get_prob_this_action() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.get_prob_this_action"]], "set_new_params() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.set_new_params"]], "update() (discrete_random_agent method)": [[9, "seldonian.RL.Agents.Discrete_Random_Agent.Discrete_Random_Agent.update"]], "seldonian.rl.agents.function_approximators": [[10, "module-seldonian.RL.Agents.Function_Approximators"]], "seldonian.rl.agents.function_approximators.function_approximator": [[11, "module-seldonian.RL.Agents.Function_Approximators.Function_Approximator"]], "function_approximator (class in seldonian.rl.agents.function_approximators.function_approximator)": [[12, "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator"]], "__init__() (function_approximator method)": [[12, "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator.__init__"]], "__repr__() (function_approximator method)": [[12, "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator.__repr__"]], "set_new_params() (function_approximator method)": [[12, "seldonian.RL.Agents.Function_Approximators.Function_Approximator.Function_Approximator.set_new_params"]], "seldonian.rl.agents.function_approximators.linear_fa": [[13, "module-seldonian.RL.Agents.Function_Approximators.Linear_FA"]], "linear_fa (class in seldonian.rl.agents.function_approximators.linear_fa)": [[14, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA"]], "__init__() (linear_fa method)": [[14, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA.__init__"]], "__repr__() (linear_fa method)": [[14, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA.__repr__"]], "set_new_params() (linear_fa method)": [[14, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_FA.set_new_params"]], "linear_state_action_value_fa (class in seldonian.rl.agents.function_approximators.linear_fa)": [[15, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA"]], "__init__() (linear_state_action_value_fa method)": [[15, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA.__init__"]], "__repr__() (linear_state_action_value_fa method)": [[15, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA.__repr__"]], "set_new_params() (linear_state_action_value_fa method)": [[15, "seldonian.RL.Agents.Function_Approximators.Linear_FA.Linear_state_action_value_FA.set_new_params"]], "seldonian.rl.agents.function_approximators.table": [[16, "module-seldonian.RL.Agents.Function_Approximators.Table"]], "q_table (class in seldonian.rl.agents.function_approximators.table)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table"]], "__init__() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.__init__"]], "__repr__() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.__repr__"]], "from_environment_state_to_0_indexed_state() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.from_environment_state_to_0_indexed_state"]], "get_action_values_given_state() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.get_action_values_given_state"]], "get_action_values_given_zero_indexed_state() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.get_action_values_given_zero_indexed_state"]], "set_new_params() (q_table method)": [[17, "seldonian.RL.Agents.Function_Approximators.Table.Q_Table.set_new_params"]], "table (class in seldonian.rl.agents.function_approximators.table)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table"]], "__init__() (table method)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table.__init__"]], "__repr__() (table method)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table.__repr__"]], "from_environment_state_to_0_indexed_state() (table method)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table.from_environment_state_to_0_indexed_state"]], "set_new_params() (table method)": [[18, "seldonian.RL.Agents.Function_Approximators.Table.Table.set_new_params"]], "construct_q_table_from_env_description() (in module seldonian.rl.agents.function_approximators.table)": [[19, "seldonian.RL.Agents.Function_Approximators.Table.construct_Q_Table_From_Env_Description"]], "seldonian.rl.agents.parameterized_non_learning_softmax_agent": [[20, "module-seldonian.RL.Agents.Parameterized_non_learning_softmax_agent"]], "parameterized_non_learning_softmax_agent (class in seldonian.rl.agents.parameterized_non_learning_softmax_agent)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent"]], "__init__() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.__init__"]], "__repr__() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.__repr__"]], "choose_action() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.choose_action"]], "get_action_values() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.get_action_values"]], "get_params() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.get_params"]], "get_policy() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.get_policy"]], "get_prob_this_action() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.get_prob_this_action"]], "set_new_params() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.set_new_params"]], "update() (parameterized_non_learning_softmax_agent method)": [[21, "seldonian.RL.Agents.Parameterized_non_learning_softmax_agent.Parameterized_non_learning_softmax_agent.update"]], "seldonian.rl.agents.policies": [[22, "module-seldonian.RL.Agents.Policies"]], "seldonian.rl.agents.policies.policy": [[23, "module-seldonian.RL.Agents.Policies.Policy"]], "discrete_action_policy (class in seldonian.rl.agents.policies.policy)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy"]], "__init__() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.__init__"]], "__repr__() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.__repr__"]], "choose_action() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.choose_action"]], "construct_basis_and_linear_fa() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.construct_basis_and_linear_FA"]], "from_0_indexed_action_to_environment_action() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.from_0_indexed_action_to_environment_action"]], "from_environment_action_to_0_indexed_action() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.from_environment_action_to_0_indexed_action"]], "get_action_values_given_state() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.get_action_values_given_state"]], "get_params() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.get_params"]], "get_prob_this_action() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.get_prob_this_action"]], "get_probs_from_observations_and_actions() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.get_probs_from_observations_and_actions"]], "make_state_action_fa() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.make_state_action_FA"]], "set_new_params() (discrete_action_policy method)": [[24, "seldonian.RL.Agents.Policies.Policy.Discrete_Action_Policy.set_new_params"]], "policy (class in seldonian.rl.agents.policies.policy)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy"]], "__init__() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.__init__"]], "__repr__() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.__repr__"]], "choose_action() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.choose_action"]], "get_params() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.get_params"]], "get_prob_this_action() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.get_prob_this_action"]], "get_probs_from_observations_and_actions() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.get_probs_from_observations_and_actions"]], "set_new_params() (policy method)": [[25, "seldonian.RL.Agents.Policies.Policy.Policy.set_new_params"]], "seldonian.rl.agents.policies.simglucosepolicyfixedarea": [[26, "module-seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea"]], "sigmoidpolicyfixedarea (class in seldonian.rl.agents.policies.simglucosepolicyfixedarea)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea"]], "__init__() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.__init__"]], "__repr__() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.__repr__"]], "choose_action() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.choose_action"]], "get_params() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.get_params"]], "get_prob_this_action() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.get_prob_this_action"]], "get_probs_from_observations_and_actions() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.get_probs_from_observations_and_actions"]], "set_new_params() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.set_new_params"]], "theta2crcf() (sigmoidpolicyfixedarea method)": [[27, "seldonian.RL.Agents.Policies.SimglucosePolicyFixedArea.SigmoidPolicyFixedArea.theta2crcf"]], "seldonian.rl.agents.policies.softmax": [[28, "module-seldonian.RL.Agents.Policies.Softmax"]], "discretesoftmax (class in seldonian.rl.agents.policies.softmax)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax"]], "__init__() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.__init__"]], "__repr__() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.__repr__"]], "_arg() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax._arg"]], "_denom() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax._denom"]], "choose_action() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.choose_action"]], "choose_action_from_action_values() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.choose_action_from_action_values"]], "construct_basis_and_linear_fa() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.construct_basis_and_linear_FA"]], "from_0_indexed_action_to_environment_action() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.from_0_indexed_action_to_environment_action"]], "from_environment_action_to_0_indexed_action() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.from_environment_action_to_0_indexed_action"]], "get_action_probs_from_action_values() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_action_probs_from_action_values"]], "get_action_values_given_state() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_action_values_given_state"]], "get_e_to_the_something_terms() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_e_to_the_something_terms"]], "get_params() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_params"]], "get_prob_this_action() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_prob_this_action"]], "get_probs_from_observations_and_actions() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.get_probs_from_observations_and_actions"]], "make_state_action_fa() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.make_state_action_FA"]], "set_new_params() (discretesoftmax method)": [[29, "seldonian.RL.Agents.Policies.Softmax.DiscreteSoftmax.set_new_params"]], "mixedsoftmax (class in seldonian.rl.agents.policies.softmax)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax"]], "__init__() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.__init__"]], "__repr__() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.__repr__"]], "choose_action() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.choose_action"]], "choose_action_from_action_values() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.choose_action_from_action_values"]], "construct_basis_and_linear_fa() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.construct_basis_and_linear_FA"]], "from_0_indexed_action_to_environment_action() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.from_0_indexed_action_to_environment_action"]], "from_environment_action_to_0_indexed_action() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.from_environment_action_to_0_indexed_action"]], "get_action_probs_from_action_values() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_action_probs_from_action_values"]], "get_action_values_given_state() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_action_values_given_state"]], "get_e_to_the_something_terms() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_e_to_the_something_terms"]], "get_params() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_params"]], "get_prob_this_action() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_prob_this_action"]], "get_probs_from_observations_and_actions() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.get_probs_from_observations_and_actions"]], "make_state_action_fa() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.make_state_action_FA"]], "set_new_params() (mixedsoftmax method)": [[30, "seldonian.RL.Agents.Policies.Softmax.MixedSoftmax.set_new_params"]], "softmax (class in seldonian.rl.agents.policies.softmax)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax"]], "__init__() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.__init__"]], "__repr__() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.__repr__"]], "choose_action() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.choose_action"]], "choose_action_from_action_values() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.choose_action_from_action_values"]], "construct_basis_and_linear_fa() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.construct_basis_and_linear_FA"]], "from_0_indexed_action_to_environment_action() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.from_0_indexed_action_to_environment_action"]], "from_environment_action_to_0_indexed_action() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.from_environment_action_to_0_indexed_action"]], "get_action_probs_from_action_values() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_action_probs_from_action_values"]], "get_action_values_given_state() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_action_values_given_state"]], "get_e_to_the_something_terms() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_e_to_the_something_terms"]], "get_params() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_params"]], "get_prob_this_action() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_prob_this_action"]], "get_probs_from_observations_and_actions() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.get_probs_from_observations_and_actions"]], "make_state_action_fa() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.make_state_action_FA"]], "set_new_params() (softmax method)": [[31, "seldonian.RL.Agents.Policies.Softmax.Softmax.set_new_params"]], "seldonian.rl.agents.keyboard_gridworld": [[32, "module-seldonian.RL.Agents.keyboard_gridworld"]], "keyboard_gridworld (class in seldonian.rl.agents.keyboard_gridworld)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld"]], "__init__() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.__init__"]], "__repr__() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.__repr__"]], "choose_action() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.choose_action"]], "get_params() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.get_params"]], "get_policy() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.get_policy"]], "get_prob_this_action() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.get_prob_this_action"]], "set_new_params() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.set_new_params"]], "update() (keyboard_gridworld method)": [[33, "seldonian.RL.Agents.keyboard_gridworld.Keyboard_gridworld.update"]], "seldonian.rl.agents.mountain_car_rough_solution": [[34, "module-seldonian.RL.Agents.mountain_car_rough_solution"]], "mountain_car_rough_solution (class in seldonian.rl.agents.mountain_car_rough_solution)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution"]], "__init__() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.__init__"]], "__repr__() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.__repr__"]], "choose_action() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.choose_action"]], "get_params() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.get_params"]], "get_policy() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.get_policy"]], "get_prob_this_action() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.get_prob_this_action"]], "set_new_params() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.set_new_params"]], "update() (mountain_car_rough_solution method)": [[35, "seldonian.RL.Agents.mountain_car_rough_solution.Mountain_car_rough_solution.update"]], "seldonian.rl.agents.simglucose_custom_fixedarea_random_agent": [[36, "module-seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent"]], "simglucosefixedareaagent (class in seldonian.rl.agents.simglucose_custom_fixedarea_random_agent)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent"]], "__init__() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.__init__"]], "__repr__() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.__repr__"]], "choose_action() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.choose_action"]], "get_params() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.get_params"]], "get_policy() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.get_policy"]], "get_prob_this_action() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.get_prob_this_action"]], "set_new_params() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.set_new_params"]], "update() (simglucosefixedareaagent method)": [[37, "seldonian.RL.Agents.simglucose_custom_fixedarea_random_agent.SimglucoseFixedAreaAgent.update"]], "seldonian.rl.env_description": [[38, "module-seldonian.RL.Env_Description"]], "seldonian.rl.env_description.env_description": [[39, "module-seldonian.RL.Env_Description.Env_Description"]], "env_description (class in seldonian.rl.env_description.env_description)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description"]], "__init__() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.__init__"]], "__repr__() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.__repr__"]], "get_min_action() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_min_action"]], "get_min_state() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_min_state"]], "get_num_actions() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_num_actions"]], "get_num_observation_dims() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_num_observation_dims"]], "get_num_states() (env_description method)": [[40, "seldonian.RL.Env_Description.Env_Description.Env_Description.get_num_states"]], "check_space_type() (in module seldonian.rl.env_description.env_description)": [[41, "seldonian.RL.Env_Description.Env_Description.check_space_type"]], "seldonian.rl.env_description.spaces": [[42, "module-seldonian.RL.Env_Description.Spaces"]], "continuous_space (class in seldonian.rl.env_description.spaces)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space"]], "__init__() (continuous_space method)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space.__init__"]], "__repr__() (continuous_space method)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space.__repr__"]], "check_bounds_valid() (continuous_space method)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space.check_bounds_valid"]], "get_num_dims() (continuous_space method)": [[43, "seldonian.RL.Env_Description.Spaces.Continuous_Space.get_num_dims"]], "discrete_space (class in seldonian.rl.env_description.spaces)": [[44, "seldonian.RL.Env_Description.Spaces.Discrete_Space"]], "__init__() (discrete_space method)": [[44, "seldonian.RL.Env_Description.Spaces.Discrete_Space.__init__"]], "__repr__() (discrete_space method)": [[44, "seldonian.RL.Env_Description.Spaces.Discrete_Space.__repr__"]], "get_num_values() (discrete_space method)": [[44, "seldonian.RL.Env_Description.Spaces.Discrete_Space.get_num_values"]], "seldonian.rl.rl_model": [[45, "module-seldonian.RL.RL_model"]], "rl_model (class in seldonian.rl.rl_model)": [[46, "seldonian.RL.RL_model.RL_model"]], "__init__() (rl_model method)": [[46, "seldonian.RL.RL_model.RL_model.__init__"]], "__repr__() (rl_model method)": [[46, "seldonian.RL.RL_model.RL_model.__repr__"]], "get_probs_from_observations_and_actions() (rl_model method)": [[46, "seldonian.RL.RL_model.RL_model.get_probs_from_observations_and_actions"]], "seldonian.rl.rl_runner": [[47, "module-seldonian.RL.RL_runner"]], "create_agent_fromdict() (in module seldonian.rl.rl_runner)": [[48, "seldonian.RL.RL_runner.create_agent_fromdict"]], "run_episode() (in module seldonian.rl.rl_runner)": [[49, "seldonian.RL.RL_runner.run_episode"]], "run_episode_from_dict() (in module seldonian.rl.rl_runner)": [[50, "seldonian.RL.RL_runner.run_episode_from_dict"]], "run_episodes_par() (in module seldonian.rl.rl_runner)": [[51, "seldonian.RL.RL_runner.run_episodes_par"]], "run_trial() (in module seldonian.rl.rl_runner)": [[52, "seldonian.RL.RL_runner.run_trial"]], "run_trial_given_agent_and_env() (in module seldonian.rl.rl_runner)": [[53, "seldonian.RL.RL_runner.run_trial_given_agent_and_env"]], "seldonian.rl.environments": [[54, "module-seldonian.RL.environments"]], "seldonian.rl.environments.environment": [[55, "module-seldonian.RL.environments.Environment"]], "environment (class in seldonian.rl.environments.environment)": [[56, "seldonian.RL.environments.Environment.Environment"]], "__init__() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.__init__"]], "__repr__() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.__repr__"]], "get_env_description() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.get_env_description"]], "get_observation() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.get_observation"]], "reset() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.reset"]], "start_visualizing() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.start_visualizing"]], "stop_visualizing() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.stop_visualizing"]], "terminated() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.terminated"]], "transition() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.transition"]], "visualize() (environment method)": [[56, "seldonian.RL.environments.Environment.Environment.visualize"]], "seldonian.rl.environments.gridworld": [[57, "module-seldonian.RL.environments.gridworld"]], "gridworld (class in seldonian.rl.environments.gridworld)": [[58, "seldonian.RL.environments.gridworld.Gridworld"]], "__init__() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.__init__"]], "__repr__() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.__repr__"]], "create_env_description() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.create_env_description"]], "get_env_description() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.get_env_description"]], "get_observation() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.get_observation"]], "is_in_goal_state() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.is_in_goal_state"]], "reset() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.reset"]], "start_visualizing() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.start_visualizing"]], "stop_visualizing() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.stop_visualizing"]], "terminated() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.terminated"]], "transition() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.transition"]], "update_position() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.update_position"]], "visualize() (gridworld method)": [[58, "seldonian.RL.environments.gridworld.Gridworld.visualize"]], "seldonian.rl.environments.mountaincar": [[59, "module-seldonian.RL.environments.mountaincar"]], "mountaincar (class in seldonian.rl.environments.mountaincar)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar"]], "__init__() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.__init__"]], "__repr__() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.__repr__"]], "check_valid_mc_action() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.check_valid_mc_action"]], "create_env_description() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.create_env_description"]], "get_env_description() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.get_env_description"]], "get_observation() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.get_observation"]], "position_and_termination_update() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.position_and_termination_update"]], "reset() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.reset"]], "start_visualizing() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.start_visualizing"]], "stop_visualizing() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.stop_visualizing"]], "terminated() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.terminated"]], "transition() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.transition"]], "update_velocity() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.update_velocity"]], "visualize() (mountaincar method)": [[60, "seldonian.RL.environments.mountaincar.Mountaincar.visualize"]], "seldonian.rl.environments.n_step_mountaincar": [[61, "module-seldonian.RL.environments.n_step_mountaincar"]], "n_step_mountaincar (class in seldonian.rl.environments.n_step_mountaincar)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar"]], "__init__() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.__init__"]], "__repr__() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.__repr__"]], "get_env_description() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.get_env_description"]], "get_observation() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.get_observation"]], "reset() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.reset"]], "start_visualizing() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.start_visualizing"]], "stop_visualizing() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.stop_visualizing"]], "terminated() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.terminated"]], "transition() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.transition"]], "visualize() (n_step_mountaincar method)": [[62, "seldonian.RL.environments.n_step_mountaincar.N_step_mountaincar.visualize"]], "seldonian.candidate_selection": [[63, "module-seldonian.candidate_selection"]], "seldonian.candidate_selection.candidate_selection": [[64, "module-seldonian.candidate_selection.candidate_selection"]], "candidateselection (class in seldonian.candidate_selection.candidate_selection)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection"]], "__init__() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.__init__"]], "__repr__() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.__repr__"]], "calculate_batches() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.calculate_batches"]], "calculate_batches_addl_datasets() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.calculate_batches_addl_datasets"]], "evaluate_primary_objective() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.evaluate_primary_objective"]], "get_constraint_upper_bounds() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.get_constraint_upper_bounds"]], "get_importance_weights() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.get_importance_weights"]], "objective_with_barrier() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.objective_with_barrier"]], "precalculate_addl_dataset_batch_indices() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.precalculate_addl_dataset_batch_indices"]], "run() (candidateselection method)": [[65, "seldonian.candidate_selection.candidate_selection.CandidateSelection.run"]], "seldonian.dataset": [[66, "module-seldonian.dataset"]], "customdataset (class in seldonian.dataset)": [[67, "seldonian.dataset.CustomDataSet"]], "__init__() (customdataset method)": [[67, "seldonian.dataset.CustomDataSet.__init__"]], "__repr__() (customdataset method)": [[67, "seldonian.dataset.CustomDataSet.__repr__"]], "custommetadata (class in seldonian.dataset)": [[68, "seldonian.dataset.CustomMetaData"]], "__init__() (custommetadata method)": [[68, "seldonian.dataset.CustomMetaData.__init__"]], "__repr__() (custommetadata method)": [[68, "seldonian.dataset.CustomMetaData.__repr__"]], "dataset (class in seldonian.dataset)": [[69, "seldonian.dataset.DataSet"]], "__init__() (dataset method)": [[69, "seldonian.dataset.DataSet.__init__"]], "__repr__() (dataset method)": [[69, "seldonian.dataset.DataSet.__repr__"]], "datasetloader (class in seldonian.dataset)": [[70, "seldonian.dataset.DataSetLoader"]], "__init__() (datasetloader method)": [[70, "seldonian.dataset.DataSetLoader.__init__"]], "__repr__() (datasetloader method)": [[70, "seldonian.dataset.DataSetLoader.__repr__"]], "load_rl_dataset_from_csv() (datasetloader method)": [[70, "seldonian.dataset.DataSetLoader.load_RL_dataset_from_csv"]], "load_rl_dataset_from_episode_file() (datasetloader method)": [[70, "seldonian.dataset.DataSetLoader.load_RL_dataset_from_episode_file"]], "load_supervised_dataset() (datasetloader method)": [[70, "seldonian.dataset.DataSetLoader.load_supervised_dataset"]], "episode (class in seldonian.dataset)": [[71, "seldonian.dataset.Episode"]], "__init__() (episode method)": [[71, "seldonian.dataset.Episode.__init__"]], "__repr__() (episode method)": [[71, "seldonian.dataset.Episode.__repr__"]], "metadata (class in seldonian.dataset)": [[72, "seldonian.dataset.MetaData"]], "__init__() (metadata method)": [[72, "seldonian.dataset.MetaData.__init__"]], "__repr__() (metadata method)": [[72, "seldonian.dataset.MetaData.__repr__"]], "rldataset (class in seldonian.dataset)": [[73, "seldonian.dataset.RLDataSet"]], "__init__() (rldataset method)": [[73, "seldonian.dataset.RLDataSet.__init__"]], "__repr__() (rldataset method)": [[73, "seldonian.dataset.RLDataSet.__repr__"]], "rlmetadata (class in seldonian.dataset)": [[74, "seldonian.dataset.RLMetaData"]], "__init__() (rlmetadata method)": [[74, "seldonian.dataset.RLMetaData.__init__"]], "__repr__() (rlmetadata method)": [[74, "seldonian.dataset.RLMetaData.__repr__"]], "superviseddataset (class in seldonian.dataset)": [[75, "seldonian.dataset.SupervisedDataSet"]], "__init__() (superviseddataset method)": [[75, "seldonian.dataset.SupervisedDataSet.__init__"]], "__repr__() (superviseddataset method)": [[75, "seldonian.dataset.SupervisedDataSet.__repr__"]], "supervisedmetadata (class in seldonian.dataset)": [[76, "seldonian.dataset.SupervisedMetaData"]], "__init__() (supervisedmetadata method)": [[76, "seldonian.dataset.SupervisedMetaData.__init__"]], "__repr__() (supervisedmetadata method)": [[76, "seldonian.dataset.SupervisedMetaData.__repr__"]], "load_rl_metadata() (in module seldonian.dataset)": [[77, "seldonian.dataset.load_RL_metadata"]], "load_custom_metadata() (in module seldonian.dataset)": [[78, "seldonian.dataset.load_custom_metadata"]], "load_supervised_metadata() (in module seldonian.dataset)": [[79, "seldonian.dataset.load_supervised_metadata"]], "seldonian.hyperparam_search": [[80, "module-seldonian.hyperparam_search"]], "hyperschema (class in seldonian.hyperparam_search)": [[81, "seldonian.hyperparam_search.HyperSchema"]], "__init__() (hyperschema method)": [[81, "seldonian.hyperparam_search.HyperSchema.__init__"]], "__repr__() (hyperschema method)": [[81, "seldonian.hyperparam_search.HyperSchema.__repr__"]], "_validate() (hyperschema method)": [[81, "seldonian.hyperparam_search.HyperSchema._validate"]], "hyperparamsearch (class in seldonian.hyperparam_search)": [[82, "seldonian.hyperparam_search.HyperparamSearch"]], "__init__() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.__init__"]], "__repr__() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.__repr__"]], "_get_theta_init_from_hyper_dict() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch._get_theta_init_from_hyper_dict"]], "_unpack_theta_to_hyperparam_values() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch._unpack_theta_to_hyperparam_values"]], "aggregate_est_prob_pass() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.aggregate_est_prob_pass"]], "candidate_safety_combine() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.candidate_safety_combine"]], "candidate_safety_split() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.candidate_safety_split"]], "cmaes_objective() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.cmaes_objective"]], "create_bootstrap_trial_spec() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.create_bootstrap_trial_spec"]], "create_dataset() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.create_dataset"]], "find_best_frac_data_in_safety() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.find_best_frac_data_in_safety"]], "find_best_hyperparameters() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.find_best_hyperparameters"]], "generate_all_bootstrap_datasets() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.generate_all_bootstrap_datasets"]], "get_all_greater_est_prob_pass() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.get_all_greater_est_prob_pass"]], "get_bootstrap_dataset_size() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.get_bootstrap_dataset_size"]], "get_est_prob_pass() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.get_est_prob_pass"]], "get_gridsearchable_hyperparameter_iterator() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.get_gridsearchable_hyperparameter_iterator"]], "get_safety_size() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.get_safety_size"]], "powell_objective() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.powell_objective"]], "run_bootstrap_trial() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.run_bootstrap_trial"]], "run_cmaes() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.run_cmaes"]], "run_powell() (hyperparamsearch method)": [[82, "seldonian.hyperparam_search.HyperparamSearch.run_powell"]], "seldonian.models": [[83, "module-seldonian.models"]], "seldonian.models.custom_text_model": [[84, "module-seldonian.models.custom_text_model"]], "customtextmodel (class in seldonian.models.custom_text_model)": [[85, "seldonian.models.custom_text_model.CustomTextModel"]], "__init__() (customtextmodel method)": [[85, "seldonian.models.custom_text_model.CustomTextModel.__init__"]], "__repr__() (customtextmodel method)": [[85, "seldonian.models.custom_text_model.CustomTextModel.__repr__"]], "predict() (customtextmodel method)": [[85, "seldonian.models.custom_text_model.CustomTextModel.predict"]], "seldonian.models.models": [[86, "module-seldonian.models.models"]], "baselogisticregressionmodel (class in seldonian.models.models)": [[87, "seldonian.models.models.BaseLogisticRegressionModel"]], "__init__() (baselogisticregressionmodel method)": [[87, "seldonian.models.models.BaseLogisticRegressionModel.__init__"]], "__repr__() (baselogisticregressionmodel method)": [[87, "seldonian.models.models.BaseLogisticRegressionModel.__repr__"]], "fit() (baselogisticregressionmodel method)": [[87, "seldonian.models.models.BaseLogisticRegressionModel.fit"]], "binarylogisticregressionmodel (class in seldonian.models.models)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel"]], "__init__() (binarylogisticregressionmodel method)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel.__init__"]], "__repr__() (binarylogisticregressionmodel method)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel.__repr__"]], "fit() (binarylogisticregressionmodel method)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel.fit"]], "predict() (binarylogisticregressionmodel method)": [[88, "seldonian.models.models.BinaryLogisticRegressionModel.predict"]], "boundedlinearregressionmodel (class in seldonian.models.models)": [[89, "seldonian.models.models.BoundedLinearRegressionModel"]], "__init__() (boundedlinearregressionmodel method)": [[89, "seldonian.models.models.BoundedLinearRegressionModel.__init__"]], "__repr__() (boundedlinearregressionmodel method)": [[89, "seldonian.models.models.BoundedLinearRegressionModel.__repr__"]], "fit() (boundedlinearregressionmodel method)": [[89, "seldonian.models.models.BoundedLinearRegressionModel.fit"]], "predict() (boundedlinearregressionmodel method)": [[89, "seldonian.models.models.BoundedLinearRegressionModel.predict"]], "classificationmodel (class in seldonian.models.models)": [[90, "seldonian.models.models.ClassificationModel"]], "__init__() (classificationmodel method)": [[90, "seldonian.models.models.ClassificationModel.__init__"]], "__repr__() (classificationmodel method)": [[90, "seldonian.models.models.ClassificationModel.__repr__"]], "dummyclassifiermodel (class in seldonian.models.models)": [[91, "seldonian.models.models.DummyClassifierModel"]], "__init__() (dummyclassifiermodel method)": [[91, "seldonian.models.models.DummyClassifierModel.__init__"]], "__repr__() (dummyclassifiermodel method)": [[91, "seldonian.models.models.DummyClassifierModel.__repr__"]], "predict() (dummyclassifiermodel method)": [[91, "seldonian.models.models.DummyClassifierModel.predict"]], "linearregressionmodel (class in seldonian.models.models)": [[92, "seldonian.models.models.LinearRegressionModel"]], "__init__() (linearregressionmodel method)": [[92, "seldonian.models.models.LinearRegressionModel.__init__"]], "__repr__() (linearregressionmodel method)": [[92, "seldonian.models.models.LinearRegressionModel.__repr__"]], "fit() (linearregressionmodel method)": [[92, "seldonian.models.models.LinearRegressionModel.fit"]], "predict() (linearregressionmodel method)": [[92, "seldonian.models.models.LinearRegressionModel.predict"]], "linearregressionmodellistfeatures (class in seldonian.models.models)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures"]], "__init__() (linearregressionmodellistfeatures method)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures.__init__"]], "__repr__() (linearregressionmodellistfeatures method)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures.__repr__"]], "fit() (linearregressionmodellistfeatures method)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures.fit"]], "predict() (linearregressionmodellistfeatures method)": [[93, "seldonian.models.models.LinearRegressionModelListFeatures.predict"]], "multiclasslogisticregressionmodel (class in seldonian.models.models)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel"]], "__init__() (multiclasslogisticregressionmodel method)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel.__init__"]], "__repr__() (multiclasslogisticregressionmodel method)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel.__repr__"]], "fit() (multiclasslogisticregressionmodel method)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel.fit"]], "predict() (multiclasslogisticregressionmodel method)": [[94, "seldonian.models.models.MultiClassLogisticRegressionModel.predict"]], "randomclassifiermodel (class in seldonian.models.models)": [[95, "seldonian.models.models.RandomClassifierModel"]], "__init__() (randomclassifiermodel method)": [[95, "seldonian.models.models.RandomClassifierModel.__init__"]], "__repr__() (randomclassifiermodel method)": [[95, "seldonian.models.models.RandomClassifierModel.__repr__"]], "predict() (randomclassifiermodel method)": [[95, "seldonian.models.models.RandomClassifierModel.predict"]], "regressionmodel (class in seldonian.models.models)": [[96, "seldonian.models.models.RegressionModel"]], "__init__() (regressionmodel method)": [[96, "seldonian.models.models.RegressionModel.__init__"]], "__repr__() (regressionmodel method)": [[96, "seldonian.models.models.RegressionModel.__repr__"]], "seldonianmodel (class in seldonian.models.models)": [[97, "seldonian.models.models.SeldonianModel"]], "__init__() (seldonianmodel method)": [[97, "seldonian.models.models.SeldonianModel.__init__"]], "__repr__() (seldonianmodel method)": [[97, "seldonian.models.models.SeldonianModel.__repr__"]], "supervisedmodel (class in seldonian.models.models)": [[98, "seldonian.models.models.SupervisedModel"]], "__init__() (supervisedmodel method)": [[98, "seldonian.models.models.SupervisedModel.__init__"]], "__repr__() (supervisedmodel method)": [[98, "seldonian.models.models.SupervisedModel.__repr__"]], "seldonian.models.objectives": [[99, "module-seldonian.models.objectives"]], "error_rate() (in module seldonian.models.objectives)": [[100, "seldonian.models.objectives.Error_Rate"]], "false_negative_rate() (in module seldonian.models.objectives)": [[101, "seldonian.models.objectives.False_Negative_Rate"]], "false_positive_rate() (in module seldonian.models.objectives)": [[102, "seldonian.models.objectives.False_Positive_Rate"]], "is_estimate() (in module seldonian.models.objectives)": [[103, "seldonian.models.objectives.IS_estimate"]], "mean_error() (in module seldonian.models.objectives)": [[104, "seldonian.models.objectives.Mean_Error"]], "mean_squared_error() (in module seldonian.models.objectives)": [[105, "seldonian.models.objectives.Mean_Squared_Error"]], "negative_rate() (in module seldonian.models.objectives)": [[106, "seldonian.models.objectives.Negative_Rate"]], "pdis_estimate() (in module seldonian.models.objectives)": [[107, "seldonian.models.objectives.PDIS_estimate"]], "positive_rate() (in module seldonian.models.objectives)": [[108, "seldonian.models.objectives.Positive_Rate"]], "true_negative_rate() (in module seldonian.models.objectives)": [[109, "seldonian.models.objectives.True_Negative_Rate"]], "true_positive_rate() (in module seldonian.models.objectives)": [[110, "seldonian.models.objectives.True_Positive_Rate"]], "us_estimate() (in module seldonian.models.objectives)": [[111, "seldonian.models.objectives.US_estimate"]], "wis_estimate() (in module seldonian.models.objectives)": [[112, "seldonian.models.objectives.WIS_estimate"]], "binary_logistic_loss() (in module seldonian.models.objectives)": [[113, "seldonian.models.objectives.binary_logistic_loss"]], "confusion_matrix() (in module seldonian.models.objectives)": [[114, "seldonian.models.objectives.confusion_matrix"]], "gradient_bounded_squared_error() (in module seldonian.models.objectives)": [[115, "seldonian.models.objectives.gradient_Bounded_Squared_Error"]], "gradient_mean_squared_error() (in module seldonian.models.objectives)": [[116, "seldonian.models.objectives.gradient_Mean_Squared_Error"]], "gradient_binary_logistic_loss() (in module seldonian.models.objectives)": [[117, "seldonian.models.objectives.gradient_binary_logistic_loss"]], "multiclass_logistic_loss() (in module seldonian.models.objectives)": [[118, "seldonian.models.objectives.multiclass_logistic_loss"]], "seldonian.models.sklearn_lr": [[119, "module-seldonian.models.sklearn_lr"]], "sklearnlinearregressor (class in seldonian.models.sklearn_lr)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor"]], "__init__() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.__init__"]], "__repr__() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.__repr__"]], "backward_pass() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.backward_pass"]], "create_model() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.create_model"]], "forward_pass() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.forward_pass"]], "get_model_params() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.get_model_params"]], "predict() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.predict"]], "update_model_params() (sklearnlinearregressor method)": [[120, "seldonian.models.sklearn_lr.SkLearnLinearRegressor.update_model_params"]], "seldonian.models.sklearn_model": [[121, "module-seldonian.models.sklearn_model"]], "supervisedsklearnbasemodel (class in seldonian.models.sklearn_model)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel"]], "__init__() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.__init__"]], "__repr__() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.__repr__"]], "backward_pass() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.backward_pass"]], "create_model() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.create_model"]], "forward_pass() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.forward_pass"]], "get_model_params() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.get_model_params"]], "predict() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.predict"]], "update_model_params() (supervisedsklearnbasemodel method)": [[122, "seldonian.models.sklearn_model.SupervisedSkLearnBaseModel.update_model_params"]], "sklearn_predict_vjp() (in module seldonian.models.sklearn_model)": [[123, "seldonian.models.sklearn_model.sklearn_predict_vjp"]], "seldonian.models.trees": [[124, "module-seldonian.models.trees"]], "seldonian.models.trees.skrandomforest_model": [[125, "module-seldonian.models.trees.skrandomforest_model"]], "seldonianrandomforest (class in seldonian.models.trees.skrandomforest_model)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest"]], "__init__() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.__init__"]], "__repr__() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.__repr__"]], "fit() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.fit"]], "forward_pass() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.forward_pass"]], "get_jacobian() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.get_jacobian"]], "get_leaf_node_probs() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.get_leaf_node_probs"]], "predict() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.predict"]], "set_leaf_node_values() (seldonianrandomforest method)": [[126, "seldonian.models.trees.skrandomforest_model.SeldonianRandomForest.set_leaf_node_values"]], "sklearn_predict_vjp() (in module seldonian.models.trees.skrandomforest_model)": [[127, "seldonian.models.trees.skrandomforest_model.sklearn_predict_vjp"]], "seldonian.models.trees.sktree_model": [[128, "module-seldonian.models.trees.sktree_model"]], "seldoniandecisiontree (class in seldonian.models.trees.sktree_model)": [[129, "seldonian.models.trees.sktree_model.SeldonianDecisionTree"]], "__init__() (seldoniandecisiontree method)": [[129, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.__init__"]], "__repr__() (seldoniandecisiontree method)": [[129, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.__repr__"]], "fit() (seldoniandecisiontree method)": [[129, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.fit"]], "forward_pass() (seldoniandecisiontree method)": [[129, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.forward_pass"]], "get_jacobian() (seldoniandecisiontree method)": [[129, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.get_jacobian"]], "get_leaf_node_probs() (seldoniandecisiontree method)": [[129, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.get_leaf_node_probs"]], "predict() (seldoniandecisiontree method)": [[129, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.predict"]], "set_leaf_node_values() (seldoniandecisiontree method)": [[129, "seldonian.models.trees.sktree_model.SeldonianDecisionTree.set_leaf_node_values"]], "probs2theta() (in module seldonian.models.trees.sktree_model)": [[130, "seldonian.models.trees.sktree_model.probs2theta"]], "sigmoid() (in module seldonian.models.trees.sktree_model)": [[131, "seldonian.models.trees.sktree_model.sigmoid"]], "sklearn_predict_vjp() (in module seldonian.models.trees.sktree_model)": [[132, "seldonian.models.trees.sktree_model.sklearn_predict_vjp"]], "seldonian.optimizers": [[133, "module-seldonian.optimizers"]], "seldonian.optimizers.gradient_descent": [[134, "module-seldonian.optimizers.gradient_descent"]], "gradient_descent_adam() (in module seldonian.optimizers.gradient_descent)": [[135, "seldonian.optimizers.gradient_descent.gradient_descent_adam"]], "setup_gradients() (in module seldonian.optimizers.gradient_descent)": [[136, "seldonian.optimizers.gradient_descent.setup_gradients"]], "seldonian.parse_tree": [[137, "module-seldonian.parse_tree"]], "seldonian.parse_tree.nodes": [[138, "module-seldonian.parse_tree.nodes"]], "basenode (class in seldonian.parse_tree.nodes)": [[139, "seldonian.parse_tree.nodes.BaseNode"]], "__init__() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.__init__"]], "__repr__() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.__repr__"]], "calculate_bounds() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.calculate_bounds"]], "calculate_data_forbound() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.calculate_data_forbound"]], "calculate_value() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.calculate_value"]], "compute_hc_lowerbound() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.compute_HC_upperbound"]], "mask_data() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.mask_data"]], "predict_hc_lowerbound() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.predict_HC_upperbound"]], "zhat() (basenode method)": [[139, "seldonian.parse_tree.nodes.BaseNode.zhat"]], "cvarsqebasenode (class in seldonian.parse_tree.nodes)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode"]], "__init__() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.__init__"]], "__repr__() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.__repr__"]], "calculate_bounds() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.calculate_bounds"]], "calculate_data_forbound() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.calculate_data_forbound"]], "calculate_value() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.calculate_value"]], "compute_hc_lowerbound() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.compute_HC_upperbound"]], "mask_data() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.mask_data"]], "predict_hc_lowerbound() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.predict_HC_upperbound"]], "zhat() (cvarsqebasenode method)": [[140, "seldonian.parse_tree.nodes.CVaRSQeBaseNode.zhat"]], "confusionmatrixbasenode (class in seldonian.parse_tree.nodes)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode"]], "__init__() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.__init__"]], "__repr__() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.__repr__"]], "calculate_bounds() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.calculate_bounds"]], "calculate_data_forbound() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.calculate_data_forbound"]], "calculate_value() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.calculate_value"]], "compute_hc_lowerbound() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.compute_HC_upperbound"]], "mask_data() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.mask_data"]], "predict_hc_lowerbound() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.predict_HC_upperbound"]], "zhat() (confusionmatrixbasenode method)": [[141, "seldonian.parse_tree.nodes.ConfusionMatrixBaseNode.zhat"]], "constantnode (class in seldonian.parse_tree.nodes)": [[142, "seldonian.parse_tree.nodes.ConstantNode"]], "__init__() (constantnode method)": [[142, "seldonian.parse_tree.nodes.ConstantNode.__init__"]], "__repr__() (constantnode method)": [[142, "seldonian.parse_tree.nodes.ConstantNode.__repr__"]], "internalnode (class in seldonian.parse_tree.nodes)": [[143, "seldonian.parse_tree.nodes.InternalNode"]], "__init__() (internalnode method)": [[143, "seldonian.parse_tree.nodes.InternalNode.__init__"]], "__repr__() (internalnode method)": [[143, "seldonian.parse_tree.nodes.InternalNode.__repr__"]], "medcustombasenode (class in seldonian.parse_tree.nodes)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode"]], "__init__() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.__init__"]], "__repr__() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.__repr__"]], "calculate_bounds() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.calculate_bounds"]], "calculate_data_forbound() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.calculate_data_forbound"]], "calculate_value() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.calculate_value"]], "compute_hc_lowerbound() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.compute_HC_upperbound"]], "mask_data() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.mask_data"]], "precalculate_data() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.precalculate_data"]], "predict_hc_lowerbound() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.predict_HC_upperbound"]], "zhat() (medcustombasenode method)": [[144, "seldonian.parse_tree.nodes.MEDCustomBaseNode.zhat"]], "multiclassbasenode (class in seldonian.parse_tree.nodes)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode"]], "__init__() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.__init__"]], "__repr__() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.__repr__"]], "calculate_bounds() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.calculate_bounds"]], "calculate_data_forbound() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.calculate_data_forbound"]], "calculate_value() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.calculate_value"]], "compute_hc_lowerbound() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.compute_HC_upperbound"]], "mask_data() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.mask_data"]], "predict_hc_lowerbound() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.predict_HC_upperbound"]], "zhat() (multiclassbasenode method)": [[145, "seldonian.parse_tree.nodes.MultiClassBaseNode.zhat"]], "newpolicyperformancebasenode (class in seldonian.parse_tree.nodes)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode"]], "__init__() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.__init__"]], "__repr__() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.__repr__"]], "calculate_bounds() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.calculate_bounds"]], "calculate_data_forbound() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.calculate_data_forbound"]], "calculate_value() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.calculate_value"]], "compute_hc_lowerbound() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.compute_HC_upperbound"]], "mask_data() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.mask_data"]], "predict_hc_lowerbound() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.predict_HC_upperbound"]], "zhat() (newpolicyperformancebasenode method)": [[146, "seldonian.parse_tree.nodes.NewPolicyPerformanceBaseNode.zhat"]], "node (class in seldonian.parse_tree.nodes)": [[147, "seldonian.parse_tree.nodes.Node"]], "__init__() (node method)": [[147, "seldonian.parse_tree.nodes.Node.__init__"]], "__repr__() (node method)": [[147, "seldonian.parse_tree.nodes.Node.__repr__"]], "rlaltrewardbasenode (class in seldonian.parse_tree.nodes)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode"]], "__init__() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.__init__"]], "__repr__() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.__repr__"]], "calculate_bounds() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.calculate_bounds"]], "calculate_data_forbound() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.calculate_data_forbound"]], "calculate_value() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.calculate_value"]], "compute_hc_lowerbound() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.compute_HC_lowerbound"]], "compute_hc_upper_and_lowerbound() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.compute_HC_upper_and_lowerbound"]], "compute_hc_upperbound() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.compute_HC_upperbound"]], "mask_data() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.mask_data"]], "predict_hc_lowerbound() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.predict_HC_lowerbound"]], "predict_hc_upper_and_lowerbound() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.predict_HC_upper_and_lowerbound"]], "predict_hc_upperbound() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.predict_HC_upperbound"]], "zhat() (rlaltrewardbasenode method)": [[148, "seldonian.parse_tree.nodes.RLAltRewardBaseNode.zhat"]], "bounds_required_dict (in module seldonian.parse_tree.operators)": [[149, "seldonian.parse_tree.operators.bounds_required_dict"]], "not_supported_op_mapper (in module seldonian.parse_tree.operators)": [[149, "seldonian.parse_tree.operators.not_supported_op_mapper"]], "op_mapper (in module seldonian.parse_tree.operators)": [[149, "seldonian.parse_tree.operators.op_mapper"]], "seldonian.parse_tree.operators": [[149, "module-seldonian.parse_tree.operators"]], "seldonian.parse_tree.parse_tree": [[150, "module-seldonian.parse_tree.parse_tree"]], "parsetree (class in seldonian.parse_tree.parse_tree)": [[151, "seldonian.parse_tree.parse_tree.ParseTree"]], "__init__() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.__init__"]], "__repr__() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.__repr__"]], "_abs() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._abs"]], "_add() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._add"]], "_assign_bounds_helper() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._assign_bounds_helper"]], "_assign_deltas_helper() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._assign_deltas_helper"]], "_assign_infl_factors_helper() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._assign_infl_factors_helper"]], "_ast2pt_node() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._ast2pt_node"]], "_ast_tree_helper() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._ast_tree_helper"]], "_div() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._div"]], "_evaluator_helper() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._evaluator_helper"]], "_exp() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._exp"]], "_log() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._log"]], "_max() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._max"]], "_min() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._min"]], "_mult() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._mult"]], "_parse_subscript() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._parse_subscript"]], "_pow() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._pow"]], "_preprocess_constraint_str() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._preprocess_constraint_str"]], "_propagate_value() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._propagate_value"]], "_propagator_helper() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._propagator_helper"]], "_protect_nan() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._protect_nan"]], "_sub() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._sub"]], "_validate_delta_vector() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._validate_delta_vector"]], "_validate_infl_factors() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree._validate_infl_factors"]], "assign_bounds_needed() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.assign_bounds_needed"]], "assign_deltas() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.assign_deltas"]], "assign_infl_factors() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.assign_infl_factors"]], "build_tree() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.build_tree"]], "create_from_ast() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.create_from_ast"]], "evaluate_constraint() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.evaluate_constraint"]], "make_viz() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.make_viz"]], "make_viz_helper() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.make_viz_helper"]], "propagate() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.propagate"]], "propagate_bounds() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.propagate_bounds"]], "reset_base_node_dict() (parsetree method)": [[151, "seldonian.parse_tree.parse_tree.ParseTree.reset_base_node_dict"]], "make_parse_trees_from_constraints() (in module seldonian.parse_tree.parse_tree)": [[152, "seldonian.parse_tree.parse_tree.make_parse_trees_from_constraints"]], "measure_function_vector_mapper (in module seldonian.parse_tree.zhat_funcs)": [[153, "seldonian.parse_tree.zhat_funcs.measure_function_vector_mapper"]], "seldonian.parse_tree.zhat_funcs": [[153, "module-seldonian.parse_tree.zhat_funcs"]], "batcher() (in module seldonian.parse_tree.zhat_funcs)": [[154, "seldonian.parse_tree.zhat_funcs.batcher"]], "evaluate_statistic() (in module seldonian.parse_tree.zhat_funcs)": [[155, "seldonian.parse_tree.zhat_funcs.evaluate_statistic"]], "sample_from_statistic() (in module seldonian.parse_tree.zhat_funcs)": [[156, "seldonian.parse_tree.zhat_funcs.sample_from_statistic"]], "vector_accuracy() (in module seldonian.parse_tree.zhat_funcs)": [[157, "seldonian.parse_tree.zhat_funcs.vector_Accuracy"]], "vector_error() (in module seldonian.parse_tree.zhat_funcs)": [[158, "seldonian.parse_tree.zhat_funcs.vector_Error"]], "vector_error_rate() (in module seldonian.parse_tree.zhat_funcs)": [[159, "seldonian.parse_tree.zhat_funcs.vector_Error_Rate"]], "vector_false_negative_rate() (in module seldonian.parse_tree.zhat_funcs)": [[160, "seldonian.parse_tree.zhat_funcs.vector_False_Negative_Rate"]], "vector_false_positive_rate() (in module seldonian.parse_tree.zhat_funcs)": [[161, "seldonian.parse_tree.zhat_funcs.vector_False_Positive_Rate"]], "vector_is_estimate() (in module seldonian.parse_tree.zhat_funcs)": [[162, "seldonian.parse_tree.zhat_funcs.vector_IS_estimate"]], "vector_negative_rate() (in module seldonian.parse_tree.zhat_funcs)": [[163, "seldonian.parse_tree.zhat_funcs.vector_Negative_Rate"]], "vector_pdis_estimate() (in module seldonian.parse_tree.zhat_funcs)": [[164, "seldonian.parse_tree.zhat_funcs.vector_PDIS_estimate"]], "vector_positive_rate() (in module seldonian.parse_tree.zhat_funcs)": [[165, "seldonian.parse_tree.zhat_funcs.vector_Positive_Rate"]], "vector_squared_error() (in module seldonian.parse_tree.zhat_funcs)": [[166, "seldonian.parse_tree.zhat_funcs.vector_Squared_Error"]], "vector_true_negative_rate() (in module seldonian.parse_tree.zhat_funcs)": [[167, "seldonian.parse_tree.zhat_funcs.vector_True_Negative_Rate"]], "vector_true_positive_rate() (in module seldonian.parse_tree.zhat_funcs)": [[168, "seldonian.parse_tree.zhat_funcs.vector_True_Positive_Rate"]], "vector_wis_estimate() (in module seldonian.parse_tree.zhat_funcs)": [[169, "seldonian.parse_tree.zhat_funcs.vector_WIS_estimate"]], "vector_auxiliary_return_us_estimate() (in module seldonian.parse_tree.zhat_funcs)": [[170, "seldonian.parse_tree.zhat_funcs.vector_auxiliary_return_US_estimate"]], "vector_confusion_matrix() (in module seldonian.parse_tree.zhat_funcs)": [[171, "seldonian.parse_tree.zhat_funcs.vector_confusion_matrix"]], "seldonian.safety_test": [[172, "module-seldonian.safety_test"]], "seldonian.safety_test.safety_test": [[173, "module-seldonian.safety_test.safety_test"]], "safetytest (class in seldonian.safety_test.safety_test)": [[174, "seldonian.safety_test.safety_test.SafetyTest"]], "__init__() (safetytest method)": [[174, "seldonian.safety_test.safety_test.SafetyTest.__init__"]], "__repr__() (safetytest method)": [[174, "seldonian.safety_test.safety_test.SafetyTest.__repr__"]], "evaluate_primary_objective() (safetytest method)": [[174, "seldonian.safety_test.safety_test.SafetyTest.evaluate_primary_objective"]], "get_importance_weights() (safetytest method)": [[174, "seldonian.safety_test.safety_test.SafetyTest.get_importance_weights"]], "run() (safetytest method)": [[174, "seldonian.safety_test.safety_test.SafetyTest.run"]], "seldonian.seldonian_algorithm": [[175, "module-seldonian.seldonian_algorithm"]], "seldonianalgorithm (class in seldonian.seldonian_algorithm)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm"]], "__init__() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.__init__"]], "__repr__() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.__repr__"]], "candidate_safety_split() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.candidate_safety_split"]], "candidate_safety_split_addl_datasets() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.candidate_safety_split_addl_datasets"]], "candidate_selection() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.candidate_selection"]], "evaluate_primary_objective() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.evaluate_primary_objective"]], "get_cs_result() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.get_cs_result"]], "get_importance_weights() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.get_importance_weights"]], "get_st_upper_bounds() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.get_st_upper_bounds"]], "parse_trees (seldonianalgorithm attribute)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.parse_trees"]], "run() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.run"]], "run_candidate_selection() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.run_candidate_selection"]], "run_safety_test() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.run_safety_test"]], "safety_test() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.safety_test"]], "set_initial_solution() (seldonianalgorithm method)": [[176, "seldonian.seldonian_algorithm.SeldonianAlgorithm.set_initial_solution"]], "seldonian.spec": [[177, "module-seldonian.spec"]], "hyperparameterselectionspec (class in seldonian.spec)": [[178, "seldonian.spec.HyperparameterSelectionSpec"]], "__init__() (hyperparameterselectionspec method)": [[178, "seldonian.spec.HyperparameterSelectionSpec.__init__"]], "__repr__() (hyperparameterselectionspec method)": [[178, "seldonian.spec.HyperparameterSelectionSpec.__repr__"]], "rlspec (class in seldonian.spec)": [[179, "seldonian.spec.RLSpec"]], "__init__() (rlspec method)": [[179, "seldonian.spec.RLSpec.__init__"]], "__repr__() (rlspec method)": [[179, "seldonian.spec.RLSpec.__repr__"]], "validate_additional_datasets() (rlspec method)": [[179, "seldonian.spec.RLSpec.validate_additional_datasets"]], "validate_custom_datasets() (rlspec method)": [[179, "seldonian.spec.RLSpec.validate_custom_datasets"]], "validate_parse_trees() (rlspec method)": [[179, "seldonian.spec.RLSpec.validate_parse_trees"]], "spec (class in seldonian.spec)": [[180, "seldonian.spec.Spec"]], "__init__() (spec method)": [[180, "seldonian.spec.Spec.__init__"]], "__repr__() (spec method)": [[180, "seldonian.spec.Spec.__repr__"]], "validate_additional_datasets() (spec method)": [[180, "seldonian.spec.Spec.validate_additional_datasets"]], "validate_custom_datasets() (spec method)": [[180, "seldonian.spec.Spec.validate_custom_datasets"]], "validate_parse_trees() (spec method)": [[180, "seldonian.spec.Spec.validate_parse_trees"]], "supervisedspec (class in seldonian.spec)": [[181, "seldonian.spec.SupervisedSpec"]], "__init__() (supervisedspec method)": [[181, "seldonian.spec.SupervisedSpec.__init__"]], "__repr__() (supervisedspec method)": [[181, "seldonian.spec.SupervisedSpec.__repr__"]], "validate_additional_datasets() (supervisedspec method)": [[181, "seldonian.spec.SupervisedSpec.validate_additional_datasets"]], "validate_custom_datasets() (supervisedspec method)": [[181, "seldonian.spec.SupervisedSpec.validate_custom_datasets"]], "validate_parse_trees() (supervisedspec method)": [[181, "seldonian.spec.SupervisedSpec.validate_parse_trees"]], "createrlspec() (in module seldonian.spec)": [[182, "seldonian.spec.createRLSpec"]], "createsimplesupervisedspec() (in module seldonian.spec)": [[183, "seldonian.spec.createSimpleSupervisedSpec"]], "createsupervisedspec() (in module seldonian.spec)": [[184, "seldonian.spec.createSupervisedSpec"]], "seldonian.utils": [[185, "module-seldonian.utils"]], "seldonian.utils.rl_utils": [[186, "module-seldonian.utils.RL_utils"]], "argmax_multi() (in module seldonian.utils.rl_utils)": [[187, "seldonian.utils.RL_utils.argmax_multi"]], "clamp() (in module seldonian.utils.rl_utils)": [[188, "seldonian.utils.RL_utils.clamp"]], "error() (in module seldonian.utils.rl_utils)": [[189, "seldonian.utils.RL_utils.error"]], "seldonian.utils.hyperparam_utils": [[190, "module-seldonian.utils.hyperparam_utils"]], "bootstrap_sample_dataset() (in module seldonian.utils.hyperparam_utils)": [[191, "seldonian.utils.hyperparam_utils.bootstrap_sample_dataset"]], "clopper_pearson_bound() (in module seldonian.utils.hyperparam_utils)": [[192, "seldonian.utils.hyperparam_utils.clopper_pearson_bound"]], "create_shuffled_dataset() (in module seldonian.utils.hyperparam_utils)": [[193, "seldonian.utils.hyperparam_utils.create_shuffled_dataset"]], "rebuild_parse_trees() (in module seldonian.utils.hyperparam_utils)": [[194, "seldonian.utils.hyperparam_utils.rebuild_parse_trees"]], "set_spec_with_hyperparam_setting() (in module seldonian.utils.hyperparam_utils)": [[195, "seldonian.utils.hyperparam_utils.set_spec_with_hyperparam_setting"]], "ttest_bound() (in module seldonian.utils.hyperparam_utils)": [[196, "seldonian.utils.hyperparam_utils.ttest_bound"]], "seldonian.utils.io_utils": [[197, "module-seldonian.utils.io_utils"]], "cmaes_logger() (in module seldonian.utils.io_utils)": [[198, "seldonian.utils.io_utils.cmaes_logger"]], "dir_path() (in module seldonian.utils.io_utils)": [[199, "seldonian.utils.io_utils.dir_path"]], "load_json() (in module seldonian.utils.io_utils)": [[200, "seldonian.utils.io_utils.load_json"]], "load_pickle() (in module seldonian.utils.io_utils)": [[201, "seldonian.utils.io_utils.load_pickle"]], "save_json() (in module seldonian.utils.io_utils)": [[202, "seldonian.utils.io_utils.save_json"]], "save_pickle() (in module seldonian.utils.io_utils)": [[203, "seldonian.utils.io_utils.save_pickle"]], "seldonian.utils.plot_utils": [[204, "module-seldonian.utils.plot_utils"]], "plot_gradient_descent() (in module seldonian.utils.plot_utils)": [[205, "seldonian.utils.plot_utils.plot_gradient_descent"]], "seldonian.utils.stats_utils": [[206, "module-seldonian.utils.stats_utils"]], "custom_cumprod() (in module seldonian.utils.stats_utils)": [[207, "seldonian.utils.stats_utils.custom_cumprod"]], "default_supervised_initial_solution_fn() (in module seldonian.utils.stats_utils)": [[208, "seldonian.utils.stats_utils.default_supervised_initial_solution_fn"]], "softmax() (in module seldonian.utils.stats_utils)": [[209, "seldonian.utils.stats_utils.softmax"]], "stddev() (in module seldonian.utils.stats_utils)": [[210, "seldonian.utils.stats_utils.stddev"]], "tinv() (in module seldonian.utils.stats_utils)": [[211, "seldonian.utils.stats_utils.tinv"]], "weighted_sum_gamma() (in module seldonian.utils.stats_utils)": [[212, "seldonian.utils.stats_utils.weighted_sum_gamma"]], "seldonian.utils.tutorial_utils": [[213, "module-seldonian.utils.tutorial_utils"]], "generate_clipped_data() (in module seldonian.utils.tutorial_utils)": [[214, "seldonian.utils.tutorial_utils.generate_clipped_data"]], "generate_data() (in module seldonian.utils.tutorial_utils)": [[215, "seldonian.utils.tutorial_utils.generate_data"]], "make_synthetic_regression_dataset() (in module seldonian.utils.tutorial_utils)": [[216, "seldonian.utils.tutorial_utils.make_synthetic_regression_dataset"]], "seldonian.warnings": [[217, "module-seldonian.warnings"]], "seldonian.warnings.custom_warnings": [[218, "module-seldonian.warnings.custom_warnings"]], "custom_formatwarning() (in module seldonian.warnings.custom_warnings)": [[219, "seldonian.warnings.custom_warnings.custom_formatwarning"]]}})